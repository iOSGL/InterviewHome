
console.log('START WEEX VUE RENDER: 1.0.26, Build 2018-05-28 14:19.');


(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.WeexVueRender = factory());
}(this, (function () { 'use strict';

function __$styleInject(css, returnValue) {
  if (typeof document === 'undefined') {
    return returnValue;
  }
  css = css || '';
  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';
  head.appendChild(style);
  
  if (style.styleSheet){
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
  return returnValue;
}

__$styleInject("/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n \n.weex-root,\n.weex-root * {\n  color: initial;\n  cursor: initial;\n  direction: initial;\n  /* In chrome, there's a chance that user set the miximum font-size to \n  a abnormal smaller size. But actually the smaller size is never working\n  if this font / font-size default value is set to initial. Perhaps a bug\n  for chrome. */\n  font: initial;\n  font-size: initial;\n  font-family: initial;\n  font-style: initial;\n  font-variant: initial;\n  font-weight: initial;\n  line-height: initial;\n  text-align: initial;\n  text-indent: initial;\n  visibility: initial;\n  white-space: initial;\n  word-spacing: initial;\n  font-family: BlinkMacSystemFont, 'Source Sans Pro', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.weex-root,\n.weex-root *,\n.weex-root *::before,\n.weex-root *::after {\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  -webkit-text-size-adjust: none;\n     -moz-text-size-adjust: none;\n      -ms-text-size-adjust: none;\n          text-size-adjust: none;\n}\n\n.weex-root a,\n.weex-root button,\n.weex-root [role=\"button\"],\n.weex-root input,\n.weex-root label,\n.weex-root select,\n.weex-root textarea {\n      touch-action: manipulation;\n}\n\n.weex-root p,\n.weex-root ol,\n.weex-root ul,\n.weex-root dl,\n.weex-root figure {\n  margin: 0;\n  padding: 0;\n}\n\n.weex-root li {\n  list-style: none;\n}\n\n.weex-root figure {\n  margin: 0;\n}\n\n.weex-root textarea {\n  resize: none;\n}\n\n/* show no scroll bar. */\n::-webkit-scrollbar {\n  display: none;\n}\n",undefined);

__$styleInject("/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n \n.weex-root * {\n  border-width: 0;\n  border-color: inherit;\n  border-style: solid;\n}\n\ndiv.weex-root {\n  min-height: 100%;\n}\n\n/**\n * slider will overflow in horizontal axis, which will cause container\n * horizontally expanding. below styles will prevent this from happening.\n */\n.weex-root {\n  width: 100%;\n  overflow-x: hidden;\n}\n\n.weex-root figure {\n  background-repeat: no-repeat;\n  background-position: 50% 50%;\n}\n\n.weex-flex-ct {\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: flex;\n}\n\n.weex-ct {\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: flex;\n  position: relative;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n  -webkit-flex-direction: column;\n          flex-direction: column;\n  -webkit-flex-shrink: 0;\n          flex-shrink: 0;\n  -webkit-box-flex: 0;\n  -webkit-flex-grow: 0;\n          flex-grow: 0;\n  -webkit-flex-basis: auto;\n          flex-basis: auto;\n  -webkit-box-align: stretch;\n  -webkit-align-items: stretch;\n          align-items: stretch;\n  -webkit-align-content: flex-start;\n          align-content: flex-start;\n  border: 0 solid black;\n  margin: 0;\n  padding: 0;\n  min-width: 0;\n}\n\n.weex-ct.horizontal {\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n  -webkit-flex-direction: row;\n          flex-direction: row;\n}\n\n.weex-el {\n  display: block;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  position: relative;\n  -webkit-flex-shrink: 0;\n          flex-shrink: 0;\n  -webkit-box-flex: 0;\n  -webkit-flex-grow: 0;\n          flex-grow: 0;\n  -webkit-flex-basis: auto;\n          flex-basis: auto;\n  border: 0 solid black;\n  margin: 0;\n  padding: 0;\n  min-width: 0;\n}\n\n.weex-text {\n  display: -webkit-box;\n  display: -moz-box;\n  -webkit-box-orient: vertical;\n  position: relative;\n  white-space: pre-wrap;  /* not using 'pre': support auto line feed. */\n  font-size: 0.4266666666666667rem;\n  word-wrap: break-word;\n  overflow: hidden; /* it'll be clipped if the height is not high enough. */\n}\n\n.weex-image {\n  background-repeat: no-repeat;\n  background-position: 50% 50%;\n  background-size: 100% 100%;\n}\n\n.weex-a {\n  text-decoration: none;\n}\n\n.weex-ios-sticky {\n  position: -webkit-sticky !important;\n  position: sticky !important;\n  z-index: 9999;\n  top: 0;\n}\n\n.weex-fixed {\n  position: fixed;\n  z-index: 1;\n}\n\n.weex-sticky {\n  position: fixed;\n  top: 0;\n  z-index: 9999;\n}\n",undefined);

// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
var _toInteger = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};

// 7.2.1 RequireObjectCoercible(argument)
var _defined = function (it) {
  if (it == undefined) { throw TypeError("Can't call method on  " + it); }
  return it;
};

// true  -> String#at
// false -> String#codePointAt
var _stringAt = function (TO_STRING) {
  return function (that, pos) {
    var s = String(_defined(that));
    var i = _toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) { return TO_STRING ? '' : undefined; }
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};

var _library = false;

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var _global = createCommonjsModule(function (module) {
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') { __g = global; } // eslint-disable-line no-undef
});

var _core = createCommonjsModule(function (module) {
var core = module.exports = { version: '2.5.2' };
if (typeof __e == 'number') { __e = core; } // eslint-disable-line no-undef
});

var _core_1 = _core.version;

var _isObject = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};

var _anObject = function (it) {
  if (!_isObject(it)) { throw TypeError(it + ' is not an object!'); }
  return it;
};

var _fails = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};

// Thank's IE8 for his funny defineProperty
var _descriptors = !_fails(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});

var document$1 = _global.document;
// typeof document.createElement is 'object' in old IE
var is = _isObject(document$1) && _isObject(document$1.createElement);
var _domCreate = function (it) {
  return is ? document$1.createElement(it) : {};
};

var _ie8DomDefine = !_descriptors && !_fails(function () {
  return Object.defineProperty(_domCreate('div'), 'a', { get: function () { return 7; } }).a != 7;
});

// 7.1.1 ToPrimitive(input [, PreferredType])

// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
var _toPrimitive = function (it, S) {
  if (!_isObject(it)) { return it; }
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) { return val; }
  if (typeof (fn = it.valueOf) == 'function' && !_isObject(val = fn.call(it))) { return val; }
  if (!S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) { return val; }
  throw TypeError("Can't convert object to primitive value");
};

var dP = Object.defineProperty;

var f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  _anObject(O);
  P = _toPrimitive(P, true);
  _anObject(Attributes);
  if (_ie8DomDefine) { try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ } }
  if ('get' in Attributes || 'set' in Attributes) { throw TypeError('Accessors not supported!'); }
  if ('value' in Attributes) { O[P] = Attributes.value; }
  return O;
};

var _objectDp = {
	f: f
};

var _propertyDesc = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

var _hide = _descriptors ? function (object, key, value) {
  return _objectDp.f(object, key, _propertyDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

var hasOwnProperty = {}.hasOwnProperty;
var _has = function (it, key) {
  return hasOwnProperty.call(it, key);
};

var id = 0;
var px = Math.random();
var _uid = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};

var _redefine = createCommonjsModule(function (module) {
var SRC = _uid('src');
var TO_STRING = 'toString';
var $toString = Function[TO_STRING];
var TPL = ('' + $toString).split(TO_STRING);

_core.inspectSource = function (it) {
  return $toString.call(it);
};

(module.exports = function (O, key, val, safe) {
  var isFunction = typeof val == 'function';
  if (isFunction) { _has(val, 'name') || _hide(val, 'name', key); }
  if (O[key] === val) { return; }
  if (isFunction) { _has(val, SRC) || _hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key))); }
  if (O === _global) {
    O[key] = val;
  } else if (!safe) {
    delete O[key];
    _hide(O, key, val);
  } else if (O[key]) {
    O[key] = val;
  } else {
    _hide(O, key, val);
  }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString() {
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});
});

var _aFunction = function (it) {
  if (typeof it != 'function') { throw TypeError(it + ' is not a function!'); }
  return it;
};

// optional / simple context binding

var _ctx = function (fn, that, length) {
  _aFunction(fn);
  if (that === undefined) { return fn; }
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};

var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] || (_global[name] = {}) : (_global[name] || {})[PROTOTYPE];
  var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});
  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
  var key, own, out, exp;
  if (IS_GLOBAL) { source = name; }
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? _ctx(out, _global) : IS_PROTO && typeof out == 'function' ? _ctx(Function.call, out) : out;
    // extend global
    if (target) { _redefine(target, key, out, type & $export.U); }
    // export
    if (exports[key] != out) { _hide(exports, key, exp); }
    if (IS_PROTO && expProto[key] != out) { expProto[key] = out; }
  }
};
_global.core = _core;
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
var _export = $export;

var _iterators = {};

var toString = {}.toString;

var _cof = function (it) {
  return toString.call(it).slice(8, -1);
};

// fallback for non-array-like ES3 and non-enumerable old V8 strings

// eslint-disable-next-line no-prototype-builtins
var _iobject = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return _cof(it) == 'String' ? it.split('') : Object(it);
};

// to indexed object, toObject with fallback for non-array-like ES3 strings


var _toIobject = function (it) {
  return _iobject(_defined(it));
};

// 7.1.15 ToLength

var min = Math.min;
var _toLength = function (it) {
  return it > 0 ? min(_toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

var max = Math.max;
var min$1 = Math.min;
var _toAbsoluteIndex = function (index, length) {
  index = _toInteger(index);
  return index < 0 ? max(index + length, 0) : min$1(index, length);
};

// false -> Array#indexOf
// true  -> Array#includes



var _arrayIncludes = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = _toIobject($this);
    var length = _toLength(O.length);
    var index = _toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) { while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) { return true; }
    // Array#indexOf ignores holes, Array#includes - not
    } } else { for (;length > index; index++) { if (IS_INCLUDES || index in O) {
      if (O[index] === el) { return IS_INCLUDES || index || 0; }
    } } } return !IS_INCLUDES && -1;
  };
};

var SHARED = '__core-js_shared__';
var store = _global[SHARED] || (_global[SHARED] = {});
var _shared = function (key) {
  return store[key] || (store[key] = {});
};

var shared = _shared('keys');

var _sharedKey = function (key) {
  return shared[key] || (shared[key] = _uid(key));
};

var arrayIndexOf = _arrayIncludes(false);
var IE_PROTO$1 = _sharedKey('IE_PROTO');

var _objectKeysInternal = function (object, names) {
  var O = _toIobject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) { if (key != IE_PROTO$1) { _has(O, key) && result.push(key); } }
  // Don't enum bug & hidden keys
  while (names.length > i) { if (_has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  } }
  return result;
};

// IE 8- don't enum bug keys
var _enumBugKeys = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');

// 19.1.2.14 / 15.2.3.14 Object.keys(O)



var _objectKeys = Object.keys || function keys(O) {
  return _objectKeysInternal(O, _enumBugKeys);
};

var _objectDps = _descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
  _anObject(O);
  var keys = _objectKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) { _objectDp.f(O, P = keys[i++], Properties[P]); }
  return O;
};

var document$2 = _global.document;
var _html = document$2 && document$2.documentElement;

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])



var IE_PROTO = _sharedKey('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE$1 = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = _domCreate('iframe');
  var i = _enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  _html.appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) { delete createDict[PROTOTYPE$1][_enumBugKeys[i]]; }
  return createDict();
};

var _objectCreate = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE$1] = _anObject(O);
    result = new Empty();
    Empty[PROTOTYPE$1] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else { result = createDict(); }
  return Properties === undefined ? result : _objectDps(result, Properties);
};

var _wks = createCommonjsModule(function (module) {
var store = _shared('wks');

var Symbol = _global.Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : _uid)('Symbol.' + name));
};

$exports.store = store;
});

var def = _objectDp.f;

var TAG = _wks('toStringTag');

var _setToStringTag = function (it, tag, stat) {
  if (it && !_has(it = stat ? it : it.prototype, TAG)) { def(it, TAG, { configurable: true, value: tag }); }
};

var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
_hide(IteratorPrototype, _wks('iterator'), function () { return this; });

var _iterCreate = function (Constructor, NAME, next) {
  Constructor.prototype = _objectCreate(IteratorPrototype, { next: _propertyDesc(1, next) });
  _setToStringTag(Constructor, NAME + ' Iterator');
};

// 7.1.13 ToObject(argument)

var _toObject = function (it) {
  return Object(_defined(it));
};

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)


var IE_PROTO$2 = _sharedKey('IE_PROTO');
var ObjectProto = Object.prototype;

var _objectGpo = Object.getPrototypeOf || function (O) {
  O = _toObject(O);
  if (_has(O, IE_PROTO$2)) { return O[IE_PROTO$2]; }
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};

var ITERATOR = _wks('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

var _iterDefine = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  _iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) { return proto[kind]; }
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = _objectGpo($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      _setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!_library && !_has(IteratorPrototype, ITERATOR)) { _hide(IteratorPrototype, ITERATOR, returnThis); }
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!_library || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    _hide(proto, ITERATOR, $default);
  }
  // Plug for library
  _iterators[NAME] = $default;
  _iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) { for (key in methods) {
      if (!(key in proto)) { _redefine(proto, key, methods[key]); }
    } } else { _export(_export.P + _export.F * (BUGGY || VALUES_BUG), NAME, methods); }
  }
  return methods;
};

var $at = _stringAt(true);

// 21.1.3.27 String.prototype[@@iterator]()
_iterDefine(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) { return { value: undefined, done: true }; }
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});

// call something on iterator step with safe closing on error

var _iterCall = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(_anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) { _anObject(ret.call(iterator)); }
    throw e;
  }
};

// check on default Array iterator

var ITERATOR$1 = _wks('iterator');
var ArrayProto = Array.prototype;

var _isArrayIter = function (it) {
  return it !== undefined && (_iterators.Array === it || ArrayProto[ITERATOR$1] === it);
};

var _createProperty = function (object, index, value) {
  if (index in object) { _objectDp.f(object, index, _propertyDesc(0, value)); }
  else { object[index] = value; }
};

// getting tag from 19.1.3.6 Object.prototype.toString()

var TAG$1 = _wks('toStringTag');
// ES3 wrong here
var ARG = _cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

var _classof = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG$1)) == 'string' ? T
    // builtinTag case
    : ARG ? _cof(O)
    // ES3 arguments fallback
    : (B = _cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

var ITERATOR$2 = _wks('iterator');

var core_getIteratorMethod = _core.getIteratorMethod = function (it) {
  if (it != undefined) { return it[ITERATOR$2]
    || it['@@iterator']
    || _iterators[_classof(it)]; }
};

var ITERATOR$3 = _wks('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR$3]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  
} catch (e) { /* empty */ }

var _iterDetect = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) { return false; }
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR$3]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR$3] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};

_export(_export.S + _export.F * !_iterDetect(function (iter) {  }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike /*  mapfn = undefined, thisArg = undefined */) {
    var O = _toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = core_getIteratorMethod(O);
    var length, result, step, iterator;
    if (mapping) { mapfn = _ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2); }
    // if object isn't iterable or it's array with default iterator - use simple case
    if (iterFn != undefined && !(C == Array && _isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        _createProperty(result, index, mapping ? _iterCall(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = _toLength(O.length);
      for (result = new C(length); length > index; index++) {
        _createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});

var from = _core.Array.from;

var f$1 = Object.getOwnPropertySymbols;

var _objectGops = {
	f: f$1
};

var f$2 = {}.propertyIsEnumerable;

var _objectPie = {
	f: f$2
};

// 19.1.2.1 Object.assign(target, source, ...)





var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
var _objectAssign = !$assign || _fails(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) {
  var arguments$1 = arguments;
 // eslint-disable-line no-unused-vars
  var T = _toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = _objectGops.f;
  var isEnum = _objectPie.f;
  while (aLen > index) {
    var S = _iobject(arguments$1[index++]);
    var keys = getSymbols ? _objectKeys(S).concat(getSymbols(S)) : _objectKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) { if (isEnum.call(S, key = keys[j++])) { T[key] = S[key]; } }
  } return T;
} : $assign;

// 19.1.3.1 Object.assign(target, source)


_export(_export.S + _export.F, 'Object', { assign: _objectAssign });

var assign = _core.Object.assign;

var gOPD = Object.getOwnPropertyDescriptor;

var f$3 = _descriptors ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = _toIobject(O);
  P = _toPrimitive(P, true);
  if (_ie8DomDefine) { try {
    return gOPD(O, P);
  } catch (e) { /* empty */ } }
  if (_has(O, P)) { return _propertyDesc(!_objectPie.f.call(O, P), O[P]); }
};

var _objectGopd = {
	f: f$3
};

// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */


var check = function (O, proto) {
  _anObject(O);
  if (!_isObject(proto) && proto !== null) { throw TypeError(proto + ": can't set as prototype!"); }
};
var _setProto = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = _ctx(Function.call, _objectGopd.f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) { buggy = true; }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) { O.__proto__ = proto; }
        else { set(O, proto); }
        return O;
      };
    }({}, false) : undefined),
  check: check
};

// 19.1.3.19 Object.setPrototypeOf(O, proto)

_export(_export.S, 'Object', { setPrototypeOf: _setProto.set });

var setPrototypeOf = _core.Object.setPrototypeOf;

// 19.1.3.6 Object.prototype.toString()

var test = {};
test[_wks('toStringTag')] = 'z';
if (test + '' != '[object z]') {
  _redefine(Object.prototype, 'toString', function toString() {
    return '[object ' + _classof(this) + ']';
  }, true);
}

// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = _wks('unscopables');
var ArrayProto$1 = Array.prototype;
if (ArrayProto$1[UNSCOPABLES] == undefined) { _hide(ArrayProto$1, UNSCOPABLES, {}); }
var _addToUnscopables = function (key) {
  ArrayProto$1[UNSCOPABLES][key] = true;
};

var _iterStep = function (done, value) {
  return { value: value, done: !!done };
};

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
var es6_array_iterator = _iterDefine(Array, 'Array', function (iterated, kind) {
  this._t = _toIobject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return _iterStep(1);
  }
  if (kind == 'keys') { return _iterStep(0, index); }
  if (kind == 'values') { return _iterStep(0, O[index]); }
  return _iterStep(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
_iterators.Arguments = _iterators.Array;

_addToUnscopables('keys');
_addToUnscopables('values');
_addToUnscopables('entries');

var ITERATOR$4 = _wks('iterator');
var TO_STRING_TAG = _wks('toStringTag');
var ArrayValues = _iterators.Array;

var DOMIterables = {
  CSSRuleList: true, // TODO: Not spec compliant, should be false.
  CSSStyleDeclaration: false,
  CSSValueList: false,
  ClientRectList: false,
  DOMRectList: false,
  DOMStringList: false,
  DOMTokenList: true,
  DataTransferItemList: false,
  FileList: false,
  HTMLAllCollection: false,
  HTMLCollection: false,
  HTMLFormElement: false,
  HTMLSelectElement: false,
  MediaList: true, // TODO: Not spec compliant, should be false.
  MimeTypeArray: false,
  NamedNodeMap: false,
  NodeList: true,
  PaintRequestList: false,
  Plugin: false,
  PluginArray: false,
  SVGLengthList: false,
  SVGNumberList: false,
  SVGPathSegList: false,
  SVGPointList: false,
  SVGStringList: false,
  SVGTransformList: false,
  SourceBufferList: false,
  StyleSheetList: true, // TODO: Not spec compliant, should be false.
  TextTrackCueList: false,
  TextTrackList: false,
  TouchList: false
};

for (var collections = _objectKeys(DOMIterables), i = 0; i < collections.length; i++) {
  var NAME = collections[i];
  var explicit = DOMIterables[NAME];
  var Collection = _global[NAME];
  var proto = Collection && Collection.prototype;
  var key;
  if (proto) {
    if (!proto[ITERATOR$4]) { _hide(proto, ITERATOR$4, ArrayValues); }
    if (!proto[TO_STRING_TAG]) { _hide(proto, TO_STRING_TAG, NAME); }
    _iterators[NAME] = ArrayValues;
    if (explicit) { for (key in es6_array_iterator) { if (!proto[key]) { _redefine(proto, key, es6_array_iterator[key], true); } } }
  }
}

var _anInstance = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};

var _forOf = createCommonjsModule(function (module) {
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : core_getIteratorMethod(iterable);
  var f = _ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') { throw TypeError(iterable + ' is not iterable!'); }
  // fast case for arrays with default iterator
  if (_isArrayIter(iterFn)) { for (length = _toLength(iterable.length); length > index; index++) {
    result = entries ? f(_anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) { return result; }
  } } else { for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = _iterCall(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) { return result; }
  } }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;
});

// 7.3.20 SpeciesConstructor(O, defaultConstructor)


var SPECIES = _wks('species');
var _speciesConstructor = function (O, D) {
  var C = _anObject(O).constructor;
  var S;
  return C === undefined || (S = _anObject(C)[SPECIES]) == undefined ? D : _aFunction(S);
};

// fast apply, http://jsperf.lnkit.com/fast-apply/5
var _invoke = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};

var process$1 = _global.process;
var setTask = _global.setImmediate;
var clearTask = _global.clearImmediate;
var MessageChannel = _global.MessageChannel;
var Dispatch = _global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer;
var channel;
var port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var arguments$1 = arguments;

    var args = [];
    var i = 1;
    while (arguments.length > i) { args.push(arguments$1[i++]); }
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      _invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (_cof(process$1) == 'process') {
    defer = function (id) {
      process$1.nextTick(_ctx(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(_ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = _ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (_global.addEventListener && typeof postMessage == 'function' && !_global.importScripts) {
    defer = function (id) {
      _global.postMessage(id + '', '*');
    };
    _global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in _domCreate('script')) {
    defer = function (id) {
      _html.appendChild(_domCreate('script'))[ONREADYSTATECHANGE] = function () {
        _html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(_ctx(run, id, 1), 0);
    };
  }
}
var _task = {
  set: setTask,
  clear: clearTask
};

var macrotask = _task.set;
var Observer = _global.MutationObserver || _global.WebKitMutationObserver;
var process$2 = _global.process;
var Promise = _global.Promise;
var isNode$1 = _cof(process$2) == 'process';

var _microtask = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode$1 && (parent = process$2.domain)) { parent.exit(); }
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) { notify(); }
        else { last = undefined; }
        throw e;
      }
    } last = undefined;
    if (parent) { parent.enter(); }
  };

  // Node.js
  if (isNode$1) {
    notify = function () {
      process$2.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (Observer && !(_global.navigator && _global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    var promise = Promise.resolve();
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(_global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) { last.next = task; }
    if (!head) {
      head = task;
      notify();
    } last = task;
  };
};

// 25.4.1.5 NewPromiseCapability(C)


function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) { throw TypeError('Bad Promise constructor'); }
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = _aFunction(resolve);
  this.reject = _aFunction(reject);
}

var f$4 = function (C) {
  return new PromiseCapability(C);
};

var _newPromiseCapability = {
	f: f$4
};

var _perform = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};

var _promiseResolve = function (C, x) {
  _anObject(C);
  if (_isObject(x) && x.constructor === C) { return x; }
  var promiseCapability = _newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};

var _redefineAll = function (target, src, safe) {
  for (var key in src) { _redefine(target, key, src[key], safe); }
  return target;
};

var SPECIES$1 = _wks('species');

var _setSpecies = function (KEY) {
  var C = _global[KEY];
  if (_descriptors && C && !C[SPECIES$1]) { _objectDp.f(C, SPECIES$1, {
    configurable: true,
    get: function () { return this; }
  }); }
};

var task = _task.set;
var microtask = _microtask();



var PROMISE = 'Promise';
var TypeError$1 = _global.TypeError;
var process = _global.process;
var $Promise = _global[PROMISE];
var isNode = _classof(process) == 'process';
var empty = function () { /* empty */ };
var Internal;
var newGenericPromiseCapability;
var OwnPromiseCapability;
var Wrapper;
var newPromiseCapability = newGenericPromiseCapability = _newPromiseCapability.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[_wks('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
  } catch (e) { /* empty */ }
}();

// helpers
var isThenable = function (it) {
  var then;
  return _isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) { return; }
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) { onHandleUnhandled(promise); }
            promise._h = 1;
          }
          if (handler === true) { result = value; }
          else {
            if (domain) { domain.enter(); }
            result = handler(value);
            if (domain) { domain.exit(); }
          }
          if (result === reaction.promise) {
            reject(TypeError$1('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else { resolve(result); }
        } else { reject(value); }
      } catch (e) {
        reject(e);
      }
    };
    while (chain.length > i) { run(chain[i++]); } // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) { onUnhandled(promise); }
  });
};
var onUnhandled = function (promise) {
  task.call(_global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = _perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = _global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = _global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if (unhandled && result.e) { throw result.v; }
  });
};
var isUnhandled = function (promise) {
  if (promise._h == 1) { return false; }
  var chain = promise._a || promise._c;
  var i = 0;
  var reaction;
  while (chain.length > i) {
    reaction = chain[i++];
    if (reaction.fail || !isUnhandled(reaction.promise)) { return false; }
  } return true;
};
var onHandleUnhandled = function (promise) {
  task.call(_global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = _global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) { return; }
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) { promise._a = promise._c.slice(); }
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) { return; }
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) { throw TypeError$1("Promise can't be resolved itself"); }
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, _ctx($resolve, wrapper, 1), _ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    _anInstance(this, $Promise, PROMISE, '_h');
    _aFunction(executor);
    Internal.call(this);
    try {
      executor(_ctx($resolve, this, 1), _ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = _redefineAll($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(_speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) { this._a.push(reaction); }
      if (this._s) { notify(this, false); }
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = _ctx($resolve, promise, 1);
    this.reject = _ctx($reject, promise, 1);
  };
  _newPromiseCapability.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

_export(_export.G + _export.W + _export.F * !USE_NATIVE, { Promise: $Promise });
_setToStringTag($Promise, PROMISE);
_setSpecies(PROMISE);
Wrapper = _core[PROMISE];

// statics
_export(_export.S + _export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
_export(_export.S + _export.F * (_library || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return _promiseResolve(_library && this === Wrapper ? $Promise : this, x);
  }
});
_export(_export.S + _export.F * !(USE_NATIVE && _iterDetect(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = _perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      _forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) { return; }
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) { reject(result.v); }
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = _perform(function () {
      _forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) { reject(result.v); }
    return capability.promise;
  }
});

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/* eslint-disable */

var isInitialized = false;

// major events supported:
//   panstart
//   panmove
//   panend
//   swipe
//   longpress
// extra events supported:
//   dualtouchstart
//   dualtouch
//   dualtouchend
//   tap
//   doubletap
//   pressend

var doc = window.document;
var docEl = doc.documentElement;
var slice = Array.prototype.slice;
var gestures = {};
var lastTap = null;

/**
 * find the closest common ancestor
 * if there's no one, return null
 *
 * @param  {Element} el1 first element
 * @param  {Element} el2 second element
 * @return {Element}     common ancestor
 */
function getCommonAncestor(el1, el2) {
  var el = el1;
  while (el) {
    if (el.contains(el2) || el == el2) {
      return el
    }
    el = el.parentNode;
  }
  return null
}

/**
 * fire a HTMLEvent
 *
 * @param  {Element} element which element to fire a event on
 * @param  {string}  type    type of event
 * @param  {object}  extra   extra data for the event object
 */
function fireEvent(element, type, extra) {
  var event = doc.createEvent('HTMLEvents');
  event.initEvent(type, true, true);

  if (typeof extra === 'object') {
    for (var p in extra) {
      event[p] = extra[p];
    }
  }

  /**
   * A flag to distinguish with other events with the same name generated
   * by another library in the same page.
   */ 
  event._for = 'weex';

  element.dispatchEvent(event);
}

/**
 * calc the transform
 * assume 4 points ABCD on the coordinate system
 * > rotate：angle rotating from AB to CD
 * > scale：scale ratio from AB to CD
 * > translate：translate shift from A to C
 *
 * @param  {number} x1 abscissa of A
 * @param  {number} y1 ordinate of A
 * @param  {number} x2 abscissa of B
 * @param  {number} y2 ordinate of B
 * @param  {number} x3 abscissa of C
 * @param  {number} y3 ordinate of C
 * @param  {number} x4 abscissa of D
 * @param  {number} y4 ordinate of D
 * @return {object}    transform object like
 *   {rotate, scale, translate[2], matrix[3][3]}
 */
function calc(x1, y1, x2, y2, x3, y3, x4, y4) {
  var rotate = Math.atan2(y4 - y3, x4 - x3) - Math.atan2(y2 - y1, x2 - x1);
  var scale = Math.sqrt((Math.pow(y4 - y3, 2)
    + Math.pow(x4 - x3, 2)) / (Math.pow(y2 - y1, 2)
    + Math.pow(x2 - x1, 2)));
  var translate = [
    x3
    - scale * x1 * Math.cos(rotate)
    + scale * y1 * Math.sin(rotate),
    y3
    - scale * y1 * Math.cos(rotate)
    - scale * x1 * Math.sin(rotate)];

  return {
    rotate: rotate,
    scale: scale,
    translate: translate,
    matrix: [
      [scale * Math.cos(rotate), -scale * Math.sin(rotate), translate[0]],
      [scale * Math.sin(rotate), scale * Math.cos(rotate), translate[1]],
      [0, 0, 1]
    ]
  }
}

/**
 * take over the touchstart events. Add new touches to the gestures.
 * If there is no previous records, then bind touchmove, tochend
 * and touchcancel events.
 * new touches initialized with state 'tapping', and within 500 milliseconds
 * if the state is still tapping, then trigger gesture 'press'.
 * If there are two touche points, then the 'dualtouchstart' is triggerd. The
 * node of the touch gesture is their cloest common ancestor.
 *
 * @event
 * @param  {event} event
 */
function touchstartHandler(event) {

  if (Object.keys(gestures).length === 0) {
    docEl.addEventListener('touchmove', touchmoveHandler, true);
    docEl.addEventListener('touchend', touchendHandler, true);
    docEl.addEventListener('touchcancel', touchcancelHandler, true);
  }

  // record every touch
  for (var i = 0; i < event.changedTouches.length; i++) {
    var touch = event.changedTouches[i];
    var touchRecord = {};

    for (var p in touch) {
      touchRecord[p] = touch[p];
    }

    var gesture = {
      startTouch: touchRecord,
      startTime: Date.now(),
      status: 'tapping',
      element: event.srcElement || event.target,
      pressingHandler: setTimeout(function (element, touch) {
        return function () {
          if (gesture.status === 'tapping') {
            gesture.status = 'pressing';

            fireEvent(element, 'longpress', {
              // add touch data for weex
              touch: touch,
              touches: event.touches,
              changedTouches: event.changedTouches,
              touchEvent: event
            });
          }

          clearTimeout(gesture.pressingHandler);
          gesture.pressingHandler = null;
        }
      }(event.srcElement || event.target, event.changedTouches[i]), 500)
    };
    gestures[touch.identifier] = gesture;
  }

  if (Object.keys(gestures).length == 2) {
    var elements = [];

    for (var p in gestures) {
      elements.push(gestures[p].element);
    }

    fireEvent(getCommonAncestor(elements[0], elements[1]), 'dualtouchstart', {
      touches: slice.call(event.touches),
      touchEvent: event
    });
  }
}

/**
 * take over touchmove events, and handle pan and dual related gestures.
 *
 * 1. traverse every touch point：
 * > if 'tapping' and the shift is over 10 pixles, then it's a 'panning'.
 * 2. if there are two touch points, then calc the tranform and trigger
 *   'dualtouch'.
 *
 * @event
 * @param  {event} event
 */
function touchmoveHandler(event) {
  for (var i = 0; i < event.changedTouches.length; i++) {
    var touch = event.changedTouches[i];
    var gesture = gestures[touch.identifier];

    if (!gesture) {
      return
    }

    if (!gesture.lastTouch) {
      gesture.lastTouch = gesture.startTouch;
    }
    if (!gesture.lastTime) {
      gesture.lastTime = gesture.startTime;
    }
    if (!gesture.velocityX) {
      gesture.velocityX = 0;
    }
    if (!gesture.velocityY) {
      gesture.velocityY = 0;
    }
    if (!gesture.duration) {
      gesture.duration = 0;
    }

    var time =  Date.now() - gesture.lastTime;
    var vx = (touch.clientX - gesture.lastTouch.clientX) / time;
    var vy = (touch.clientY - gesture.lastTouch.clientY) / time;

    var RECORD_DURATION = 70;
    if (time > RECORD_DURATION) {
      time = RECORD_DURATION;
    }
    if (gesture.duration + time > RECORD_DURATION) {
      gesture.duration = RECORD_DURATION - time;
    }

    gesture.velocityX = (gesture.velocityX * gesture.duration + vx * time)
      / (gesture.duration + time);
    gesture.velocityY = (gesture.velocityY * gesture.duration + vy * time)
      / (gesture.duration + time);
    gesture.duration += time;

    gesture.lastTouch = {};

    for (var p in touch) {
      gesture.lastTouch[p] = touch[p];
    }
    gesture.lastTime = Date.now();

    var displacementX = touch.clientX - gesture.startTouch.clientX;
    var displacementY = touch.clientY - gesture.startTouch.clientY;
    var distance = Math.sqrt(Math.pow(displacementX, 2)
      + Math.pow(displacementY, 2));
    var isVertical = !(Math.abs(displacementX) > Math.abs(displacementY));
    var direction = isVertical
      ? displacementY >= 0 ? 'down' : 'up'
      : displacementX >= 0 ? 'right' : 'left';

    // magic number 10: moving 10px means pan, not tap
    if ((gesture.status === 'tapping' || gesture.status === 'pressing')
        && distance > 10) {
      gesture.status = 'panning';
      gesture.isVertical = isVertical;
      gesture.direction = direction;

      fireEvent(gesture.element, 'panstart', {
        touch: touch,
        touches: event.touches,
        changedTouches: event.changedTouches,
        touchEvent: event,
        isVertical: gesture.isVertical,
        direction: direction
      });
    }

    if (gesture.status === 'panning') {
      gesture.panTime = Date.now();

      fireEvent(gesture.element, 'panmove', {
        displacementX: displacementX,
        displacementY: displacementY,
        touch: touch,
        touches: event.touches,
        changedTouches: event.changedTouches,
        touchEvent: event,
        isVertical: gesture.isVertical,
        direction: direction
      });
    }
  }

  if (Object.keys(gestures).length == 2) {
    var position = [];
    var current = [];
    var elements = [];
    var transform;

    for (var i = 0; i < event.touches.length; i++) {
      var touch = event.touches[i];
      var gesture = gestures[touch.identifier];
      position.push([gesture.startTouch.clientX, gesture.startTouch.clientY]);
      current.push([touch.clientX, touch.clientY]);
    }

    for (var p in gestures) {
      elements.push(gestures[p].element);
    }

    transform = calc(
      position[0][0],
      position[0][1],
      position[1][0],
      position[1][1],
      current[0][0],
      current[0][1],
      current[1][0],
      current[1][1]
    );
    fireEvent(getCommonAncestor(elements[0], elements[1]), 'dualtouch', {
      transform: transform,
      touches: event.touches,
      touchEvent: event
    });
  }
}

/**
 * handle touchend event
 *
 * 1. if there are tow touch points, then trigger 'dualtouchend'如
 *
 * 2. traverse every touch piont：
 * > if tapping, then trigger 'tap'.
 * If there is a tap 300 milliseconds before, then it's a 'doubletap'.
 * > if padding, then decide to trigger 'panend' or 'swipe'
 * > if pressing, then trigger 'pressend'.
 *
 * 3. remove listeners.
 *
 * @event
 * @param  {event} event
 */
function touchendHandler(event) {

  if (Object.keys(gestures).length == 2) {
    var elements = [];
    for (var p in gestures) {
      elements.push(gestures[p].element);
    }
    fireEvent(getCommonAncestor(elements[0], elements[1]), 'dualtouchend', {
      touches: slice.call(event.touches),
      touchEvent: event
    });
  }

  for (var i = 0; i < event.changedTouches.length; i++) {
    var touch = event.changedTouches[i];
    var id = touch.identifier;
    var gesture = gestures[id];

    if (!gesture) {
      continue
    }

    if (gesture.pressingHandler) {
      clearTimeout(gesture.pressingHandler);
      gesture.pressingHandler = null;
    }

    if (gesture.status === 'tapping') {
      gesture.timestamp = Date.now();
      // fire click, not tap.
      fireEvent(gesture.element, 'weex$tap', {
        touch: touch,
        touchEvent: event
      });

      if (lastTap && gesture.timestamp - lastTap.timestamp < 300) {
        fireEvent(gesture.element, 'doubletap', {
          touch: touch,
          touchEvent: event
        });
      }

      lastTap = gesture;
    }

    if (gesture.status === 'panning') {
      var now = Date.now();
      var duration = now - gesture.startTime;
      var displacementX = touch.clientX - gesture.startTouch.clientX;
      var displacementY = touch.clientY - gesture.startTouch.clientY;

      var velocity = Math.sqrt(gesture.velocityY * gesture.velocityY
        + gesture.velocityX * gesture.velocityX);
      var isSwipe = velocity > 0.5 && (now - gesture.lastTime) < 100;
      var extra = {
        duration: duration,
        isSwipe: isSwipe,
        velocityX: gesture.velocityX,
        velocityY: gesture.velocityY,
        displacementX: displacementX,
        displacementY: displacementY,
        touch: touch,
        touches: event.touches,
        changedTouches: event.changedTouches,
        touchEvent: event,
        isVertical: gesture.isVertical,
        direction: gesture.direction
      };

      fireEvent(gesture.element, 'panend', extra);
      if (isSwipe) {
        fireEvent(gesture.element, 'swipe', extra);
      }
    }

    if (gesture.status === 'pressing') {
      fireEvent(gesture.element, 'pressend', {
        touch: touch,
        touchEvent: event
      });
    }

    delete gestures[id];
  }

  if (Object.keys(gestures).length === 0) {
    docEl.removeEventListener('touchmove', touchmoveHandler, false);
    docEl.removeEventListener('touchend', touchendHandler, false);
    docEl.removeEventListener('touchcancel', touchcancelHandler, false);
  }
}

/**
 * handle touchcancel
 *
 * 1. if there are two touch points, then trigger 'dualtouchend'
 *
 * 2. traverse everty touch point:
 * > if pannnig, then trigger 'panend'
 * > if pressing, then trigger 'pressend'
 *
 * 3. remove listeners
 *
 * @event
 * @param  {event} event
 */
function touchcancelHandler(event) {

  if (Object.keys(gestures).length == 2) {
    var elements = [];
    for (var p in gestures) {
      elements.push(gestures[p].element);
    }
    fireEvent(getCommonAncestor(elements[0], elements[1]), 'dualtouchend', {
      touches: slice.call(event.touches),
      touchEvent: event
    });
  }

  for (var i = 0; i < event.changedTouches.length; i++) {
    var touch = event.changedTouches[i];
    var id = touch.identifier;
    var gesture = gestures[id];

    if (!gesture) {
      continue
    }

    if (gesture.pressingHandler) {
      clearTimeout(gesture.pressingHandler);
      gesture.pressingHandler = null;
    }

    if (gesture.status === 'panning') {
      fireEvent(gesture.element, 'panend', {
        touch: touch,
        touches: event.touches,
        changedTouches: event.changedTouches,
        touchEvent: event
      });
    }
    if (gesture.status === 'pressing') {
      fireEvent(gesture.element, 'pressend', {
        touch: touch,
        touchEvent: event
      });
    }
    delete gestures[id];
  }

  if (Object.keys(gestures).length === 0) {
    docEl.removeEventListener('touchmove', touchmoveHandler, true);
    docEl.removeEventListener('touchend', touchendHandler, true);
    docEl.removeEventListener('touchcancel', touchcancelHandler, true);
  }
}

if (!isInitialized) {
  docEl.addEventListener('touchstart', touchstartHandler, true);
  isInitialized = true;
}

var lib$2 = window.lib || (window.lib = {});

/**
 * Version class.
 * @class lib.env~Version
 * @param {String} v - version number.
 */
function Version (v) {
  Object.defineProperty(this, 'val', {
    value: v.toString(),
    enumerable: true
  });

  /**
   * larger than
   * @method gt
   * @param {String} v - version
   * @return {Boolean} result
   * @instance
   * @memberof Version
   */
  this.gt = function (v) {
    return Version.compare(this, v) > 0
  };

  /**
   * larger than or equal to.
   * @method gte
   * @param {String} v - version
   * @return {Boolean} result
   * @instance
   * @memberof Version
   */
  this.gte = function (v) {
    return Version.compare(this, v) >= 0
  };

  /**
   * less than.
   * @method lt
   * @param {String} v - version
   * @return {Boolean} result
   * @instance
   * @memberof Version
   */
  this.lt = function (v) {
    return Version.compare(this, v) < 0
  };

  /**
   * less than or equal to.
   * @method lte
   * @param {String} v - version
   * @return {Boolean} result
   * @instance
   * @memberof Version
   */
  this.lte = function (v) {
    return Version.compare(this, v) <= 0
  };

  /**
   * equal to.
   * @method eq
   * @param {String} v - version
   * @return {Boolean} equal to
   * @instance
   * @memberof Version
   */
  this.eq = function (v) {
    return Version.compare(this, v) === 0
  };
}

/**
 * version number string.
 * @method toString
 * @return {String} current version number string.
 * @instance
 * @memberof Version
 */
Version.prototype.toString = function () {
  return this.val
};

/**
 * return current version number.
 * @method valueOf
 * @return {Boolean} version number
 * @instance
 * @memberof Version
 */
Version.prototype.valueOf = function () {
  var v = this.val.split('.');
  var r = [];
  for (var i = 0; i < v.length; i++) {
    var n = parseInt(v[i], 10);
    if (isNaN(n)) {
      n = 0;
    }
    var s = n.toString();
    if (s.length < 5) {
      s = Array(6 - s.length).join('0') + s;
    }
    r.push(s);
    if (r.length === 1) {
      r.push('.');
    }
  }
  return parseFloat(r.join(''))
};

/**
 * compare two versions.
 * @method compare
 * @param {String} v1 - version1
 * @param {String} v2 - version2
 * @return {Number} 0 for equality，-1 for less than，1 for larger than.
 * @memberof Version
 */
Version.compare = function (v1, v2) {
  v1 = v1.toString().split('.');
  v2 = v2.toString().split('.');
  for (var i = 0; i < v1.length || i < v2.length; i++) {
    var n1 = parseInt(v1[i], 10);
    var n2 = parseInt(v2[i], 10);
    if (window.isNaN(n1)) {
      n1 = 0;
    }
    if (window.isNaN(n2)) {
      n2 = 0;
    }
    if (n1 < n2) {
      return -1
    }
    else if (n1 > n2) {
      return 1
    }
  }
  return 0
};

/**
 * 解析和操作版本号
 * @method version
 * @param {string} v - 需要解析的版本号
 * @return {lib.env~Version} Verson实例
 * @memberof lib
 */
lib$2.version = function (v) {
  return new Version(v)
};

var lib$3 = window.lib || (window.lib = {});
var env$1 = lib$3.env || (lib$3.env = {});

var search = window.location.search.replace(/^\?/, '');
env$1.params = {};
if (search) {
  var params = search.split('&');
  for (var i$1 = 0; i$1 < params.length; i$1++) {
    params[i$1] = params[i$1].split('=');
    try {
      env$1.params[params[i$1][0]] = decodeURIComponent(params[i$1][1]);
    }
    catch (e) {
      env$1.params[params[i$1][0]] = params[i$1][1];
    }
  }
}

var lib$1 = window.lib || (window.lib = {});
var env = lib$1.env || (lib$1.env = {});

var ua = window.navigator.userAgent;
var match;

/**
 * os
 */

match = ua.match(/Windows\sPhone\s(?:OS\s)?([\d.]+)/);
if (match) {
  /**
   * @type {Object}
   * @memberof lib.env
   * @property {String} name - os name, e.g. Android/AndroidPad/iPhone/iPod/iPad/Windows Phone/unknown, etc.
   * @property {lib.env~Version} version - os version.
   * @property {Boolean} isWindowsPhone
   * @property {Boolean} isIPhone - is iPhone/iTouch
   * @property {Boolean} isIPad
   * @property {Boolean} isIOS
   * @property {Boolean} isAndroid
   * @property {Boolean} isAndroidPad
   */
  env.os = {
    name: 'Windows Phone',
    isWindowsPhone: true,
    version: match[1]
  };
}
else if (!!ua.match(/Safari/) && (match = ua.match(/Android[\s/]([\d.]+)/))) {
  env.os = {
    version: match[1]
  };

  if ((ua.match(/Mobile\s+Safari/))) {
    env.os.name = 'Android';
    env.os.isAndroid = true;
  }
  else {
    env.os.name = 'AndroidPad';
    env.os.isAndroidPad = true;
  }
}
else if ((match = ua.match(/(iPhone|iPad|iPod)/))) {
  var name = match[1];

  match = ua.match(/OS ([\d_.]+) like Mac OS X/);

  env.os = {
    name: name,
    isIPhone: (name === 'iPhone' || name === 'iPod'),
    isIPad: name === 'iPad',
    isIOS: true,
    version: match && match[1].split('_').join('.') || ''
  };
}
else {
  env.os = {
    name: 'unknown',
    version: '0.0.0'
  };
}

if (lib$1.version) {
  env.os.version = lib$1.version(env.os.version);
}

/**
 * browser
 */

match = ua.match(/(?:UCWEB|UCBrowser\/)([\d.]+)/);

if (match) {
  /**
   * @type {Object}
   * @memberof env
   * @property {String} name - browser name，e.g. UC/QQ/Firefox/Chrome/Android/Safari/iOS Webview/Chrome Webview/IE/IEMobile/unknown, etc.
   * @property {env~Version} version - browser version.
   * @property {Boolean} isUC
   * @property {Boolean} isQQ
   * @property {Boolean} isIE
   * @property {Boolean} isIEMobile
   * @property {Boolean} isIELikeWebkit
   * @property {Boolean} isChrome
   * @property {Boolean} isAndroid
   * @property {Boolean} isSafari
   * @property {Boolean} isWebview
   */
  env.browser = {
    name: 'UC',
    isUC: true,
    version: match[1]
  };
}
else if ((match = ua.match(/MQQBrowser\/([\d.]+)/))) {
  env.browser = {
    name: 'QQ',
    isQQ: true,
    version: match[1]
  };
}
else if ((match = ua.match(/Firefox\/([\d.]+)/))) {
  env.browser = {
    name: 'Firefox',
    isFirefox: true,
    version: match[1]
  };
}
else if ((match = ua.match(/MSIE\s([\d.]+)/))
  || (match = ua.match(/IEMobile\/([\d.]+)/))) {
  env.browser = {
    version: match[1]
  };

  if (ua.match(/IEMobile/)) {
    env.browser.name = 'IEMobile';
    env.browser.isIEMobile = true;
  }
  else {
    env.browser.name = 'IE';
    env.browser.isIE = true;
  }

  if (ua.match(/Android|iPhone/)) {
    env.browser.isIELikeWebkit = true;
  }
}
else if ((match = ua.match(/(?:Chrome|CriOS)\/([\d.]+)/))) {
  env.browser = {
    name: 'Chrome',
    isChrome: true,
    version: match[1]
  };

  if (ua.match(/Version\/[\d+.]+\s*Chrome/)) {
    env.browser.name = 'Chrome Webview';
    env.browser.isWebview = true;
  }
}
else if (!!ua.match(/Safari/) && (match = ua.match(/Android[\s/]([\d.]+)/))) {
  env.browser = {
    name: 'Android',
    isAndroid: true,
    version: match[1]
  };
}
else if (ua.match(/iPhone|iPad|iPod/)) {
  if (ua.match(/Safari/)) {
    match = ua.match(/Version\/([\d.]+)/);
    env.browser = {
      name: 'Safari',
      isSafari: true,
      version: match && match[1] || ''
    };
  }
  else {
    match = ua.match(/OS ([\d_.]+) like Mac OS X/);
    env.browser = {
      name: 'iOS Webview',
      isWebview: true,
      version: match && match[1].replace(/_/g, '.') || ''
    };
  }
}
else {
  env.browser = {
    name: 'unknown',
    version: '0.0.0'
  };
}

if (lib$1.version) {
  env.browser.version = lib$1.version(env.browser.version);
}

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

var toString$1 = Object.prototype.toString;

/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 *
 * @param {*} obj
 * @return {Boolean}
 */
var OBJECT_STRING = '[object Object]';
function isPlainObject (obj) {
  return toString$1.call(obj) === OBJECT_STRING
}

var ARRAY_STRING = '[object Array]';
function isArray (arr) {
  return toString$1.call(arr) === ARRAY_STRING
}

function isPrimitive (val) {
  return typeof value === 'string'
    || typeof value === 'number'
    || typeof value === 'symbol'
    || typeof value === 'boolean'
}

function isDef (val) {
  return val !== undefined && val !== null
}

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * Mix properties into target object.
 * the rightest object's value has the highest priority.
 */
function extend (to) {
  var args = [], len = arguments.length - 1;
  while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

  if (!args || args.length <= 0) {
    return to
  }
  args.forEach(function (from) {
    if (typeof from !== 'object') {
      return
    }
    for (var key in from) {
      to[key] = from[key];
    }
  });
  return to
}
/**
 * Mix truthy or '' property values into target object.
 * mostly for merging styles. (that's why '' is falsy but still should be counted in.)
 * the rightest object's value has the highest priority.
 */
function extendTruthy (to) {
  var args = [], len = arguments.length - 1;
  while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

  if (!args || args.length <= 0) {
    return to
  }
  args.forEach(function (from) {
    if (typeof from !== 'object') {
      return
    }
    var i;
    for (var key in from) {
      if (((i = from[key]) || i === '' || i === 0) && i !== 'undefined') {
        to[key] = i;
      }
    }
  });
  return to
}
/**
 * Mix specified properties into target object.
 */
function extendKeys (to, from, keys) {
  if ( from === void 0 ) from = {};

  (keys || []).forEach(function (key) {
    from && (to[key] = from[key]);
  });
  return to
}
/**
 * Extract specified properties from src to target object.
 */
function extractKeys (to, from, keys) {
  if ( from === void 0 ) from = {};

  if (!from) {
    return to
  }
  (keys || []).forEach(function (key) {
    from && (to[key] = from[key]);
    from && (delete from[key]);
  });
  return to
}
/**
 * Simple bind, faster than native
 *
 * @param {Function} fn
 * @param {Object} ctx
 * @return {Function}
 */
function bind (fn, ctx) {
  return function (a) {
    var l = arguments.length;
    return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx)
  }
}
/**
 * Only call the func the last time before it's not that frequently called.
 */
function debounce (func, wait) {
  var timerId;
  return function () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    clearTimeout(timerId);
    timerId = setTimeout(function later () {
      timerId = null;
      func.apply(null, args);
    }, wait);
  }
}
/**
 * Only call the func the first time before a series frequently function calls happen.
 */
function depress (func, wait) {
  var timerId;

  function later () {
    timerId = null;
  }
  return function () {
    if (!timerId) {
      func.apply();
    }
    clearTimeout(timerId);
    timerId = setTimeout(later, wait);
  }
}
/**
 * Only call the func every time after a wait milliseconds if it's too frequently called.
 */
function throttle (func, wait, callLastTime) {
  var last = 0;
  var lastTimer = null;
  var lastTimeDuration = wait + (wait > 25 ? wait : 25); // plus half wait time.
  return function () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    var context = this;
    var time = new Date().getTime();
    if (time - last > wait) {
      if (callLastTime) {
        lastTimer && clearTimeout(lastTimer);
        lastTimer = setTimeout(function () {
          lastTimer = null;
          func.apply(context, args);
        }, lastTimeDuration);
      }
      func.apply(context, args);
      last = time;
    }
  }
}
// direction: 'l' | 'r', default is 'r'
// num: how many times to loop, should be a positive integer
function loopArray (arr, num, direction) {
  if (!isArray(arr)) {
    return
  }
  var isLeft = (direction + '').toLowerCase() === 'l';
  var len = arr.length;
  num = num % len;
  if (num < 0) {
    num = -num;
    isLeft = !isLeft;
  }
  if (num === 0) {
    return arr
  }
  var lp, rp;
  if (isLeft) {
    lp = arr.slice(0, num);
    rp = arr.slice(num);
  }
  else {
    lp = arr.slice(0, len - num);
    rp = arr.slice(len - num);
  }
  return rp.concat(lp)
}

/**
 * Create a cached version of a pure function.
 */
function cached (fn) {
  var cache = Object.create(null);
  return function cachedFn (str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str))
  }
}
/**
 * Camelize a hyphen-delmited string.
 */
var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) { return c.toUpperCase(); })
});
function camelizeKeys (obj) {
  var res = {};
  for (var key in obj) {
    res[camelize(key)] = obj[key];
  }
  return res
}
/**
 * Capitalize a string.
 */
var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1)
});
/**
 * Hyphenate a camelCase string.
 */
var hyphenateRE = /([^-])([A-Z])/g;
var hyphenate = cached(function (str) {
  return str.replace(hyphenateRE, '$1-$2').replace(hyphenateRE, '$1-$2').toLowerCase()
});
function hyphenateKeys (obj) {
  var res = {};
  for (var key in obj) {
    res[hyphenate(key)] = obj[key];
  }
  return res
}
var vendorsReg = /webkit-|moz-|o-|ms-/;
function hyphenateStyleKeys (obj) {
  var res = {};
  for (var key in obj) {
    var hk = hyphenate(key).replace(vendorsReg, function ($0) {
      return '-' + $0
    });
    res[hk] = obj[key];
  }
  return res
}
function camelToKebab (name) {
  if (!name) {
    return ''
  }
  return name.replace(/([A-Z])/g, function (g, g1) {
    return ("-" + (g1.toLowerCase()))
  })
}
function appendCss (css, cssId, replace) {
  var style = document.getElementById(cssId);
  if (style && replace) {
    style.parentNode.removeChild(style);
    style = null;
  }
  if (!style) {
    style = document.createElement('style');
    style.type = 'text/css';
    cssId && (style.id = cssId);
    document.getElementsByTagName('head')[0].appendChild(style);
  }
  style.appendChild(document.createTextNode(css));
}
function nextFrame (callback) {
  var runner = window.requestAnimationFrame
    || window.webkitRequestAnimationFrame
    || window.mozRequestAnimationFrame
    || (function (cb) { return setTimeout(cb, 16); });
  runner(callback);
}
function toCSSText (object) {
  if (!object) {
    return
  }
  var obj = hyphenateStyleKeys(object);
  var cssText = '';
  for (var key in obj) {
    cssText += key + ":" + (obj[key]) + ";";
  }
  return cssText
}

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * viewport priority:
 *
 * 1. meta weex-viewport (developer custom)
 * 2. setViewport(config) := config.width (private code) @deprecated
 * 3. 750 (buid time)
 *
 */
var isInited = false;
var DEFAULT_VIEWPORT_WIDTH = 750;

/**
 * get viewport width from weex-viewport meta.
 */
var envViewportWidth = parseInt(750);
var width = !isNaN(envViewportWidth) && envViewportWidth > 0
  ? envViewportWidth
  : DEFAULT_VIEWPORT_WIDTH;

var wxViewportMeta = document.querySelector('meta[name="weex-viewport"]');
var metaWidth = wxViewportMeta && parseInt(wxViewportMeta.getAttribute('content'));
if (metaWidth && !isNaN(metaWidth) && metaWidth > 0) {
  width = metaWidth;
}

var dpr = 0;
var screenWidth = 0;
var screenHeight = 0;

var info = {
  dpr: dpr,
  scale: 0,
  rootValue: 0,
  rem: 0,
  deviceWidth: 0,
  deviceHeight: 0
};

/**
 * set root font-size for rem units. If already been set, just skip this.
 */
function setRootFont (width, viewportWidth, force) {
  var doc = window.document;
  var rem = width * 750 / viewportWidth / 10;
  if (!doc.documentElement) { return }
  var rootFontSize = doc.documentElement.style.fontSize;
  if (!rootFontSize || force) {
    doc.documentElement.style.fontSize = rem + 'px';
  }
  info.rem = rem;
  info.rootValue = viewportWidth / 10;
}

function setMetaViewport (width) {
  if (!wxViewportMeta) {
    wxViewportMeta = document.createElement('meta');
    wxViewportMeta.setAttribute('name', 'weex-viewport');
    var firstMeta = document.querySelector('meta');
    var head = firstMeta && firstMeta.parentElement
      || document.documentElement.children[0];
    firstMeta
      ? head.insertBefore(wxViewportMeta, firstMeta)
      : head.appendChild(wxViewportMeta);
  }
  else {
    var metaWidth = parseInt(wxViewportMeta.getAttribute('content'));
    if (metaWidth === width) {
      return
    }
  }
  wxViewportMeta.setAttribute('content', width + '');
}

/**
 * export viewport info.
 */
function init$1 (viewportWidth) {
  if ( viewportWidth === void 0 ) viewportWidth = width;

  if (!isInited) {
    isInited = true;

    var doc = window.document;
    if (!doc) {
      console.error('[vue-render] window.document is undfined.');
      return
    }
    if (!doc.documentElement) {
      console.error('[vue-render] document.documentElement is undfined.');
      return
    }

    dpr = info.dpr = window.devicePixelRatio;
    screenWidth = doc.documentElement.clientWidth;
    screenHeight = doc.documentElement.clientHeight;

    var resetDeviceHeight = function () {
      screenHeight = doc.documentElement.clientHeight;
      var env = window.weex && window.weex.config.env;
      info.deviceHeight = env.deviceHeight = screenHeight * dpr;
    };

    // set root font for rem.
    setRootFont(screenWidth, viewportWidth);
    setMetaViewport(viewportWidth);

    window.addEventListener('resize', resetDeviceHeight);

    /**
     * why not to use window.screen.width to get screenWidth ? Because in some
     * old webkit browser on android system it get the device pixel width, which
     * is the screenWidth multiply by the device pixel ratio.
     * e.g. ip6 -> get 375 for virtual screen width.
     */
    var scale = screenWidth / viewportWidth;
    /**
     * 1. if set initial/maximum/mimimum-scale some how the page will have a bounce
     * effect when user drag the page towards horizontal axis.
     * 2. Due to compatibility reasons, not to use viewport meta anymore.
     * 3. viewport meta should always be:
     *    <meta name="viewport"
     *      content="width=device-width,
     *      initial-scale=1,
     *      maximum-scale=1,
     *      user-scalable=no" />
     */
    extend(info, {
      scale: scale,
      rootValue: viewportWidth / 10,
      deviceWidth: screenWidth * dpr,
      deviceHeight: screenHeight * dpr
    });
  }

  return info
}

/**
 * reset viewport width and scale.
 * @return new scale.
 */
function resetViewport (viewportWidth) {
  setRootFont(screenWidth, viewportWidth, true);
  setMetaViewport(viewportWidth);
  var newScale = screenWidth / viewportWidth;
  info.scale = newScale;
  return newScale
}

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

function extend$1 (to) {
  var args = [], len = arguments.length - 1;
  while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

  if (!args || args.length <= 0) { return to }
  args.forEach(function (from) {
    if (typeof from !== 'object') { return }
    for (var key in from) {
      to[key] = from[key];
    }
  });
  return to
}

// if support passive event listeners.
var _supportsPassive = false;
try {
  document.createElement('div').addEventListener('test', function (_) {}, {
    get passive () {
      _supportsPassive = true;
    }
  });
}
catch (e) {
  // do nothing.
}
function supportsPassive () {
  return _supportsPassive
}

/**
 * Create Event.
 * @param {DOMString} type
 * @param {Object} props
 */
function createEvent (target, type, props) {
  var event = new Event(type, { bubbles: false });

  extend$1(event, props);
  //  phantomjs don't support customer event
  if (window.navigator.userAgent.toLowerCase().indexOf('phantomjs') !== -1) {
    return event
  }
  try {
    Object.defineProperty(event, 'target', {
      enumerable: true,
      value: target
    });
  }
  catch (err) {
    return extend$1({}, event, { target: target })
  }
  return event
}

/**
 * Create a bubbable Event.
 * @param {DOMString} type
 * @param {Object} props
 */
function createBubblesEvent (target, type, props) {
  var event = new Event(type, { bubbles: true });
  extend$1(event, props);
  //  phantomjs don't support customer event
  if (window.navigator.userAgent.toLowerCase().indexOf('phantomjs') !== -1) {
    return event
  }
  try {
    Object.defineProperty(event, 'target', {
      enumerable: true,
      value: target
    });
  }
  catch (err) {
    return extend$1({}, event, { target: target })
  }
  return event
}

/**
 * Create Custom Event.
 * @param {DOMString} type
 * @param {Object} props
 */
function createCustomEvent (target, type, props) {
  // compatibility: http://caniuse.com/#search=customevent
  // const event = new CustomEvent(type)
  var event = document.createEvent('CustomEvent');
  event.initCustomEvent(type, false, true, {});
  // event.preventDefault()
  // event.stopPropagation()

  extend$1(event, props);

  // event.target is readonly
  try {
    Object.defineProperty(event, 'target', {
      enumerable: true,
      value: target || null
    });
  }
  catch (err) {
    return extend$1({}, event, { target: target || null })
  }

  return event
}

/**
 * dispatch a event on a HTML element.
 * @param  {HTMLElement} elm
 * @param  {Event} type event name.
 * @param  {Object} data extra data.
 */
function dispatchNativeEvent (elm, type, data) {
  elm.dispatchEvent(createEvent(elm, type, data));
}

function mapFormEvents (context) {
  var eventMap = {};['input', 'change', 'focus', 'blur', 'return'].forEach(function (type) {
    eventMap[type] = function (event) {
      if (context.$el) {
        event.value = context.$el.value;
        // for the sake of v-model, a input event must be emitted.
        if (type === 'input') {
          context.$emit(type, event);
        }
      }
    };
  });
  return eventMap
}

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var scaleStyles = [
  'width',
  'height',
  'left',
  'right',
  'top',
  'bottom',
  'border',
  'borderRadius',
  'borderWidth',
  'borderLeft',
  'borderRight',
  'borderTop',
  'borderBottom',
  'borderLeftWidth',
  'borderRightWidth',
  'borderTopWidth',
  'borderBottomWidth',
  'margin',
  'marginLeft',
  'marginRight',
  'marginTop',
  'marginBottom',
  'padding',
  'paddingLeft',
  'paddingRight',
  'paddingTop',
  'paddingBottom',
  'fontSize',
  'lineHeight',
  'transform',
  'webkitTransform',
  'WebkitTransform',
  'mozTransform',
  'MozTransform',
  'itemSize'
];

var vendorReg = /webkit|moz/i;
function hyphen (key) {
  return hyphenate(key.replace(vendorReg, function ($0) {
    return ("-" + ($0.toLowerCase()) + "-")
  }))
}

function getAllStyles () {
  return Object.keys(scaleStyles.reduce(function (pre, key) {
    pre[key] = 1;
    pre[hyphen(key)] = 1;
    return pre
  }, {}))
}

var allStyles = getAllStyles();

var config = {
  scrollableTypes: ['scroller', 'list', 'waterfall'],
  gestureEvents: [
    'panstart',
    'panmove',
    'panend',
    'swipe',
    'longpress',
    'tap'
  ],
  // these components should not bind events with .native.
  weexBuiltInComponents: [
    'div',
    'container',
    'text',
    'image',
    'img',
    'cell',
    'a'
  ],
  bindingStyleNamesForPx2Rem: allStyles
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * whether ct contains el.
 * @param {HTMLElement} container
 * @param {HTMLElement} target
 */
function contains (container, target, includeSelf) {
  if (includeSelf && container === target) {
    return true
  }
  return container.contains
    ? container.contains(target) && (container !== target)
    : container.compareDocumentPosition(target) & 16 !== 0
}

function insideA (el) {
  if (typeof el._insideA === 'boolean') {
    return el._insideA
  }
  var parent = el.parentElement;
  var parents = [];
  var checkParents = function (inside) {
    for (var i = 0, l = parents.length; i < l; i++) {
      parents[i]._insideA = inside;
    }
  };
  var check = function (inside) {
    el._insideA = inside;
    checkParents(inside);
    return inside
  };
  while (parent !== document.body) {
    if (parent.tagName.toLowerCase() === 'a') {
      return check(true)
    }
    if (typeof parent._insideA === 'boolean') {
      return check(parent._insideA)
    }
    parents.push(parent);
    parent = parent.parentElement;
  }
  return check(false)
}

/**
 * get parent scroller vComponent.
 * return a VueComponent or null.
 */
function getParentScroller (vm) {
  if (!vm) { return null }
  if (vm._parentScroller) {
    return vm._parentScroller
  }
  function _getParentScroller (parent) {
    if (!parent) { return }
    if (config.scrollableTypes.indexOf(parent.weexType) > -1) {
      vm._parentScroller = parent;
      return parent
    }
    return _getParentScroller(parent.$parent)
  }
  return _getParentScroller(vm.$parent)
}

/**
 * get scroller's element.
 * @param vm {HTMLElement | VueCOmponent} vm or element.
 * return the element or document.body.
 */
function getParentScrollerElement (vm) {
  if (!vm) { return null }
  var el = vm instanceof HTMLElement ? vm : vm.$el;
  if (!el || el.nodeType !== 1) { return }
  if (vm._parentScroller) {
    return vm._parentScroller
  }
  function _getParentScroller (parent) {
    if (!parent) { return }
    var tagName = parent.tagName.toLowerCase();
    if (tagName === 'body'
      || (tagName === 'main'
      && config.scrollableTypes.indexOf(parent.getAttribute('weex-type')) > -1)
    ) {
      vm._parentScroller = parent;
      return parent
    }
    return _getParentScroller(parent.parentElement)
  }
  return _getParentScroller(el)
}

function horizontalBalance (rect, ctRect) {
  return rect.left < ctRect.right && rect.right > ctRect.left
}

function verticalBalance (rect, ctRect) {
  return rect.top < ctRect.bottom && rect.bottom > ctRect.top
}

/**
 * return a data array with two boolean value, which are:
 * 1. visible in current ct's viewport.
 * 2. visible with offset in current ct's viewport.
 */
function hasIntersection (rect, ctRect, dir, offset) {
  dir = dir || 'up';
  var isHorizontal = dir === 'left' || dir === 'right';
  var isVertical = dir === 'up' || dir === 'down';
  if (isHorizontal && !verticalBalance(rect, ctRect)) {
    return [false, false]
  }
  if (isVertical && !horizontalBalance(rect, ctRect)) {
    return [false, false]
  }
  offset = offset ? parseInt(offset) * weex.config.env.scale : 0;
  switch (dir) {
    case 'up':
      return [
        rect.top < ctRect.bottom && rect.bottom > ctRect.top,
        rect.top < ctRect.bottom + offset && rect.bottom > ctRect.top - offset
      ]
    case 'down':
      return [
        rect.bottom > ctRect.top && rect.top < ctRect.bottom,
        rect.bottom > ctRect.top - offset && rect.top < ctRect.bottom + offset
      ]
    case 'left':
      return [
        rect.left < ctRect.right && rect.right > ctRect.left,
        rect.left < ctRect.right + offset && rect.right > ctRect.left - offset
      ]
    case 'right':
      return [
        rect.right > ctRect.left && rect.left < ctRect.right,
        rect.right > ctRect.left - offset && rect.left < ctRect.right + offset
      ]
  }
}

/**
 * isElementVisible
 * @param  {HTMLElement}  el    a dom element.
 * @param  {HTMLElement}  container  optional, the container of this el.
 */
function isElementVisible (el, container, dir, offset) {
  if (!el.getBoundingClientRect) { return false }
  var bodyRect = {
    top: 0,
    left: 0,
    bottom: window.innerHeight,
    right: window.innerWidth
  };
  var ctRect = (container === window || container === document.body)
    ? bodyRect : container
      ? container.getBoundingClientRect() : bodyRect;
  return hasIntersection(el.getBoundingClientRect(), ctRect, dir, offset)
}

// to trigger the appear/disappear event.
function triggerAppearEvent (elm, evt, dir) {
  dispatchNativeEvent(elm, evt, {
    direction: dir
  });
}

/**
 * get all event listeners. including bound handlers in all parent vnodes.
 */
function getEventHandlers (context) {
  var vnode = context.$vnode;
  var handlers = {};
  var attachedVnodes = [];
  while (vnode) {
    attachedVnodes.push(vnode);
    vnode = vnode.parent;
  }
  attachedVnodes.forEach(function (vnode) {
    var parentListeners = vnode.componentOptions && vnode.componentOptions.listeners;
    var dataOn = vnode.data && vnode.data.on;
    extend(handlers, parentListeners, dataOn);
  });
  return handlers
}

function getAppearOffset (el) {
  return el && el.getAttribute('appear-offset')
}

function updateWatchAppearList (container) {
  container._watchAppearList = Array.prototype.slice.call(
    container.querySelectorAll('[weex-appear]'));
}

/**
 * inject removeChild function to watch disappear and offsetDisappear events.
 */
if (!window._rmInjected) {
  window._rmInjected = true;
  var nativeRemove = HTMLElement.prototype.removeChild;
  HTMLElement.prototype.removeChild = function (el) {
    el._visible && triggerAppearEvent(el, 'disappear', null);
    el._offsetVisible && triggerAppearEvent(el, 'offsetDisappear', null);
    nativeRemove.apply(this, arguments);
  };
}

/**
 * Watch element's visibility to tell whether should trigger a appear/disappear
 * event in scroll handler.
 */
function watchAppear (context, fireNow) {
  var el = context && context.$el;
  if (!el || el.nodeType !== 1) { return }

  var isWindow = false;
  var container = getParentScrollerElement(context);
  if (!container) {
    return
  }
  if (container === document.body) {
    isWindow = true;
  }
  /**
   * Code below will only exec once for binding scroll handler for parent container.
   */
  var scrollHandler = container._scrollHandler;
  if (!scrollHandler) {
    scrollHandler = container._scrollHandler = function (event$$1) {
      updateWatchAppearList(container);
      /**
       * detect scrolling direction.
       * direction only support up & down yet.
       * TODO: direction support left & right.
       */
      var scrollTop = isWindow ? window.pageYOffset : container.scrollTop;
      var preTop = container._lastScrollTop;
      container._lastScrollTop = scrollTop;
      var dir = (scrollTop < preTop
        ? 'down' : scrollTop > preTop
          ? 'up' : container._prevDirection) || null;
      container._prevDirection = dir;
      var watchAppearList = container._watchAppearList || [];
      var len = watchAppearList.length;
      for (var i = 0; i < len; i++) {
        var el = watchAppearList[i];
        var appearOffset = getAppearOffset(el);
        var visibleData = isElementVisible(el, container, dir, appearOffset);
        detectAppear(el, visibleData, dir);
      }
    };
    container.addEventListener('scroll', throttle(scrollHandler, 100, true));
  }
  if (fireNow) {
    context.$nextTick(scrollHandler);
  }
}

/**
 * decide whether to trigger a appear/disappear event.
 * @param {VueComponent} context
 * @param {boolean} visible
 * @param {string} dir
 */
function detectAppear (el, visibleData, dir, appearOffset) {
  if ( dir === void 0 ) dir = null;

  if (!el) { return }
  var visible = visibleData[0];
  var offsetVisible = visibleData[1];
  /**
   * No matter it's binding appear/disappear or both of them. Always
   * should test it's visibility and change the el._visible.
   * If neigher has been bound, then ignore it.
   */
  /**
   * if the component hasn't appeared for once yet, then it shouldn't trigger
   * a disappear event at all.
   */
  if (el._appearedOnce || visible) {
    if (el._visible !== visible) {
      el._visible = visible;
      if (visible && !el._appearedOnce) {
        el._appearedOnce = true;
      }
      var evtName = visible ? 'appear' : 'disappear';
      if (el.getAttribute(("data-evt-" + evtName)) === '') {
        triggerAppearEvent(el, evtName, dir);
      }
    }
  }
  if (el._offsetAppearedOnce || offsetVisible) {
    if (el._offsetVisible !== offsetVisible) {
      el._offsetVisible = offsetVisible;
      if (offsetVisible && !el._offsetAppearedOnce) {
        el._offsetAppearedOnce = true;
      }
      var evt = offsetVisible ? ['offset-appear', 'offsetAppear'] : ['offset-disappear', 'offsetDisappear'];
      if (el.getAttribute(("data-evt-" + (evt[0]))) === '') {
        triggerAppearEvent(el, evt[1], dir);
      }
    }
  }
}

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

var lazyloadAttr = 'data-img-src';
var placeholderAttr = 'placeholder';

function preLoadImg (src,
  loadCallback,
  errorCallback) {
  var img = new Image();
  img.onload = loadCallback ? loadCallback.bind(img) : null;
  img.onerror = errorCallback ? errorCallback.bind(img) : null;
  img.src = src;
}

function applySrc (item, src, placeholderSrc) {
  if (!src) { return }
  function finallCb () {
    delete item._src_loading;
  }

  if (window._processImgSrc) {
    src = window._processImgSrc(src, item);
    if (placeholderSrc) {
      placeholderSrc = window._processImgSrc(placeholderSrc, item);
    }
  }

  if (item._src_loading === src) {
    return
  }

  /**
   * 1. apply src immediately in case javscript blocks the image loading
   *  before next tick.
   */
  item.style.backgroundImage = "url(" + (src || '') + ")";
  item.removeAttribute(lazyloadAttr);
  /**
   * 2. then load the img src with Image constructor (but would not post
   *  a request again), just to trigger the load event.
   */
  item._src_loading = src;
  preLoadImg(src, function (evt) {
    item.style.backgroundImage = "url(" + (src || '') + ")";
    var ref = this;
    var naturalWidth = ref.width;
    var naturalHeight = ref.height;
    var params = {
      success: true,
      size: { naturalWidth: naturalWidth, naturalHeight: naturalHeight }
    };
    dispatchNativeEvent(item, 'load', params);
    finallCb();
  }, function (evt) {
    var params = {
      success: false,
      size: { naturalWidth: 0, naturalHeight: 0 }
    };
    dispatchNativeEvent(item, 'load', params);
    if (placeholderSrc) {
      preLoadImg(placeholderSrc, function () {
        item.style.backgroundImage = "url(" + (placeholderSrc || '') + ")";
      });
    }
    finallCb();
  });
}

function getCtScroller (el) {
  if (!el) { return }
  var scroller = el._ptScroller;
  if (!scroller) {
    var pt = el.parentElement;
    while (pt && pt !== document.body) {
      if ((pt.className + '' || '').match(/weex-list|weex-scroller|weex-waterfall/)) {
        scroller = pt;
        break
      }
      pt = pt.parentElement;
    }
    scroller = pt;
    el._ptScroller = pt;
  }
  return scroller
}

function fireLazyload (el, ignoreVisibility) {
  if (Array.isArray(el)) {
    return el.forEach(function (ct) { return fireLazyload(ct); })
  }
  el = el || document.body;
  if (!el) { return }
  var imgs = (el || document.body).querySelectorAll(("[" + lazyloadAttr + "]"));
  if (el.getAttribute(lazyloadAttr)) { imgs = [el]; }
  for (var i = 0; i < imgs.length; i++) {
    var img = imgs[i];
    if (typeof ignoreVisibility === 'boolean' && ignoreVisibility) {
      applySrc(img, img.getAttribute(lazyloadAttr), img.getAttribute(placeholderAttr));
    }
    else if (isElementVisible(img, getCtScroller(el))[0]) {
      applySrc(img, img.getAttribute(lazyloadAttr), img.getAttribute(placeholderAttr));
    }
  }
}

/**
 * cache a throttle lazyload function for every container element
 * once for different wait times separate.
 *   the architecture of this cache:
 *      cache: {
 *        el.id: {
 *          wait: throttledFunction () { ... }
 *        }
 *      }
 */
var cache = {};
var _uid$2 = 1;
function getThrottleLazyload (wait, el) {
  if ( wait === void 0 ) wait = 16;
  if ( el === void 0 ) el = document.body;

  var id = +(el && el.dataset.throttleId);
  if (isNaN(id) || id <= 0) {
    id = _uid$2++;
    el && el.setAttribute('data-throttle-id', id + '');
  }

  !cache[id] && (cache[id] = {});
  var throttled = cache[id][wait] ||
    (cache[id][wait] = throttle(
      fireLazyload.bind(this, el),
      parseFloat(wait),
      // true for callLastTime.
      // to trigger once more time after the last throttled function called with a little more delay.
      true)
    );
  return throttled
}

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

var bindingStyleNamesForPx2Rem = config.bindingStyleNamesForPx2Rem;

// whether to support using 0.5px to paint 1px width border.
var _supportHairlines;
function supportHairlines () {
  if (typeof _supportHairlines === 'undefined') {
    var dpr = window.devicePixelRatio;
    if (dpr && dpr >= 2 && document.documentElement) {
      var docElm = document.documentElement;
      var testElm = document.createElement('div');
      var fakeBody = document.createElement('body');
      var beforeNode = docElm.firstElementChild || docElm.firstChild;
      testElm.style.border = '0.5px solid transparent';
      fakeBody.appendChild(testElm);
      docElm.insertBefore(fakeBody, beforeNode);
      _supportHairlines = testElm.offsetHeight === 1;
      docElm.removeChild(fakeBody);
    }
    else {
      _supportHairlines = false;
    }
  }
  return _supportHairlines
}

var support = null;

function supportSticky () {
  if (support !== null) {
    return support
  }
  var element = window.document.createElement('div');
  var elementStyle = element.style;
  elementStyle.cssText = 'position:-webkit-sticky;position:sticky;';
  support = elementStyle.position.indexOf('sticky') !== -1;
  return support
}

/**
 * get transformObj
 */
function getTransformObj (elm) {
  var styleObj = {};
  if (!elm) { return styleObj }
  var transformStr = elm.style.webkitTransform
    || elm.style.mozTransform
    || elm.style.transform;
  if (transformStr && transformStr.match(/(?: *(?:translate|rotate|scale)[^(]*\([^(]+\))+/i)) {
    styleObj = transformStr.trim().replace(/, +/g, ',').split(' ').reduce(function (pre, str) {
      ['translate', 'scale', 'rotate'].forEach(function (name) {
        if (new RegExp(name, 'i').test(str)) {
          pre[name] = str;
        }
      });
      return pre
    }, {});
  }
  return styleObj
}

/**
 * translate a transform string from a transformObj.
 */
function getTransformStr (obj) {
  return Object.keys(obj).reduce(function (pre, key) {
    return pre + obj[key] + ' '
  }, '')
}

/**
 * add transform style to element.
 * @param {HTMLElement} elm
 * @param {object} style: transform object, format is like this:
 *   {
 *     translate: 'translate3d(2px, 2px, 2px)',
 *     scale: 'scale(0.2)',
 *     rotate: 'rotate(30deg)'
 *   }
 * @param {boolean} replace: whether to replace all transform properties.
 */
function addTransform (elm, style, replace) {
  if (!style) { return }
  var styleObj = {};
  if (!replace) {
    styleObj = getTransformObj(elm);
  }
  for (var key in style) {
    var val = style[key];
    if (val) {
      styleObj[key] = val;
    }
  }
  var resStr = getTransformStr(styleObj);
  elm.style.webkitTransform = resStr;
  elm.style.mozTransform = resStr;
  elm.style.transform = resStr;
}

/**
 * copy a transform behaviour from one element to another.
 * key could be: 'translate' | 'scale' | 'rotate'
 */
function copyTransform (from, to, key) {
  var str;
  if (!key) {
    str = from.style.webkitTransform
      || from.style.mozTransform
      || from.style.transform;
  }
  else {
    var fromObj = getTransformObj(from);
    if (!fromObj[key]) { return }
    var toObj = getTransformObj(to);
    toObj[key] = fromObj[key];
    str = getTransformStr(toObj);
  }
  to.style.webkitTransform = str;
  to.style.mozTransform = str;
  to.style.transform = str;
}

/**
 * get color's r, g, b value.
 * @param {string} color support all kinds of value of color.
 */
function getRgb (color) {
  var haxReg = /#([\da-fA-F]{2})([\da-fA-F]{2})([\da-fA-F]{2})/;
  var rgbReg = /rgb\((\d+),\s*(\d+),\s*(\d+)\)/;
  var span = document.createElement('span');
  var body = document.body;
  span.style.cssText = "color: " + color + "; width: 0px; height: 0px;";
  body && body.appendChild(span);
  color = window.getComputedStyle(span).color + '';
  body && body.removeChild(span);

  var match;
  match = color.match(haxReg);
  if (match) {
    return {
      r: parseInt(match[1], 16),
      g: parseInt(match[2], 16),
      b: parseInt(match[3], 16)
    }
  }
  match = color.match(rgbReg);
  if (match) {
    return {
      r: parseInt(match[1]),
      g: parseInt(match[2]),
      b: parseInt(match[3])
    }
  }
}

/**
 * get style sheet with owner node's id
 * @param {string} id owner node id.
 */
function getStyleSheetById (id) {
  if (!id) { return }
  var styleSheets = document.styleSheets;
  var len = styleSheets.length;
  for (var i = 0; i < len; i++) {
    var styleSheet = styleSheets[i];
    if (styleSheet.ownerNode.id === id) {
      return styleSheet
    }
  }
}

function getChildrenTotalWidth (children) {
  var len = children.length;
  var total = 0;
  for (var i = 0; i < len; i++) {
    total += children[i].getBoundingClientRect().width;
  }
  return total
}
/**
 * get total content width of the element.
 * @param {HTMLElement} elm
 */
function getRangeWidth (elm) {
  var children = elm.children;
  if (!children) {
    return elm.getBoundingClientRect().width
  }
  if (!Range) {
    return getChildrenTotalWidth(children)
  }
  var range = document.createRange();
  if (!range.selectNodeContents) {
    return getChildrenTotalWidth(children)
  }
  range.selectNodeContents(elm);
  return range.getBoundingClientRect().width
}

/**
 * px2rem and camelize keys.
 */
function styleObject2rem (style, rootValue) {
  var obj = {};
  for (var k in style) {
    var camK = camelize(k);
    if (bindingStyleNamesForPx2Rem.indexOf(camK) > -1) {
      obj[camK] = px2rem(style[k] + '', rootValue);
    }
    else {
      obj[camK] = style[k];
    }
  }
  return obj
}

function px2rem (px, rootValue) {
  return px.replace(/([+-]?\d+(?:.\d*)?)([p|w]x)/g, function ($0, $1, $2) {
    if ($2 === 'wx') { // 'wx' -> px
      return $1 + 'px'
    }
    else {  // 'px' -> rem
      var pxVal = parseFloat($1);
      var sign = pxVal > 0
        ? 1 : pxVal < 0 ?
          -1 : 0;
      if (Math.abs(pxVal) <= 1) {
        return supportHairlines()
          ? ((sign * 0.5) + "px")
          : ((sign * 1) + "px")
      }
      return pxVal
        / (rootValue || window.weex.config.env.rem)
        + 'rem'
    }
  })
}

function rem2px (rem, rootValue) {
  return rem.replace(/([+-]?\d+(?:.\d*)?)rem/g, function ($0, $1) {
    return parseFloat($1)
      * (rootValue || window.weex.config.env.rem)
      + 'px'
  })
}

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */



var utils = Object.freeze({
	extend: extend,
	extendTruthy: extendTruthy,
	extendKeys: extendKeys,
	extractKeys: extractKeys,
	bind: bind,
	debounce: debounce,
	depress: depress,
	throttle: throttle,
	loopArray: loopArray,
	cached: cached,
	camelize: camelize,
	camelizeKeys: camelizeKeys,
	capitalize: capitalize,
	hyphenate: hyphenate,
	hyphenateKeys: hyphenateKeys,
	hyphenateStyleKeys: hyphenateStyleKeys,
	camelToKebab: camelToKebab,
	appendCss: appendCss,
	nextFrame: nextFrame,
	toCSSText: toCSSText,
	supportsPassive: supportsPassive,
	createEvent: createEvent,
	createBubblesEvent: createBubblesEvent,
	createCustomEvent: createCustomEvent,
	dispatchNativeEvent: dispatchNativeEvent,
	mapFormEvents: mapFormEvents,
	contains: contains,
	insideA: insideA,
	getParentScroller: getParentScroller,
	getParentScrollerElement: getParentScrollerElement,
	hasIntersection: hasIntersection,
	isElementVisible: isElementVisible,
	getEventHandlers: getEventHandlers,
	watchAppear: watchAppear,
	detectAppear: detectAppear,
	applySrc: applySrc,
	fireLazyload: fireLazyload,
	getThrottleLazyload: getThrottleLazyload,
	supportHairlines: supportHairlines,
	supportSticky: supportSticky,
	getTransformObj: getTransformObj,
	getTransformStr: getTransformStr,
	addTransform: addTransform,
	copyTransform: copyTransform,
	getRgb: getRgb,
	getStyleSheetById: getStyleSheetById,
	getRangeWidth: getRangeWidth,
	styleObject2rem: styleObject2rem,
	px2rem: px2rem,
	rem2px: rem2px,
	isPlainObject: isPlainObject,
	isArray: isArray,
	isPrimitive: isPrimitive,
	isDef: isDef
});

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * get WXEnvironment info.
 * @param  {object} viewportInfo: info about viewport.
 * @param  {object} envInfo: info parsed from lib.env.
 */
function initEnv (viewportInfo, envInfo) {
  var browserName = envInfo.browser ? envInfo.browser.name : navigator.appName;
  var browserVersion = envInfo.browser ? envInfo.browser.version.val : null;
  var osName = envInfo.os.name;
  if (osName.match(/(iPhone|iPad|iPod)/i)) {
    osName = 'iOS';
  }
  else if (osName.match(/Android/i)) {
    osName = 'android';
  }
  var osVersion = envInfo.os.version.val;
  var env = {
    platform: 'Web',
    weexVersion: '1.0.26',
    userAgent: navigator.userAgent,
    appName: browserName,
    appVersion: browserVersion,
    osName: osName,
    osVersion: osVersion,
    deviceModel: envInfo.os.name || null
  };
  /**
   * viewportInfo: scale, deviceWidth, deviceHeight. dpr
   */
  return extend(viewportInfo, env)
}

// const viewportInfo = initViewport()

// 750 by default currently
// const scale = viewportInfo.scale

// const units = {
//   REM: 12 * scale,
//   VW: viewportInfo.deviceWidth / 100,
//   VH: viewportInfo.deviceHeight / 100,
//   VMIN: Math.min(viewportInfo.deviceWidth, viewportInfo.deviceHeight) / 100,
//   VMAX: Math.max(viewportInfo.deviceWidth, viewportInfo.deviceHeight) / 100,
//   CM: 96 / 2.54 * scale,
//   MM: 96 / 25.4 * scale,
//   Q: 96 / 25.4 / 4 * scale,
//   IN: 96 * scale,
//   PT: 96 / 72 * scale,
//   PC: 96 / 6 * scale,
//   PX: scale
// }

// Object.freeze(units)
// Object.freeze(env)

// window.CSS_UNIT = units
window.WXEnvironment = initEnv(init$1(), window.lib.env);

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/* global Vue */

var weexModules = {};
var _roots = [];

var weex$4 = {
  __vue__: null,
  utils: utils,
  // units: window.CSS_UNIT,
  config: {
    env: window.WXEnvironment,
    bundleUrl: location.href
  },

  _components: {},
  _modules: weexModules,

  _meta: {
    mounted: {},
    updated: {},
    destroyed: {},
    requiredModules: {},
    apiCalled: {},
    perf: {}
  },

  document: {
    body: {}
  },

  requireModule: function requireModule (moduleName) {
    var metaMod = weex$4._meta.requiredModules;
    if (!metaMod[moduleName]) {
      metaMod[moduleName] = 0;
    }
    metaMod[moduleName]++;
    return weexModules[moduleName]
  },

  registerModule: function registerModule () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    return (ref = this).registerApiModule.apply(ref, args)
    var ref;
  },

  support: function support (feature) {
    if ( feature === void 0 ) feature = '';

    var match = (feature + '').match(/@(component|module)\/(\w+)(.\w+)?/);
    if (match) {
      var type = match[1];
      var mod = match[2];
      var method = match[3];
      method = method && method.replace(/^\./, '');
      switch (type) {
        case 'component':
          return typeof this._components[mod] !== 'undefined'
        case 'module':
          var module = weexModules[mod];
          return module && method ? !!module[method] : !!module
      }
    }
    else {
      console.warn(("[vue-render] invalid argument for weex.support: " + feature));
      return null
    }
  },

  /**
   * Register a new vue instance in this weex instance. Put its root element into weex.document.body.children, so
   * that user can use weex.document.body to walk through all dom structures in all vue instances in the page.
   */
  registerVueInstance: function registerVueInstance (instance) {
    if (!instance instanceof Vue) {
      return
    }
    var root = instance.$root;
    if (!root || !root.$el) {
      return
    }
    this.document.body.children.push(root.$el);
  },

  // @deprecated
  require: function require () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    console.log("[Vue Render] \"weex.require\" is deprecated, please use \"weex.requireModule\" instead.");
    return (ref = this).requireModule.apply(ref, args)
    var ref;
  },

  // @deprecated
  // TODO: rename to registerModule
  registerApiModule: function registerApiModule (name, module, meta) {
    if (!weexModules[name]) {
      weexModules[name] = {};
    }
    if (!!meta && meta.registerType === 'assignment') {
      weexModules[name] = module;
    }
    else {
      var loop = function ( key ) {
        if (module.hasOwnProperty(key)) {
          weexModules[name][key] = function () {
            var called = weex$4._meta.apiCalled;
            if (!called[name]) {
              called[name] = {};
            }
            var calledMod = called[name];
            if (!calledMod[key]) {
              calledMod[key] = 0;
            }
            calledMod[key]++;
            return module[key].apply(weex$4, arguments)
          };
        }
      };

      for (var key in module) loop( key );
    }
  },

  registerComponent: function registerComponent (name, component) {
    if (!this.__vue__) {
      return console.log('[Vue Render] Vue is not found. Please import Vue.js before register a component.')
    }
    this._components[name] = 0;
    if (component._css) {
      var css = component._css.replace(/\b[+-]?[\d.]+rem;?\b/g, function (m) {
        return parseFloat(m) * 75 * weex$4.config.env.scale + 'px'
      });
      appendCss(css, ("weex-cmp-" + name));
      delete component._css;
    }
    this.__vue__.component(name, component);
  },

  // @deprecated
  getRoot: function getRoot () {},

  // @deprecated
  sender: {
    performCallback: function performCallback (callback, data, keepAlive) {
      if (typeof callback === 'function') {
        return callback(data)
      }
      return null
    }
  },

  // @deprecated
  install: function install (module) {
    module.init(this);
  }
};

Object.defineProperty(weex$4.document.body, 'children', {
  get: function get () { return _roots }
})

; ['on', 'once', 'off', 'emit'].forEach(function (method) {
  weex$4[method] = function () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    if (!this._vue) {
      this._vue = new this.__vue__();
    }
    return (ref = this._vue)[("$" + method)].apply(ref, args)
    var ref;
  };
});

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
function getInlineStyle (vnode) {
  var data = vnode.data || {};
  return extendTruthy({}, data.staticStyle, data.style)
}

function extractComponentStyle (context) {
  return getComponentInlineStyle(context)
  // return getComponentStyle(context, true)
}

function getComponentInlineStyle (context) {
  var vnode = context && context.$vnode;
  if (!vnode) {
    return {}
  }
  var style = {};
  while (vnode) {
    extend(style, getInlineStyle(vnode));
    vnode = vnode.parent;
  }
  return style
}

var text$2 = {
  transform: function transform (style) {
    var lines = style.lines;
    if (lines > 0) {
      return Object.assign(style, {
        overflow: 'hidden',
        textOverflow: 'ellipsis',
        WebkitLineClamp: lines
      })
    }
    return style
  }
};

var tagMap$1 = {
  text: text$2
};

var getTransformer$1 = function (tag) {
  return tagMap$1[tag]
};

var transformer = {
	getTransformer: getTransformer$1
};

var getTransformer = transformer.getTransformer;

var getTransformer_1 = getTransformer;

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var weexBuiltInComponents = config.weexBuiltInComponents;

var appearEventsMap = {
  appear: 'appear',
  disappear: 'disappear',
  offsetAppear: 'offset-appear',
  offsetDisappear: 'offset-disappear'
};

/**
 * remove text nodes in the nodes array.
 * @param  {Array} nodes
 * @return {Array} nodes without text nodes.
 */
function trimTextVNodes (vnodes) {
  if (isArray(vnodes)) {
    return vnodes.filter(function (vnode) { return !!vnode.tag; })
  }
  return vnodes
}

/**
 * ==================================================
 * method to transform args passed to createElement
 * for render function.
 * ==================================================
 */

// should share with precompiler.
var metaMap = {
  figure: ['img', 'image', 'figure'],
  p: ['text', 'p'],
  div: ['container', 'div'],
  section: ['cell']
};

var checkMap = Object.keys(metaMap).reduce(function (pre, targetTag) {
  var tagArr = metaMap[targetTag];
  tagArr.forEach(function (fromTag) {
    pre[fromTag] = targetTag;
  });
  return pre
}, {});

var _stdTagMap = {
  p: 'text',
  figure: 'image',
  section: 'cell'
};
function getStdTag (tag) {
  var stdTag = _stdTagMap[tag];
  return stdTag || tag
}

var precompiledClassMap = {
  div: {
    'weex-ct': true,
    'weex-div': true
  },
  image: {
    'weex-el': true,
    'weex-image': true
  },
  text: {
    'weex-el': true,
    'weex-text': true
  },
  cell: {
    'weex-ct': true,
    'weex-cell': true
  },
  a: {
    'weex-ct': true,
    'weex-a': true
  }
};

function isPrecompiled (tag) {
  return config.weexBuiltInComponents.indexOf(tag) > -1
}

function transformRender (ctx, h) {
  return function (
    tag,
    data,
    children,
    normalizationType,
    alwaysNormalize
  ) {
    if (isArray(data) || isPrimitive(data)) {
      normalizationType = children;
      children = data;
      data = {};
    }
    if (!isDef(data)) {
      data = {};
    }
    if (isDef(data.is)) {
      tag = data.is;
    }
    if (typeof tag === 'string') {
      data = transformData(this, data, tag);
      tag = transformTag(this, tag);
    }
    else {  // direct component options / constructor
      data = transformData(this, data, undefined);
    }
    return h.call(
      this,
      tag,
      data,
      children,
      normalizationType,
      alwaysNormalize
    )
  }.bind(ctx)
}

function transformTag (ctx, tag) {
  var elementTag = checkMap[tag];
  return elementTag || tag
}

/**
 * Tell whether a element is contained in a element who has
 * a attribute 'bubble'=true.
 * @param {HTMLElement} el
 */
// function inBubble (el) {
//   if (typeof el._inBubble === 'boolean') {
//     return el._inBubble
//   }
//   const parents = []
//   let parent = el.parentElement
//   let inBubble
//   while (parent && parent !== document.body) {
//     if (typeof parent._inBubble === 'boolean') {
//       inBubble = parent._inBubble
//       break
//     }
//     const attr = parent.getAttribute('bubble')
//     if (attr !== '') {
//       inBubble = attr === true || attr === 'true'
//       break
//     }
//     parents.push(parent)
//     parent = parent.parentElement
//   }
//   el._inBubble = inBubble
//   for (let i = 0, l = parents.length; i < l; i++) {
//     parents[i]._inBubble = inBubble
//   }
//   return inBubble
// }

function bindEvents (ctx, evts, attrs, tag, appearAttached) {
  for (var key in evts) {
    var appearEvtName = appearEventsMap[key];
    if (appearEvtName) {
      attrs[("data-evt-" + appearEvtName)] = '';
      if (!appearAttached.value) {
        appearAttached.value = true;
        attrs['weex-appear'] = '';
      }
    }
    else {
      attrs[("data-evt-" + key)] = '';
      if (key !== 'click') {
        // should stop propagation by default.
        // TODO: should test inBubble first.
        var handler = evts[key];
        if (isArray(evts[key])) {
          handler.unshift(ctx.$stopPropagation);
        }
        else {
          evts[key] = [ctx.$stopPropagation, handler];
        }
      }
    }
  }
  if (evts.click) {
    evts.weex$tap = evts.click;
    evts.click = ctx.$stopOuterA;
  }
  if (evts.scroll) {
    evts.weex$scroll = evts.scroll;
    delete evts.scroll;
  }
}

function transformOn (ctx, data, tag) {
  var on = data.on;
  var nativeOn = data.nativeOn;
  if (weexBuiltInComponents.indexOf(tag) > -1) {
    /**
     * for div, image, text, cell, a, ...
     * user should bind all events without .native.
     */
    nativeOn = null;
    delete data.nativeOn;
  }
  if (isDef(weex._components[tag])) {
    /**
     * for slider, list, ...
     * user should bind events without .native.
     * in our events handling, all events should transfer to
     * .native binding.
     */
    delete data.nativeOn;
    nativeOn = null;
    if (on) {
      nativeOn = data.nativeOn = on;
    }
    on = null;
    delete data.on;
  }

  var attrs = data.attrs;
  if (!attrs) {
    attrs = data.attrs = {};
  }

  var appearAttached = {
    value: false
  };
  if (on) {
    bindEvents(ctx, on, attrs, tag, appearAttached);
  }
  if (nativeOn) {
    bindEvents(ctx, nativeOn, attrs, tag, appearAttached);
  }

  /**
   * binding a weex$tap to <a> element to stop propagation if there
   * is no bubbles=true flag showing on parents.
   */
  if (tag === 'a') {
    if (!on) {
      on = data.on = {};
    }
    // if (!checkBubble(el)) {
    var evt = on['weex$tap'];
    if (!evt) {
      on['weex$tap'] = ctx.$stopPropagation;
    }
    else if (Array.isArray(evt)) {
      evt.unshift(ctx.$stopPropagation);
    }
    else {
      evt = [ctx.$stopPropagation, evt];
    }
    // }
  }
}

function transformClass (data, tag) {
  var classData = data.class;
  var tagClassObj = precompiledClassMap[tag];
  if (!classData) {
    classData = data.class = [];
  }
  if (classData && isArray(classData)) {
    data.class = classData.concat(Object.keys(tagClassObj));
  }
  else if (typeof classData === 'object') {
    Object.assign(classData, tagClassObj);
  }
}

function transformStyle (ctx, data, tag) {
  var style = data.style;
  if (!style) { return }
  var transformer = getTransformer_1(getStdTag(tag));
  if (transformer) {
    data.style = ctx._px2rem(transformer.transform(style), 75);
  }
  else {
    data.style = ctx._px2rem(style, 75);
  }
}

/**
 * transformAttrs:
 *  - add weex-type attrs for precompiledTags.
 *  - image.resize: transform to directive weex-resize.
 */
function transformAttrs (data, tag) {
  var attrs = data.attrs;
  var directives = data.directives;
  if (!attrs) {
    attrs = data.attrs = {};
  }
  attrs['weex-type'] = tag;
  if (tag === 'image') {
    var src = attrs.src;
    var resize = attrs.resize;
    if (src) {
      attrs['data-img-src'] = src;
    }
    if (resize) {
      if (!directives) {
        directives = data.directives = [];
      }
      directives.push({
        name: 'weex-resize',
        value: attrs.resize
      });
    }
  }
}

function transformData (ctx, data, tag) {
  if (isArray(data)) {
    // parameter data is ommited.
    return data
  }
  var isP = isPrecompiled(tag);
  // class
  isP && transformClass(data, tag);
  // style
  transformStyle(ctx, data, tag);
  // attrs
  isP && transformAttrs(data, tag);
  // on
  transformOn(ctx, data, tag);
  return data
}

function mapNativeEvents (ctx, map) {
  var eventMap = {};
  var loop = function ( origEvent ) {
    eventMap[origEvent] = function (evt) {
      var el = evt.target;
      dispatchNativeEvent(el, map[origEvent]);
    };
  };

  for (var origEvent in map) loop( origEvent );
  return eventMap
}

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */



var core = Object.freeze({
	extractComponentStyle: extractComponentStyle,
	getComponentInlineStyle: getComponentInlineStyle,
	trimTextVNodes: trimTextVNodes,
	transformRender: transformRender,
	transformTag: transformTag,
	transformData: transformData,
	mapNativeEvents: mapNativeEvents
});

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var scrollableTypes = config.scrollableTypes;

var lazyloadWatched = false;
function watchLazyload () {
  lazyloadWatched = true
  ; [
    'scroll',
    // 'transitionend',
    // 'webkitTransitionEnd',
    // 'animationend',
    // 'webkitAnimationEnd',
    'resize'
  ].forEach(function (evt) {
    window.addEventListener(evt, getThrottleLazyload(25, document.body));
  });
  /**
   * In case the users use the body's overflow to scroll. Then the scroll
   * event would not be triggered on the window object but on the body.
   */
  document.body.addEventListener('scroll', getThrottleLazyload(25, document.body));
}

var idCnt = 0;
var appearWatched = false;

/**
 * during updating, the appear watcher binding on the appearWatched context
 * should be triggered within a debounced wrapper.
 * If the updating interval is shorter then 50 ms, then the appear events will
 * ignore the change in the previous 50 ms due to the debounce wrapper.
 */
var debouncedWatchAppear = debounce(function () {
  watchAppear(appearWatched, true);
}, 50);

/**
 * if it's a scrollable tag, then watch appear events for it.
 */
function watchAppearForScrollables (tagName, context) {
  // when this is a scroller/list/waterfall
  if (scrollableTypes.indexOf(tagName) > -1) {
    var sd = context.scrollDirection;
    if (!sd || sd !== 'horizontal') {
      appearWatched = context;
      watchAppear(context, true);
    }
  }
}

var base$1 = {
  beforeCreate: function beforeCreate () {
    if (!lazyloadWatched) {
      watchLazyload();
    }
  },

  updated: function updated () {
    var el = this.$el;
    if (!el || el.nodeType !== 1) {
      return
    }
    if (this._rootId) {
      if (el.className.indexOf('weex-root') <= -1) {
        el.classList.add('weex-root');
        el.classList.add('weex-ct');
        el.setAttribute('data-wx-root-id', this._rootId);
      }
    }

    var tagName = this.$options && this.$options._componentTag;
    var metaUp = weex._meta.updated;
    if (!metaUp[tagName]) {
      metaUp[tagName] = 0;
    }
    metaUp[tagName]++;
    // will check appearing when no other changes in latest 50ms.
    debouncedWatchAppear();
    /**
     * since the updating of component may affect the layout, the lazyloading should
     * be fired.
     */
    this._fireLazyload();
  },

  mounted: function mounted () {
    var tagName = this.$options && this.$options._componentTag;
    var el = this.$el;
    if (!el || el.nodeType !== 1) {
      return
    }
    if (typeof weex._components[tagName] !== 'undefined') {
      weex._components[tagName]++;
    }
    var metaMt = weex._meta.mounted;
    if (!metaMt[tagName]) {
      metaMt[tagName] = 0;
    }
    metaMt[tagName]++;

    watchAppearForScrollables(tagName, this);

    // when this is the root element of Vue instance.
    if (this === this.$root) {
      var rootId = "wx-root-" + (idCnt++);
      if (!weex._root) {
        weex._root = {};
      }
      weex._root[rootId] = this;
      this._rootId = rootId;
      if (el.nodeType !== 1) {
        return
      }
      el.classList.add('weex-root');
      el.classList.add('weex-ct');
      el.setAttribute('data-wx-root-id', rootId);

      /**
       * there's no scrollable component in this page. That is to say,
       * the page is using body scrolling instead of scrollabe components.
       * Then the appear watcher should be attached on the body.
       */
      if (!appearWatched) {
        appearWatched = this;
        watchAppear(this, true);
      }

      this._fireLazyload(el);
    }

    // give warning for not using $processStyle in vue-loader config.
    // if (!warned && !window._style_processing_added) {
    //   warnProcessStyle()
    // }
  },

  destroyed: function destroyed () {
    var el = this.$el;
    if (!el || el.nodeType !== 1) {
      return
    }
    /**
     * if the destroyed element is above another panel with images inside, and the images
     * moved into the viewport, then the lazyloading should be triggered.
     */
    if (this._rootId) {
      delete weex._root[this._rootId];
      delete this._rootId;
    }
    var tagName = this.$options && this.$options._componentTag;
    if (typeof weex._components[tagName] !== 'undefined') {
      weex._components[tagName]--;
    }
    var metaDs = weex._meta.destroyed;
    if (!metaDs[tagName]) {
      metaDs[tagName] = 0;
    }
    metaDs[tagName]++;
    this._fireLazyload();
  },

  methods: {
    _fireLazyload: function _fireLazyload (el) {
      getThrottleLazyload(25, el || document.body)();
    }
  }
};

var event$1 = {
  methods: {
    // deprecated.
    $stopOutterA: function $stopOutterA (e) {
      return this.$stopOuterA(e)
    },

    $stopOuterA: function $stopOuterA (e) {
      if (e && e.preventDefault && e.target) {
        if (insideA(e.target)) {
          e.preventDefault();
        }
      }
    },

    $stopPropagation: function $stopPropagation (e) {
      if (e && e.stopPropagation) {
        e.stopPropagation();
      }
    }
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

var bindingStyleNamesForPx2Rem$1 = config.bindingStyleNamesForPx2Rem;

var style = {
  methods: {
    _px2rem: function _px2rem (value, rootValue) {
      var this$1 = this;

      if (typeof value === 'string') {
        return (value + '').replace(/[+-]?\d+(?:.\d*)?[pw]x/gi, function ($0) {
          return weex.utils.px2rem($0, rootValue)
        })
      }
      if (typeof value === 'number') {
        return weex.utils.px2rem(value + '', rootValue)
      }
      if (isPlainObject(value)) {
        for (var k in value) {
          if (
            value.hasOwnProperty(k)
            && bindingStyleNamesForPx2Rem$1.indexOf(k) > -1
          ) {
            value[k] = weex.utils.px2rem(value[k] + '', rootValue);
          }
        }
        return value
      }
      if (isArray(value)) {
        for (var i = 0, l = value.length; i < l; i++) {
          this$1._px2rem(value[i], rootValue);
        }
        return value
      }
    },

    _processExclusiveStyle: function _processExclusiveStyle (styleObj, rootValue, tagName) {
      var transformer = getTransformer_1(tagName);
      return this._px2rem(
        transformer.transform(styleObj),
        rootValue
      )
    },

    _getParentRect: function _getParentRect () {
      var el = this.$el;
      var parent = el && el.parentElement;
      return parent && parent.getBoundingClientRect()
    }
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// input and textare has some common api and event
var findEnterKeyType = function (key) {
  var keys = ['default', 'go', 'next', 'search', 'send'];
  if (keys.indexOf(key) > -1) {
    return key
  }
  return 'done'
};

var inputCommon = {
  methods: {
    focus: function focus () {
      this.$el && this.$el.focus();
    },
    blur: function blur () {
      this.$el && this.$el.blur();
    },

    setSelectionRange: function setSelectionRange (start, end) {
      try {
        this.$el.setSelectionRange(start, end);
      }
      catch (e) {
        
      }
    },

    getSelectionRange: function getSelectionRange (callback) {
      try {
        var selection = window.getSelection();
        var str = selection.toString();
        var selectionStart = this.$el.value.indexOf(str);
        var selectionEnd = selectionStart === -1 ? selectionStart : selectionStart + str.length;
        callback && callback({
          selectionStart: selectionStart,
          selectionEnd: selectionEnd
        });
      }
      catch (e) {
        callback && callback(new Error('[vue-render] getSelection is not supported.'));
      }
    },

    getEditSelectionRange: function getEditSelectionRange (callback) {
      this.getSelectionRange(callback);
    },

    // support enter key event
    createKeyboardEvent: function createKeyboardEvent (events) {
      var customKeyType = this.returnKeyType;
      if (customKeyType) {
        var keyboardEvents = {
          'keyup': function (ev) {
            var code = ev.keyCode;
            var key = ev.key;
            if (code === 13) {
              if (!key || key.toLowerCase() === 'tab') {
                key = 'next';
              }
              dispatchNativeEvent(ev.target, 'return', {
                key: key,
                returnKeyType: findEnterKeyType(customKeyType),
                value: ev.target.value
              });
            }
          }
        };
        events = extend(events, keyboardEvents);
      }
      return events
    }
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var sticky = {
  destroyed: function destroyed () {
    if (!this._stickyAdded) { return }
    var scroller = getParentScroller(this);
    if (!scroller) { return }
    delete scroller._stickyChildren[this._uid];
  },

  methods: {
    _addSticky: function _addSticky () {
      var el = this.$el;
      if (!el || el.nodeType === 1) {
        return
      }
      el.classList.add('sticky');
      if (!this._placeholder) {
        this._placeholder = el.cloneNode(true);
      }
      this._placeholder.style.display = 'block';
      this._placeholder.style.width = this.$el.offsetWidth + 'px';
      this._placeholder.style.height = this.$el.offsetHeight + 'px';
      el.parentNode.insertBefore(this._placeholder, this.$el);
    },

    _removeSticky: function _removeSticky () {
      var el = this.$el;
      if (!el || el.nodeType === 1) {
        return
      }
      el.classList.remove('sticky');
      if (this._placeholder) {
        this._placeholder.parentNode.removeChild(this._placeholder);
      }
      this._placeholder = null;
    }
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
window.global = window;
window.weex = weex$4;

weex$4._styleMap = {}

; ['getComponentInlineStyle',
  'extractComponentStyle',
  'mapNativeEvents',
  'trimTextVNodes']
  .forEach(function (method) {
    weex$4[method] = core[method].bind(weex$4);
  });

weex$4.mixins = {
  inputCommon: inputCommon
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var _inited$1 = false;

var renderFunctionPlugin = {
  init: function init (weex) {
    if (_inited$1) {
      return
    }
    _inited$1 = true;
    var Vue = weex.__vue__;
    var _render = Vue.prototype._render;
    Vue.prototype._render = function () {
      var weexRender = this._weexRender;
      var tag = this.$options && this.$options._componentTag;
      if (
        !weexRender
        && !isDef(weex._components[tag])
      ) {
        var origRender = this.$options.render;
        weexRender = this._weexRender = function (h) {
          var args = [], len = arguments.length - 1;
          while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

          return origRender.call.apply(origRender, [ this, transformRender(this, h) ].concat( args ))
        };
        this.$options.render = weexRender;
      }
      return _render.call(this)
    };
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
if (global.Vue) {
  setVue(global.Vue);
}

function setVue (vue) {
  if (!vue) {
    throw new Error('[Vue Render] Vue not found. Please make sure vue 2.x runtime is imported.')
  }
  if (global.weex.__vue__) {
    return
  }
  global.weex.__vue__ = vue;
  weex.install(renderFunctionPlugin);
  console.log(("[Vue Render] install Vue " + (vue.version) + "."));
}

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * init weex.
 * @param  {Vue$2} Vue: Vue Constructor.
 * @param  {object} options: extend weex plugins.
 *         - components.
 *         - modules.
 */
var _inited = false;
function init (Vue/* options = {}*/) {
  if (_inited) { return }
  _inited = true;

  setVue(Vue);

  Vue.prototype.$getConfig = function () {
    console.warn('[Vue Render] "this.$getConfig" is deprecated, please use "weex.config" instead.');
    return weex.config
  };

  var htmlRegex = /^html:/i;
  Vue.config.isReservedTag = function (tag) { return htmlRegex.test(tag); };
  Vue.config.parsePlatformTagName = function (tag) { return tag.replace(htmlRegex, ''); };

  function isWeexTag (tag) {
    return typeof weex._components[tag] !== 'undefined'
  }
  var oldGetTagNamespace = Vue.config.getTagNamespace;
  Vue.config.getTagNamespace = function (tag) {
    if (isWeexTag(tag)) {
      return
    }
    return oldGetTagNamespace(tag)
  };

  Vue.mixin(base$1);
  Vue.mixin(event$1);
  Vue.mixin(style);
  Vue.mixin(sticky);
}

// auto init in dist mode.
if (typeof window !== 'undefined' && window.Vue) {
  init(window.Vue);
}

weex.init = init;

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * @fileOverview Input component.
 * Support v-model only if vue version is larger than 2.2.0
 */
var mapFormEvents$1;
var appendCss$1;

var ID_PREFIX_PLACEHOLDER_COLOR = 'wipt_plc_';
var ID_PREFIX_INPUT = 'wipt_';
var idCount = 0;

function setPlaceholderColor (inputVm, placeholderColor) {
  if (!placeholderColor) {
    return
  }
  var vendors = [
    '::-webkit-input-placeholder',
    ':-moz-placeholder',
    '::-moz-placeholder',
    ':-ms-input-placeholder',
    ':placeholder-shown'
  ];
  var id = inputVm._id;
  appendCss$1(
    vendors.map(function (vendor, idx) {
      return ("#" + ID_PREFIX_INPUT + id + (vendors[idx]) + "{color:" + placeholderColor + ";}")
    }).join(''),
    ("" + ID_PREFIX_PLACEHOLDER_COLOR + id),
    true);
}

function processStyle (vm) {
  var styles = getComponentInlineStyle(vm);
  var phColor = styles.placeholderColor || styles['placeholder-color'];
  if (phColor) {
    setPlaceholderColor(vm, phColor);
  }
  return styles
}

function getInput (weex) {
  var ref = weex.mixins;
  var inputCommon = ref.inputCommon;

  return {
    name: 'weex-input',
    mixins: [inputCommon],
    props: {
      type: {
        type: String,
        default: 'text',
        validator: function validator (value) {
          return [
            'email', 'number', 'password', 'search', 'tel', 'text', 'url', 'date',
            'datetime', 'time' ].indexOf(value) !== -1
        }
      },
      value: String,
      placeholder: String,
      disabled: {
        type: [String, Boolean],
        default: false
      },
      autofocus: {
        type: [String, Boolean],
        default: false
      },
      maxlength: [String, Number],
      returnKeyType: String
    },

    render: function render (createElement) {
      if (!this._id) {
        this._id = idCount++;
      }
      var events = mapFormEvents$1(this);
      return createElement('html:input', {
        attrs: {
          'weex-type': 'input',
          id: ("" + ID_PREFIX_INPUT + (this._id)),
          type: this.type,
          value: this.value,
          disabled: (this.disabled !== 'false' && this.disabled !== false),
          autofocus: (this.autofocus !== 'false' && this.autofocus !== false),
          placeholder: this.placeholder,
          maxlength: this.maxlength,
          'returnKeyType': this.returnKeyType
        },
        domProps: {
          value: this.value
        },
        on: this.createKeyboardEvent(events),
        staticClass: 'weex-input weex-el',
        staticStyle: processStyle(this)
      })
    }
  }
}

var input = {
  init: function init (weex) {
    mapFormEvents$1 = weex.utils.mapFormEvents;
    appendCss$1 = weex.utils.appendCss;

    weex.registerComponent('input', getInput(weex));
  }
};

__$styleInject("/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n.weex-switch {\n  border: 0.013333rem solid #dfdfdf;\n  cursor: pointer;\n  vertical-align: middle;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  -webkit-box-sizing: content-box;\n          box-sizing: content-box;\n  background-clip: content-box;\n  color: #64bd63;\n  width: 1.333333rem;\n  height: 0.8rem;\n  background-color: white;\n  border-color: #dfdfdf;\n  -webkit-box-shadow: #dfdfdf 0 0 0 0 inset;\n          box-shadow: #dfdfdf 0 0 0 0 inset;\n  border-radius: 0.8rem;\n  -webkit-transition: border 0.4s, background-color 1.2s, -webkit-box-shadow 0.4s;\n  transition: border 0.4s, background-color 1.2s, -webkit-box-shadow 0.4s;\n  transition: border 0.4s, box-shadow 0.4s, background-color 1.2s;\n  transition: border 0.4s, box-shadow 0.4s, background-color 1.2s, -webkit-box-shadow 0.4s;\n}\n\n.weex-switch-checked {\n  background-color: #64bd63;\n  border-color: #64bd63;\n  -webkit-box-shadow: #64bd63 0 0 0 0.533333rem inset;\n          box-shadow: #64bd63 0 0 0 0.533333rem inset;\n}\n\n.weex-switch-checked.weex-switch-disabled {\n  opacity: 0.3\n}\n\n.weex-switch-disabled {\n  background-color: #EEEEEE;\n}\n\n.weex-switch-inner {\n  width: 0.8rem;\n  height: 0.8rem;\n  background: #fff;\n  border-radius: 100%;\n  -webkit-box-shadow: 0 0.013333rem 0.04rem rgba(0, 0, 0, 0.4);\n          box-shadow: 0 0.013333rem 0.04rem rgba(0, 0, 0, 0.4);\n  position: absolute;\n  top: 0;\n  left: 0;\n  -webkit-transition: background-color 0.4s, left 0.2s;\n  transition: background-color 0.4s, left 0.2s;\n}\n\n.weex-switch-checked > .weex-switch-inner {\n  left: 0.533333rem;\n}\n",undefined);

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
function getSwitch (weex) {
  var extractComponentStyle = weex.extractComponentStyle;
  var ref = weex.utils;
  var dispatchNativeEvent = ref.dispatchNativeEvent;

  return {
    name: 'weex-switch',
    props: {
      checked: {
        type: [Boolean, String],
        default: false
      },
      disabled: {
        type: [Boolean, String],
        default: false
      },
      // Border color  when the switch is turned off
      tintColor: String,
      // Background color when the switch is turned on.
      onTintColor: String,
      // Color of the foreground switch grip.
      thumbTintColor: String
    },
    data: function data () {
      return {
        isChecked: (this.checked !== 'false' && this.checked !== false),
        isDisabled: (this.disabled !== 'false' && this.disabled !== false)
      }
    },
    computed: {
      wrapperClass: function wrapperClass () {
        var classArray = ['weex-el', 'weex-switch'];
        this.isChecked && classArray.push('weex-switch-checked');
        this.isDisabled && classArray.push('weex-switch-disabled');
        return classArray.join(' ')
      },
      mergeStyle: function mergeStyle () {
        var style = extractComponentStyle(this);
        var ref = this;
        var tintColor = ref.tintColor;
        var onTintColor = ref.onTintColor;
        var isChecked = ref.isChecked;
        var isDisabled = ref.isDisabled;

        if (!isChecked && tintColor) {
          Object.assign(style, {
            borderColor: tintColor,
            boxShadow: (tintColor + " 0 0 0 0 inset")
          });
        }

        if (isChecked && onTintColor) {
          Object.assign(style, {
            backgroundColor: onTintColor,
            color: onTintColor,
            borderColor: onTintColor,
            boxShadow: (onTintColor + " 0 0 0 0.533333rem inset")
          });
        }

        isDisabled && Object.assign(style, {
          opacity: 0.3
        });

        return style
      },
      smallStyle: function smallStyle () {
        var ref = this;
        var thumbTintColor = ref.thumbTintColor;
        var smallStyle = {};

        if (thumbTintColor) {
          smallStyle = {
            background: thumbTintColor
          };
        }
        return smallStyle
      }
    },
    methods: {
      toggle: function toggle () {
        // TODO: handle the events
        if (!this.isDisabled) {
          this.isChecked = !this.isChecked;
          dispatchNativeEvent(this.$el, 'change', { value: this.isChecked });
        }
      }
    },

    mounted: function mounted () {
      var this$1 = this;

      var el = this.$el;
      if (el && el.nodeType === 1) {
        if (!this._removeClickHandler) {
          var handler = function (evt) {
            this$1.toggle();
          };
          this._removeClickHandler = el.removeEventListener.bind(el, 'weex$tap', handler);
          el.addEventListener('weex$tap', handler);
        }
      }
    },

    beforeDestroy: function beforeDestroy () {
      var rm = this._removeClickHandler;
      if (rm) {
        rm();
        delete this._removeClickHandler;
      }
    },

    render: function render (createElement) {
      return createElement('span', {
        attrs: { 'weex-type': 'switch' },
        staticClass: this.wrapperClass,
        staticStyle: this.mergeStyle
      }, [createElement('small', {
        staticClass: 'weex-switch-inner',
        staticStyle: this.smallStyle
      })])
    }
  }
}

var _switch = {
  init: function init (weex) {
    weex.registerComponent('switch', getSwitch(weex));
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

var DEFAULT_OFFSET_ACCURACY = 10;
var DEFAULT_LOADMORE_OFFSET = 0;

function getThrottledScroll (context) {
  var scale = weex.config.env.scale;
  if (!context._throttleScroll) {
    var wrapper = context.$refs.wrapper;
    var inner = context.$refs.inner;
    var preOffset = (context.scrollDirection === 'horizontal'
      ? wrapper.scrollLeft
      : wrapper.scrollTop)
      || 0;
    context._throttleScroll = weex.utils.throttle(function (evt) {
      var offset = context.scrollDirection === 'horizontal'
        ? wrapper.scrollLeft
        : wrapper.scrollTop;
      var indent = parseInt(context.offsetAccuracy) * scale;
      function triggerScroll () {
        var rect = inner.getBoundingClientRect();
        var evtObj = {
          contentSize: { width: rect.width, height: rect.height },
          contentOffset: {
            x: wrapper.scrollLeft,
            /**
             * positive direciton for y-axis is down.
             * so should use negative operation on scrollTop.
             *
             *  (0,0)---------------> x
             *       |
             *       |
             *       |
             *       |
             *       v y
             *
             */
            y: -wrapper.scrollTop
          }
        };
        if (context.$el) {
          weex.utils.dispatchNativeEvent(context.$el, 'weex$scroll', evtObj);
        }
      }
      if (Math.abs(offset - preOffset) >= indent) {
        triggerScroll();
        preOffset = offset;
      }
    }, 16, true);
  }
  return context._throttleScroll
}

var scrollable$1 = {
  props: {
    loadmoreoffset: {
      type: [String, Number],
      default: DEFAULT_LOADMORE_OFFSET,
      validator: function validator (value) {
        var val = parseInt(value);
        return !isNaN(val) && val >= DEFAULT_LOADMORE_OFFSET
      }
    },

    offsetAccuracy: {
      type: [Number, String],
      default: DEFAULT_OFFSET_ACCURACY,
      validator: function validator (value) {
        var val = parseInt(value);
        return !isNaN(val) && val >= DEFAULT_OFFSET_ACCURACY
      }
    }
  },

  created: function created () {
    // should call resetLoadmore() to enable loadmore event.
    this._loadmoreReset = true;
  },

  mounted: function mounted () {
    this.reloadStickyChildren();
  },

  updated: function updated () {
    this.reloadStickyChildren();
  },

  methods: {
    updateLayout: function updateLayout () {
      var wrapper = this.$refs.wrapper;
      if (wrapper) {
        var rect = wrapper.getBoundingClientRect();
        this._wrapperWidth = rect.width;
        this._wrapperHeight = rect.height;
      }
      var inner = this.$refs.inner;
      var children = inner && inner.children;
      if (inner) {
        var rect$1 = inner.getBoundingClientRect();
        this._innerWidth = rect$1.width;
        this._innerHeight = rect$1.height;
      }
      var loadingEl = this._loading && this._loading.$el;
      var refreshEl = this._refresh && this._refresh.$el;
      if (loadingEl) {
        this._innerHeight -= loadingEl.getBoundingClientRect().height;
      }
      if (refreshEl) {
        this._innerHeight -= refreshEl.getBoundingClientRect().height;
      }
      // inner width is always the viewport width somehow in horizontal
      // scoller, therefore the inner width should be reclaculated.
      if (this.scrollDirection === 'horizontal' && children) {
        this._innerWidth = weex.utils.getRangeWidth(inner);
      }
    },

    resetLoadmore: function resetLoadmore () {
      this._loadmoreReset = true;
    },

    /**
     * process sticky children in scrollable components.
     * current only support list and vertical scroller.
     */
    processSticky: function processSticky () {
      var this$1 = this;

      /**
       * current browser support 'sticky' or '-webkit-sticky', so there's no need
       * to do further more.
       */
      var stickyChildren = this._stickyChildren;
      var len = stickyChildren && stickyChildren.length || 0;
      if (len <= 0) { return }

      var origSticky = weex.utils.supportSticky();
      // current only support list and vertical scroller.
      if (this.scrollDirection === 'horizontal') {
        return
      }

      var container = this.$el;
      if (!container) { return }
      var scrollTop = container.scrollTop;

      var stickyChild;
      for (var i = 0; i < len; i++) {
        stickyChild = stickyChildren[i];
        if (origSticky) {
          this$1.addSticky(stickyChild, origSticky);
        }
        else if (stickyChild._initOffsetTop < scrollTop) {
          this$1.addSticky(stickyChild);
        }
        else {
          this$1.removeSticky(stickyChild);
        }
      }
    },

    addSticky: function addSticky (el, supportSticky) {
      if (supportSticky) {
        el.classList.add('weex-ios-sticky');
      }
      else {
        if (el._sticky === true) { return }
        el._sticky = true;
        if (!el._placeholder) {
          var placeholder = el.cloneNode(true);
          placeholder._origNode = el;
          placeholder.classList.add('weex-sticky-placeholder');
          el._placeholder = placeholder;
        }
        el.parentNode.insertBefore(el._placeholder, el);
        el.style.width = window.getComputedStyle(el).width;
        el.classList.add('weex-sticky');
      }
    },

    removeSticky: function removeSticky (el) {
      if (
        typeof el._sticky === 'undefined'
        || el._sticky === false
      ) {
        return
      }
      el._sticky = false;
      el.parentNode.removeChild(el._placeholder);
      el.classList.remove('weex-sticky');
    },

    reloadStickyChildren: function reloadStickyChildren () {
      var container = this.$el;
      if (!container) { return }
      var stickyChildren = [];
      var children = container.querySelectorAll('[sticky]');
      for (var i = 0, l = children.length; i < l; i++) {
        var child = children[i];
        if (/weex-sticky-placeholder/.test(child.className)) {  // is a placeholder.
          var origNode = child._origNode;
          if (
            !origNode
            || !origNode.parentNode
            || origNode.parentNode !== child.parentNode
          ) {
            child.parentNode.removeChild(child);
          }
        }
        else {  // is a sticky node.
          stickyChildren.push(child);
          if (!child._sticky) {
            child._initOffsetTop = child.offsetTop;
          }
        }
      }
      this._stickyChildren = stickyChildren;
    },

    handleScroll: function handleScroll (event) {
      weex.utils.getThrottleLazyload(25, this.$el, 'scroll')();
      getThrottledScroll(this)(event);

      this.processSticky();

      // fire loadmore event.
      var inner = this.$refs.inner;
      if (inner) {
        var innerLength = this.scrollDirection === 'horizontal'
          ? this._innerWidth
          : this._innerHeight;
        if (!this._innerLength) {
          this._innerLength = innerLength;
        }
        if (this._innerLength !== innerLength) {
          this._innerLength = innerLength;
          this._loadmoreReset = true;
        }
        if (this._loadmoreReset && this.reachBottom(this.loadmoreoffset)) {
          this._loadmoreReset = false;
          var el = this.$el;
          if (el) {
            weex.utils.dispatchNativeEvent(el, 'loadmore');
          }
        }
      }
    },

    reachTop: function reachTop () {
      var wrapper = this.$refs.wrapper;
      return (!!wrapper) && (wrapper.scrollTop <= 0)
    },

    reachBottom: function reachBottom (offset) {
      var wrapper = this.$refs.wrapper;
      var inner = this.$refs.inner;
      offset = parseInt(offset || 0) * weex.config.env.scale;

      if (wrapper && inner) {
        var key = this.scrollDirection === 'horizontal'
          ? 'width'
          : 'height';
        var innerLength = this[("_inner" + (key[0].toUpperCase()) + (key.substr(1)))];
        var wrapperLength = this[("_wrapper" + (key[0].toUpperCase()) + (key.substr(1)))];
        var scrollOffset = this.scrollDirection === 'horizontal'
          ? wrapper.scrollLeft
          : wrapper.scrollTop;
        return scrollOffset >= innerLength - wrapperLength - offset
      }
      return false
    },

    handleTouchStart: function handleTouchStart (event) {
      if (this._loading || this._refresh) {
        var touch = event.changedTouches[0];
        this._touchParams = {
          reachTop: this.reachTop(),
          reachBottom: this.reachBottom(),
          startTouchEvent: touch,
          startX: touch.pageX,
          startY: touch.pageY,
          timeStamp: event.timeStamp
        };
      }
    },

    handleTouchMove: function handleTouchMove (event) {
      if (!this._touchParams || !this._refresh && !this._loading) {
        return
      }
      var inner = this.$refs.inner;
      var ref = this._touchParams;
      var startY = ref.startY;
      var reachTop = ref.reachTop;
      var reachBottom = ref.reachBottom;
      if (inner) {
        var touch = event.changedTouches[0];
        var offsetY = touch.pageY - startY;
        var dir = offsetY > 0 ? 'down' : 'up';
        this._touchParams.offsetY = offsetY;
        if (this._refresh && (dir === 'down') && reachTop) {
          this._refresh.pullingDown(offsetY);
        }
        else if (this._loading && (dir === 'up') && reachBottom) {
          this._loading.pullingUp(-offsetY);
        }
      }
    },

    handleTouchEnd: function handleTouchEnd (event) {
      if (!this._touchParams || !this._refresh && !this._loading) {
        return
      }
      var inner = this.$refs.inner;
      var ref = this._touchParams;
      var startY = ref.startY;
      var reachTop = ref.reachTop;
      var reachBottom = ref.reachBottom;
      if (inner) {
        var touch = event.changedTouches[0];
        var offsetY = touch.pageY - startY;
        var dir = offsetY > 0 ? 'down' : 'up';
        this._touchParams.offsetY = offsetY;
        if (this._refresh && (dir === 'down') && reachTop) {
          this._refresh.pullingEnd();
        }
        else if (this._loading && (dir === 'up') && reachBottom) {
          this._loading.pullingEnd();
        }
      }
      delete this._touchParams;
    }
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
function getList (weex) {
  var extractComponentStyle = weex.extractComponentStyle;

  return {
    name: 'weex-list',
    mixins: [scrollable$1],
    computed: {
      wrapperClass: function wrapperClass () {
        var classArray = ['weex-list', 'weex-list-wrapper', 'weex-ct'];
        this._refresh && classArray.push('with-refresh');
        this._loading && classArray.push('with-loading');
        return classArray.join(' ')
      }
    },

    methods: {
      createChildren: function createChildren (h) {
        var slots = this.$slots.default || [];
        this._cells = slots.filter(function (vnode) {
          if (!vnode.tag && !vnode.componentOptions) { return false }
          return true
        });
        return [
          h('article', {
            ref: 'inner',
            staticClass: 'weex-list-inner weex-ct'
          }, this._cells)
        ]
      }
    },

    render: function render (createElement) {
      var this$1 = this;

      this.weexType = 'list';

      this.$nextTick(function () {
        this$1.updateLayout();
      });

      return createElement('main', {
        ref: 'wrapper',
        attrs: { 'weex-type': 'list' },
        staticClass: this.wrapperClass,
        on: {
          scroll: this.handleScroll,
          touchstart: this.handleTouchStart,
          touchmove: this.handleTouchMove,
          touchend: this.handleTouchEnd
        },
        staticStyle: extractComponentStyle(this)
      }, this.createChildren(createElement))
    }
  }
}

var list = {
  init: function init (weex) {
    weex.registerComponent('list', getList(weex));
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

function getScroller (weex) {
  var extractComponentStyle = weex.extractComponentStyle;

  return {
    name: 'weex-scroller',
    mixins: [scrollable$1],
    props: {
      scrollDirection: {
        type: [String],
        default: 'vertical',
        validator: function validator (value) {
          return ['horizontal', 'vertical'].indexOf(value) !== -1
        }
      },
      scrollable: {
        type: [Boolean],
        default: true
      }
    },
    computed: {
      wrapperClass: function wrapperClass () {
        var classArray = ['weex-scroller', 'weex-scroller-wrapper', 'weex-ct'];
        if (this.scrollDirection === 'horizontal') {
          classArray.push('weex-scroller-horizontal');
        }
        else {
          classArray.push('weex-scroller-vertical');
        }
        if (!this.scrollable) {
          classArray.push('weex-scroller-disabled');
        }
        return classArray.join(' ')
      }
    },

    methods: {
      createChildren: function createChildren (h) {
        var slots = this.$slots.default || [];
        this._cells = slots.filter(function (vnode) {
          if (!vnode.tag && !vnode.componentOptions) { return false }
          return true
        });
        return [
          h('article', {
            ref: 'inner',
            staticClass: 'weex-scroller-inner weex-ct'
          }, this._cells)
        ]
      }
    },

    render: function render (createElement) {
      var this$1 = this;

      this.weexType = 'scroller';

      /* istanbul ignore next */
      // if ("production" === 'development') {
      //   validateStyles('scroller', this.$vnode.data && this.$vnode.data.staticStyle)
      // }

      this._cells = this.$slots.default || [];
      this.$nextTick(function () {
        this$1.updateLayout();
      });

      return createElement('main', {
        ref: 'wrapper',
        attrs: { 'weex-type': 'scroller' },
        on: {
          scroll: this.handleScroll,
          touchstart: this.handleTouchStart,
          touchmove: this.handleTouchMove,
          touchend: this.handleTouchEnd
        },
        staticClass: this.wrapperClass,
        staticStyle: extractComponentStyle(this)
      }, this.createChildren(createElement))
    }
  }
}

var scroller = {
  init: function init (weex) {
    weex.registerComponent('scroller', getScroller(weex));
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND,  either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * @fileoverview waterfall
 * NOTE: only support full screen width waterfall.
 */

var NORMAL_GAP_SIZE = 32;
var DEFAULT_COLUMN_COUNT = 1;

function getWaterfall (weex) {
  var extractComponentStyle = weex.extractComponentStyle;

  return {
    name: 'weex-waterfall',
    mixins: [scrollable$1],
    props: {
      /**
       * specified gap size.
       * value can be number or 'normal'. 'normal' (32px) by default.
       */
      columnGap: {
        type: [String, Number],
        default: 'normal',
        validator: function validator (val) {
          if (!val || val === 'normal') {
            return true
          }
          val = parseInt(val);
          return !isNaN(val) && val > 0
        }
      },
      /**
       * the maximum column counts.
       * value can be number or 'auto'. 1 by default.
       */
      columnCount: {
        type: [String, Number],
        default: DEFAULT_COLUMN_COUNT,
        validator: function validator (val) {
          val = parseInt(val);
          return !isNaN(val) && val > 0
        }
      },
      /**
       * the mimimum column width.
       * value can be number or 'auto'. 'auto' by default.
       */
      columnWidth: {
        type: [String, Number],
        default: 'auto',
        validator: function validator (val) {
          if (!val || val === 'auto') {
            return true
          }
          val = parseInt(val);
          return !isNaN(val) && val > 0
        }
      }
    },

    mounted: function mounted () {
      this._nextTick();
    },

    updated: function updated () {
      this.$nextTick(this._nextTick());
    },

    methods: {
      _createChildren: function _createChildren (h, rootStyle) {
        var this$1 = this;

        var slots = (this.$slots.default || []).slice();
        this._headers = [];
        this._footers = [];
        this._others = [];
        var len = slots.length;

        for (var i = 0; i < len; i++) {
          var vnode = slots[i];
          var tag =
            vnode.componentOptions
            && vnode.componentOptions.tag
            || vnode.tag;
          if (tag === 'refresh' || tag === 'loading') {
            continue
          }
          if (tag === 'section') {  // cell
            break
          }
          if (tag === 'header') {
            this$1._headers.push(vnode);
            slots[i] = null; // should not included in footer.
          }
        }

        for (var i$1 = len - 1; i$1 >= 0; i$1--) {
          var vnode$1 = slots[i$1];
          if (!vnode$1) { continue }  // already taken by header.
          var tag$1 =
            vnode$1.componentOptions
            && vnode$1.componentOptions.tag
            || vnode$1.tag;
          if (tag$1 === 'refresh' || tag$1 === 'loading') {
            continue
          }
          if (tag$1 === 'section') { // cell
            break
          }
          if (tag$1 === 'header') {
            this$1._footers.push(vnode$1);
          }
        }

        this._cells = slots.filter(function (vnode) {
          if (!vnode) { return false }
          var cmpOpts = vnode.componentOptions;
          if (!vnode.tag && !cmpOpts) { return false }
          var tag = cmpOpts && cmpOpts.tag || vnode.tag;
          if (tag === 'refresh' || tag === 'loading') {
            this$1[("_" + tag)] = vnode;
            return false
          }
          if (tag !== 'section') {
            this$1._others.push(vnode);
            return false
          }
          return true
        });

        this._reCalc(rootStyle);
        this._genColumns(h);
        var children = [];
        this._refresh && children.push(this._refresh);
        children = children.concat(this._headers);
        // .concat(this._others)
        children.push(h('html:div', {
          ref: 'columns',
          staticClass: 'weex-waterfall-inner-columns weex-ct'
        }, this._columns));
        children.push(h('html:div', {
          ref: 'footers',
          staticClass: 'weex-waterfall-footers weex-ct'
        }, this._footers));
        this._loading && children.push(this._loading);
        return [
          h('article', {
            ref: 'inner',
            staticClass: 'weex-waterfall-inner weex-ct'
          }, children)
        ]
      },

      _reCalc: function _reCalc (rootStyle) {
        /**
         * NOTE: columnGap and columnWidth can't both be auto.
         * NOTE: the formula:
         *  totalWidth = n * w + (n - 1) * gap
         * 1. if columnCount = n then calc w
         * 2. if columnWidth = w then calc n
         * 3. if columnWidth = w and columnCount = n then calc totalWidth
         *    3.1 if totalWidth < ctWidth then increase columnWidth
         *    3.2 if totalWidth > ctWidth then decrease columnCount
         */
        var width, gap, cnt, ctWidth;
        var scale = weex.config.env.scale;
        var el = this.$el;
        function getCtWidth (width, style) {
          var padding = style.padding
            ? parseInt(style.padding) * 2
            : parseInt(style.paddingLeft || 0) + parseInt(style.paddingRight || 0);
          return width - padding
        }
        if (el && el.nodeType === 1) { // already mounted
          var cstyle = window.getComputedStyle(el);
          ctWidth = getCtWidth(el.getBoundingClientRect().width, cstyle);
        }
        else { // not mounted.
          // only support full screen width for waterfall component.
          ctWidth = getCtWidth(document.documentElement.clientWidth, rootStyle);
        }

        gap = this.columnGap;
        if (gap && gap !== 'normal') {
          gap = parseInt(gap);
        }
        else {
          gap = NORMAL_GAP_SIZE;
        }
        gap = gap * scale;

        width = this.columnWidth;
        cnt = this.columnCount;
        if (width && width !== 'auto') {
          width = parseInt(width) * scale;
        }
        if (cnt && cnt !== 'auto') {
          cnt = parseInt(cnt);
        }

        // 0. if !columnCount && !columnWidth
        if (cnt === 'auto' && width === 'auto') {
          
        }
        // 1. if columnCount = n then calc w.
        else if (cnt !== 'auto' && width === 'auto') {
          width = (ctWidth - (cnt - 1) * gap) / cnt;
        }
        // 2. if columnWidth = w then calc n.
        else if (cnt === 'auto' && width !== 'auto') {
          cnt = (ctWidth + gap) / (width + gap);
        }
        // 3. if columnWidth = w and columnCount = n then calc totalWidth
        else if (cnt !== 'auto' && width !== 'auto') {
          var totalWidth;
          var adjustCountAndWidth = function () {
            totalWidth = cnt * width + (cnt - 1) * gap;
            if (totalWidth < ctWidth) {
              width += (ctWidth - totalWidth) / cnt;
            }
            else if (totalWidth > ctWidth && cnt > 1) {
              cnt--;
              adjustCountAndWidth();
            }
            else if (totalWidth > ctWidth) {  // cnt === 1
              width = ctWidth;
            }
          };
          adjustCountAndWidth();
        }
        this._columnCount = cnt;
        this._columnWidth = width;
        this._columnGap = gap;
      },

      _genColumns: function _genColumns (createElement) {
        var this$1 = this;

        this._columns = [];
        var cells = this._cells;
        var columnCnt = this._columnCount;
        var len = cells.length;
        var columnCells = this._columnCells = Array(columnCnt).join('.').split('.').map(function () { return [] });
        // spread cells to the columns using simpole polling algorithm.
        for (var i = 0; i < len; i++) {
          (cells[i].data.attrs || (cells[i].data.attrs = {}))['data-cell'] = i;
          columnCells[i % columnCnt].push(cells[i]);
        }
        for (var i$1 = 0; i$1 < columnCnt; i$1++) {
          this$1._columns.push(createElement('html:div', {
            ref: ("column" + i$1),
            attrs: {
              'data-column': i$1
            },
            staticClass: 'weex-ct',
            staticStyle: {
              width: this$1._columnWidth + 'px',
              marginLeft: i$1 === 0 ? 0 : this$1._columnGap + 'px'
            }
          }, columnCells[i$1]));
        }
      },

      _nextTick: function _nextTick () {
        this._reLayoutChildren();
      },

      _reLayoutChildren: function _reLayoutChildren () {
        var this$1 = this;

        /**
         * treat the shortest column bottom as the match standard.
         * whichever cell exceeded it would be rearranged.
         * 1. m = shortest column bottom.
         * 2. get all cell ids who is below m.
         * 3. calculate which cell should be in which column.
         */
        var columnCnt = this._columnCount;
        var columnDoms = [];
        var columnAppendFragments = [];
        var columnBottoms = [];
        var minBottom = Number.MAX_SAFE_INTEGER;
        var minBottomColumnIndex = 0;

        // 1. find the shortest column bottom.
        for (var i = 0; i < columnCnt; i++) {
          var columnDom = this$1._columns[i].elm;
          var lastChild = columnDom.lastElementChild;
          var bottom = lastChild ? lastChild.getBoundingClientRect().bottom : 0;
          columnDoms.push(columnDom);
          columnBottoms[i] = bottom;
          columnAppendFragments.push(document.createDocumentFragment());
          if (bottom < minBottom) {
            minBottom = bottom;
            minBottomColumnIndex = i;
          }
        }

        // 2. get all cell ids who is below m.
        var belowCellIds = [];
        var belowCells = {};
        for (var i$1 = 0; i$1 < columnCnt; i$1++) {
          if (i$1 === minBottomColumnIndex) {
            continue
          }
          var columnDom$1 = columnDoms[i$1];
          var cellsInColumn = columnDom$1.querySelectorAll('section.weex-cell');
          var len = cellsInColumn.length;
          for (var j = len - 1; j >= 0; j--) {
            var cellDom = cellsInColumn[j];
            var cellRect = cellDom.getBoundingClientRect();
            if (cellRect.top > minBottom) {
              var id = ~~cellDom.getAttribute('data-cell');
              belowCellIds.push(id);
              belowCells[id] = { elm: cellDom, height: cellRect.height };
              columnBottoms[i$1] -= cellRect.height;
            }
          }
        }

        // 3. calculate which cell should be in which column and rearrange them
        //  in the dom tree.
        belowCellIds.sort(function (a, b) { return a > b });
        var cellIdsLen = belowCellIds.length;
        function addToShortestColumn (belowCell) {
          // find shortest bottom.
          minBottom = Math.min.apply(Math, columnBottoms);
          minBottomColumnIndex = columnBottoms.indexOf(minBottom);
          var cellElm = belowCell.elm;
          var cellHeight = belowCell.height;
          columnAppendFragments[minBottomColumnIndex].appendChild(cellElm);
          columnBottoms[minBottomColumnIndex] += cellHeight;
        }
        for (var i$2 = 0; i$2 < cellIdsLen; i$2++) {
          addToShortestColumn(belowCells[belowCellIds[i$2]]);
        }
        for (var i$3 = 0; i$3 < columnCnt; i$3++) {
          columnDoms[i$3].appendChild(columnAppendFragments[i$3]);
        }
      }
    },

    render: function render (createElement) {
      var this$1 = this;

      this.weexType = 'waterfall';
      this._cells = this.$slots.default || [];
      this.$nextTick(function () {
        this$1.updateLayout();
      });
      var mergedStyle = extractComponentStyle(this);
      return createElement('main', {
        ref: 'wrapper',
        attrs: { 'weex-type': 'waterfall' },
        on: {
          scroll: this.handleScroll,
          touchstart: this.handleTouchStart,
          touchmove: this.handleTouchMove,
          touchend: this.handleTouchEnd
        },
        staticClass: 'weex-waterfall weex-waterfall-wrapper weex-ct',
        staticStyle: mergedStyle
      }, this._createChildren(createElement, mergedStyle))
    }
  }
}

var waterfall = {
  init: function init (weex) {
    weex.registerComponent('waterfall', getWaterfall(weex));
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

function getHeader (weex) {
  var extractComponentStyle = weex.extractComponentStyle;

  return {
    render: function render (createElement) {
      var attrs = this.$vnode.data.attrs;
      return createElement('html:header', {
        attrs: {
          'weex-type': 'header',
          sticky: (
            this.$parent.weexType === 'waterfall'
            && typeof attrs.sticky === 'undefined'
          ) ? undefined : ''
        },
        ref: 'header',
        staticClass: 'weex-header weex-ct',
        staticStyle: extractComponentStyle(this)
      }, this.$slots.default)
    }
  }
}

var header = {
  init: function init (weex) {
    weex.registerComponent('header', getHeader(weex));
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

function getLoading () {
  var extractComponentStyle = weex.extractComponentStyle;
  var ref = weex.utils;
  var dispatchNativeEvent = ref.dispatchNativeEvent;

  return {
    name: 'weex-loading',
    props: {
      display: {
        type: String,
        default: 'show',
        validator: function validator (value) {
          return ['show', 'hide'].indexOf(value) !== -1
        }
      }
    },
    data: function data () {
      return {
        height: -1,
        viewHeight: 0
      }
    },
    mounted: function mounted () {
      this.viewHeight = this.$el.offsetHeight;
      if (this.display === 'hide') {
        this.height = 0;
      }
      else {
        this.height = this.viewHeight;
      }
    },
    watch: {
      height: function height (val) {
        var offset = val + "px";
        this.$el.style.height = offset;
        this.$el.style.bottom = offset;
      },
      display: function display (val) {
        if (val === 'hide') {
          this.height = 0;
        }
        else {
          this.height = this.viewHeight;
        }
      }
    },
    methods: {
      pulling: function pulling (offsetY) {
        if ( offsetY === void 0 ) offsetY = 0;

        this.height = offsetY;
      },
      pullingUp: function pullingUp (offsetY) {
        this.$el.style.transition = "height 0s";
        this.pulling(offsetY);
      },
      pullingEnd: function pullingEnd () {
        this.$el && (this.$el.style.transition = "height .2s");
        if (this.height >= this.viewHeight) {
          this.pulling(this.viewHeight);
          if (this.$el) {
            dispatchNativeEvent(this.$el, 'loading');
          }
        }
        else {
          this.pulling(0);
        }
      },
      getChildren: function getChildren () {
        var children = this.$slots.default || [];
        if (this.display === 'show') {
          return children
        }
        return children.filter(function (vnode) {
          return vnode.componentOptions
            && vnode.componentOptions.tag !== 'loading-indicator'
        })
      }
    },
    render: function render (createElement) {
      this.$parent._loading = this;
      return createElement('aside', {
        ref: 'loading',
        attrs: { 'weex-type': 'loading' },
        staticClass: 'weex-loading weex-ct',
        staticStyle: extractComponentStyle(this)
      }, this.getChildren())
    }
  }
}

var loading = {
  init: function init (weex) {
    weex.registerComponent('loading', getLoading(weex));
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

function getRefresh (weex) {
  var extractComponentStyle = weex.extractComponentStyle;
  var ref = weex.utils;
  var dispatchNativeEvent = ref.dispatchNativeEvent;

  return {
    name: 'weex-refresh',
    props: {
      display: {
        type: String,
        default: 'show',
        validator: function validator (value) {
          return ['show', 'hide'].indexOf(value) !== -1
        }
      }
    },
    data: function data () {
      return {
        lastDy: 0,
        viewHeight: 0,
        height: -1
      }
    },
    mounted: function mounted () {
      this.viewHeight = this.$el.offsetHeight;
      if (this.display === 'hide') {
        this.height = 0;
      }
      else {
        this.height = this.viewHeight;
      }
    },
    watch: {
      height: function height (val) {
        this.$el.style.height = val + "px";
      },
      display: function display (val) {
        if (val === 'hide') {
          this.height = 0;
        }
        else {
          this.height = this.viewHeight;
        }
      }
    },
    methods: {
      pulling: function pulling (offsetY) {
        if ( offsetY === void 0 ) offsetY = 0;

        this.height = offsetY;
        if (this.$el) {
          dispatchNativeEvent(this.$el, 'pullingdown', {
            dy: offsetY - this.lastDy,
            pullingDistance: offsetY,
            viewHeight: this.viewHeight
          });
        }
        this.lastDy = offsetY;
      },
      pullingDown: function pullingDown (offsetY) {
        this.$el.style.transition = "height 0s";
        this.pulling(offsetY);
      },
      pullingEnd: function pullingEnd () {
        this.$el && (this.$el.style.transition = "height .2s");
        if (this.height >= this.viewHeight) {
          this.pulling(this.viewHeight);
          if (this.$el) {
            dispatchNativeEvent(this.$el, 'refresh');
          }
        }
        else {
          this.pulling(0);
        }
      },
      getChildren: function getChildren () {
        var children = this.$slots.default || [];
        if (this.display === 'show') {
          return children
        }
        return children.filter(function (vnode) {
          return vnode.componentOptions
            && vnode.componentOptions.tag !== 'loading-indicator'
        })
      }
    },
    render: function render (createElement) {
      this.$parent._refresh = this;
      return createElement('aside', {
        ref: 'refresh',
        attrs: { 'weex-type': 'refresh' },
        staticClass: 'weex-refresh weex-ct',
        staticStyle: extractComponentStyle(this)
      }, this.getChildren())
    }
  }
}

var refresh = {
  init: function init (weex) {
    weex.registerComponent('refresh', getRefresh(weex));
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var extractComponentStyle$1;
var getRgb$1;
var loopArray$1;
var getStyleSheetById$1;

var _css = "\n.weex-refresh-indicator,\n.weex-loading-indicator {\n  width: 1rem !important;\n  height: 1rem !important;\n  -webkit-box-align: center;\n  -moz-box-align: center;\n  -webkit-align-items: center;\n  -ms-flex-align: center;\n  align-items: center;\n  -webkit-box-pack: center;\n  -moz-box-pack: center;\n  -webkit-justify-content: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  overflow: visible;\n  background: none;\n}\n.weex-refresh-indicator:before,\n.weex-loading-indicator:before {\n  display: block;\n  content: '';\n  font-size: 0.16rem;\n  width: 0.5em;\n  height: 0.5em;\n  left: 0;\n  top: 0;\n  border-radius: 50%;\n  position: relative;\n  text-indent: -9999em;\n  -webkit-animation: weex-spinner 1.1s infinite ease;\n  -moz-animation: weex-spinner 1.1s infinite ease;\n  animation: weex-spinner 1.1s infinite ease;\n}\n\n@-webkit-keyframes weex-spinner {\n  0%,\n  100% {\n    box-shadow: 0em -1.3em 0em 0em #ffffff, 0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2), 1.25em 0em 0 0em rgba(255, 255, 255, 0.2), 0.875em 0.875em 0 0em rgba(255, 255, 255, 0.2), 0em 1.25em 0 0em rgba(255, 255, 255, 0.2), -0.9em 0.9em 0 0em rgba(255, 255, 255, 0.2), -1.3em 0em 0 0em rgba(255, 255, 255, 0.5), -0.9em -0.9em 0 0em rgba(255, 255, 255, 0.7);\n  }\n  11.25% {\n    box-shadow: 0em -1.3em 0em 0em rgba(255, 255, 255, 0.7), 0.9em -0.9em 0 0em #ffffff, 1.25em 0em 0 0em rgba(255, 255, 255, 0.2), 0.875em 0.875em 0 0em rgba(255, 255, 255, 0.2), 0em 1.25em 0 0em rgba(255, 255, 255, 0.2), -0.9em 0.9em 0 0em rgba(255, 255, 255, 0.2), -1.3em 0em 0 0em rgba(255, 255, 255, 0.2), -0.9em -0.9em 0 0em rgba(255, 255, 255, 0.5);\n  }\n  25% {\n    box-shadow: 0em -1.3em 0em 0em rgba(255, 255, 255, 0.5), 0.9em -0.9em 0 0em rgba(255, 255, 255, 0.7), 1.25em 0em 0 0em #ffffff, 0.875em 0.875em 0 0em rgba(255, 255, 255, 0.2), 0em 1.25em 0 0em rgba(255, 255, 255, 0.2), -0.9em 0.9em 0 0em rgba(255, 255, 255, 0.2), -1.3em 0em 0 0em rgba(255, 255, 255, 0.2), -0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2);\n  }\n  37.5% {\n    box-shadow: 0em -1.3em 0em 0em rgba(255, 255, 255, 0.2), 0.9em -0.9em 0 0em rgba(255, 255, 255, 0.5), 1.25em 0em 0 0em rgba(255, 255, 255, 0.7), 0.875em 0.875em 0 0em #ffffff, 0em 1.25em 0 0em rgba(255, 255, 255, 0.2), -0.9em 0.9em 0 0em rgba(255, 255, 255, 0.2), -1.3em 0em 0 0em rgba(255, 255, 255, 0.2), -0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2);\n  }\n  50% {\n    box-shadow: 0em -1.3em 0em 0em rgba(255, 255, 255, 0.2), 0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2), 1.25em 0em 0 0em rgba(255, 255, 255, 0.5), 0.875em 0.875em 0 0em rgba(255, 255, 255, 0.7), 0em 1.25em 0 0em #ffffff, -0.9em 0.9em 0 0em rgba(255, 255, 255, 0.2), -1.3em 0em 0 0em rgba(255, 255, 255, 0.2), -0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2);\n  }\n  61.25% {\n    box-shadow: 0em -1.3em 0em 0em rgba(255, 255, 255, 0.2), 0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2), 1.25em 0em 0 0em rgba(255, 255, 255, 0.2), 0.875em 0.875em 0 0em rgba(255, 255, 255, 0.5), 0em 1.25em 0 0em rgba(255, 255, 255, 0.7), -0.9em 0.9em 0 0em #ffffff, -1.3em 0em 0 0em rgba(255, 255, 255, 0.2), -0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2);\n  }\n  75% {\n    box-shadow: 0em -1.3em 0em 0em rgba(255, 255, 255, 0.2), 0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2), 1.25em 0em 0 0em rgba(255, 255, 255, 0.2), 0.875em 0.875em 0 0em rgba(255, 255, 255, 0.2), 0em 1.25em 0 0em rgba(255, 255, 255, 0.5), -0.9em 0.9em 0 0em rgba(255, 255, 255, 0.7), -1.3em 0em 0 0em #ffffff, -0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2);\n  }\n  87.5% {\n    box-shadow: 0em -1.3em 0em 0em rgba(255, 255, 255, 0.2), 0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2), 1.25em 0em 0 0em rgba(255, 255, 255, 0.2), 0.875em 0.875em 0 0em rgba(255, 255, 255, 0.2), 0em 1.25em 0 0em rgba(255, 255, 255, 0.2), -0.9em 0.9em 0 0em rgba(255, 255, 255, 0.5), -1.3em 0em 0 0em rgba(255, 255, 255, 0.7), -0.9em -0.9em 0 0em #ffffff;\n  }\n}\n\n@keyframes weex-spinner {\n  0%,\n  100% {\n    box-shadow: 0em -1.3em 0em 0em #ffffff, 0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2), 1.25em 0em 0 0em rgba(255, 255, 255, 0.2), 0.875em 0.875em 0 0em rgba(255, 255, 255, 0.2), 0em 1.25em 0 0em rgba(255, 255, 255, 0.2), -0.9em 0.9em 0 0em rgba(255, 255, 255, 0.2), -1.3em 0em 0 0em rgba(255, 255, 255, 0.5), -0.9em -0.9em 0 0em rgba(255, 255, 255, 0.7);\n  }\n  11.25% {\n    box-shadow: 0em -1.3em 0em 0em rgba(255, 255, 255, 0.7), 0.9em -0.9em 0 0em #ffffff, 1.25em 0em 0 0em rgba(255, 255, 255, 0.2), 0.875em 0.875em 0 0em rgba(255, 255, 255, 0.2), 0em 1.25em 0 0em rgba(255, 255, 255, 0.2), -0.9em 0.9em 0 0em rgba(255, 255, 255, 0.2), -1.3em 0em 0 0em rgba(255, 255, 255, 0.2), -0.9em -0.9em 0 0em rgba(255, 255, 255, 0.5);\n  }\n  25% {\n    box-shadow: 0em -1.3em 0em 0em rgba(255, 255, 255, 0.5), 0.9em -0.9em 0 0em rgba(255, 255, 255, 0.7), 1.25em 0em 0 0em #ffffff, 0.875em 0.875em 0 0em rgba(255, 255, 255, 0.2), 0em 1.25em 0 0em rgba(255, 255, 255, 0.2), -0.9em 0.9em 0 0em rgba(255, 255, 255, 0.2), -1.3em 0em 0 0em rgba(255, 255, 255, 0.2), -0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2);\n  }\n  37.5% {\n    box-shadow: 0em -1.3em 0em 0em rgba(255, 255, 255, 0.2), 0.9em -0.9em 0 0em rgba(255, 255, 255, 0.5), 1.25em 0em 0 0em rgba(255, 255, 255, 0.7), 0.875em 0.875em 0 0em #ffffff, 0em 1.25em 0 0em rgba(255, 255, 255, 0.2), -0.9em 0.9em 0 0em rgba(255, 255, 255, 0.2), -1.3em 0em 0 0em rgba(255, 255, 255, 0.2), -0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2);\n  }\n  50% {\n    box-shadow: 0em -1.3em 0em 0em rgba(255, 255, 255, 0.2), 0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2), 1.25em 0em 0 0em rgba(255, 255, 255, 0.5), 0.875em 0.875em 0 0em rgba(255, 255, 255, 0.7), 0em 1.25em 0 0em #ffffff, -0.9em 0.9em 0 0em rgba(255, 255, 255, 0.2), -1.3em 0em 0 0em rgba(255, 255, 255, 0.2), -0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2);\n  }\n  61.25% {\n    box-shadow: 0em -1.3em 0em 0em rgba(255, 255, 255, 0.2), 0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2), 1.25em 0em 0 0em rgba(255, 255, 255, 0.2), 0.875em 0.875em 0 0em rgba(255, 255, 255, 0.5), 0em 1.25em 0 0em rgba(255, 255, 255, 0.7), -0.9em 0.9em 0 0em #ffffff, -1.3em 0em 0 0em rgba(255, 255, 255, 0.2), -0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2);\n  }\n  75% {\n    box-shadow: 0em -1.3em 0em 0em rgba(255, 255, 255, 0.2), 0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2), 1.25em 0em 0 0em rgba(255, 255, 255, 0.2), 0.875em 0.875em 0 0em rgba(255, 255, 255, 0.2), 0em 1.25em 0 0em rgba(255, 255, 255, 0.5), -0.9em 0.9em 0 0em rgba(255, 255, 255, 0.7), -1.3em 0em 0 0em #ffffff, -0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2);\n  }\n  87.5% {\n    box-shadow: 0em -1.3em 0em 0em rgba(255, 255, 255, 0.2), 0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2), 1.25em 0em 0 0em rgba(255, 255, 255, 0.2), 0.875em 0.875em 0 0em rgba(255, 255, 255, 0.2), 0em 1.25em 0 0em rgba(255, 255, 255, 0.2), -0.9em 0.9em 0 0em rgba(255, 255, 255, 0.5), -1.3em 0em 0 0em rgba(255, 255, 255, 0.7), -0.9em -0.9em 0 0em #ffffff;\n  }\n}\n";

function getStyleSheet (spinnerVm) {
  if (spinnerVm._styleSheet) {
    return
  }
  spinnerVm._styleSheet = getStyleSheetById$1('weex-cmp-loading-indicator');
}

function setKeyframeColor (spinnerVm, val) {
  getStyleSheet(spinnerVm);
  var keyframeRules = computeKeyFrameRules(val);
  var rules = spinnerVm._styleSheet.rules || spinnerVm._styleSheet.cssRules;
  for (var i = 0, l = rules.length; i < l; i++) {
    var item = rules.item(i);
    if ((item.type === CSSRule.KEYFRAMES_RULE
          || item.type === CSSRule.WEBKIT_KEYFRAMES_RULE)
        && item.name === 'weex-spinner') {
      var cssRules = item.cssRules;
      for (var j = 0, m = cssRules.length; j < m; j++) {
        var keyframe = cssRules[j];
        if (keyframe.type === CSSRule.KEYFRAME_RULE
          || keyframe.type === CSSRule.WEBKIT_KEYFRAME_RULE) {
          keyframe.style.boxShadow = keyframeRules[j];
        }
      }
    }
  }
}

function computeKeyFrameRules (rgb) {
  if (!rgb) {
    return
  }
  var scaleArr = [
    '0em -1.3em 0em 0em',
    '0.9em -0.9em 0 0em',
    '1.25em 0em 0 0em',
    '0.875em 0.875em 0 0em',
    '0em 1.25em 0 0em',
    '-0.9em 0.9em 0 0em',
    '-1.3em 0em 0 0em',
    '-0.9em -0.9em 0 0em'];
  var colorArr = [
    '1',
    '0.2',
    '0.2',
    '0.2',
    '0.2',
    '0.2',
    '0.5',
    '0.7']
    .map(function (e) {
      return 'rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ',' + e + ')'
    });
  var rules = [];
  var loop = function ( i ) {
    var tmpColorArr = loopArray$1(colorArr, i, 'r');
    rules.push(scaleArr.map(function (scaleStr, i) {
      return scaleStr + ' ' + tmpColorArr[i]
    }).join(', '));
  };

  for (var i = 0; i < scaleArr.length; i++) loop( i );
  return rules
}

function processStyle$1 (vm) {
  var style = extractComponentStyle$1(vm);
  var color = style.color;
  var rgb = color && getRgb$1(color);
  if (rgb) {
    setKeyframeColor(vm, rgb);
  }
  return style
}

var loadingIndicator = {
  name: 'weex-loading-indicator',
  render: function render (createElement) {
    this.weexType = 'loading-indicator';
    return createElement('mark', {
      attrs: { 'weex-type': 'loading-indicator' },
      staticClass: 'weex-loading-indicator weex-ct',
      staticStyle: processStyle$1(this)
    })
  },
  _css: _css
};

var loadingIndicator$1 = {
  init: function init (weex) {
    extractComponentStyle$1 = weex.extractComponentStyle;
    getRgb$1 = weex.utils.getRgb;
    loopArray$1 = weex.utils.loopArray;
    getStyleSheetById$1 = weex.utils.getStyleSheetById;
    weex.registerComponent('loading-indicator', loadingIndicator);
  }
};

__$styleInject("/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nbody > .weex-list,\nbody > .weex-scroller,\nbody > .weex-waterfall {\n  max-height: 100%;\n}\n\n.weex-list-wrapper,\n.weex-scroller-wrapper,\n.weex-waterfall-wrapper {\n  -webkit-overflow-scrolling: touch;\n}\n\n.weex-list-wrapper,\n.weex-waterfall-wrapper {\n  overflow-y: scroll !important;\n  overflow-x: hidden !important;\n}\n\n.weex-list-inner,\n.weex-scroller-inner,\n.weex-waterfall-inner {\n  -webkit-overflow-scrolling: touch;\n}\n\n.weex-waterfall-inner-columns {\n  -webkit-flex-direction: row;\n  flex-direction: row;\n  -webkit-box-orient: horizontal;\n}\n\n.weex-scroller-wrapper.weex-scroller-vertical {\n  overflow-x: hidden;\n  overflow-y: scroll;\n}\n\n.weex-scroller-wrapper.weex-scroller-horizontal {\n  overflow-x: scroll;\n  overflow-y: hidden;\n}\n\n.weex-scroller-wrapper.weex-scroller-disabled {\n  overflow-x: hidden;\n  overflow-y: hidden;\n}\n\n.weex-scroller-horizontal .weex-scroller-inner {\n  -webkit-flex-direction: row;\n  flex-direction: row;\n  -webkit-box-orient: horizontal;\n  height: 100%;\n}\n\n.weex-cell {\n  width: 100%;\n}\n\n.weex-refresh,\n.weex-loading {\n  -webkit-box-align: center;\n  -webkit-align-items: center;\n  align-items: center;\n  -webkit-box-pack: center;\n  -webkit-justify-content: center;\n  justify-content: center;\n  width: 100%;\n  overflow: hidden;\n}\n",undefined);

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// import cell from './cell'
var modules = [
  list,
  scroller,
  waterfall,
  // cell,
  header,
  loading,
  refresh,
  loadingIndicator$1
];

var scrollable = {
  init: function init (weex) {
    modules.forEach(function (mod) {
      weex.install(mod);
    });
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var TRANSITION_TIME = 400;
var NEIGHBOR_SCALE_TIME = 100;
var MAIN_SLIDE_OPACITY = 1;
var THROTTLE_SCROLL_TIME = 25;
var INTERVAL_MINIMUM = 200;

var slideMixin = {
  created: function created () {
    this._clones = [];
    this.innerOffset = 0;
    this._indicator = null;
  },

  beforeUpdate: function beforeUpdate () {
    this._getWrapperSize();
  },

  updated: function updated () {
    var this$1 = this;

    var children = this.$children;
    var len = children && children.length;
    if (children && len > 0) {
      for (var i = 0; i < len; i++) {
        var vm = children[i];
        if (vm.$options._componentTag === 'indicator'
          || vm.$vnode.data.ref === 'indicator') {
          vm._watcher.get();
          break
        }
      }
    }

    var frameCount = this.frameCount;
    if (!this._preFrameCount) {
      this._preFrameCount = frameCount;
    }
    else if (this._preFrameCount !== frameCount) {
      this._resetNodes();
      this._preFrameCount = frameCount;
      var resetBlankFrame = function () {
        if (this$1.currentIndex >= frameCount) {
          // reset blank page.
          this$1._stopAutoPlay();
          this$1._slideTo(0);
        }
      };
      if (this._sliding) {
        // If it's sliding, then the currentIndex is the last frame. The actual currentIndex
        // should be the next index.
        // That is to say, this updating happens Between _parepareNodes and _rearrangeNodes,
        // and the sliding is not yet finished, and the state is not updated yet.
        setTimeout(resetBlankFrame, TRANSITION_TIME + NEIGHBOR_SCALE_TIME);
      }
      else {
        resetBlankFrame();
      }
    }
    weex.utils.fireLazyload(this.$el, true);
    if (this._preIndex !== this.currentIndex) {
      this._slideTo(this.currentIndex);
    }
  },

  mounted: function mounted () {
    this._getWrapperSize();
    this._slideTo(this.currentIndex);
    weex.utils.fireLazyload(this.$el, true);
  },

  methods: {
    _getWrapperSize: function _getWrapperSize () {
      var wrapper = this.$refs.wrapper;
      if (wrapper) {
        var rect = wrapper.getBoundingClientRect();
        this._wrapperWidth = rect.width;
        this._wrapperHeight = rect.height;
      }
    },

    _formatChildren: function _formatChildren (createElement) {
      var this$1 = this;

      var children = this.$slots.default || [];
      var indicatorVnode;
      var cells = children.filter(function (vnode) {
        if (!vnode.tag) { return false }
        if (vnode.componentOptions && vnode.componentOptions.tag === 'indicator') {
          indicatorVnode = vnode;
          return false
        }
        return true
      }).map(function (vnode) {
        return createElement('li', {
          ref: 'cells',
          staticClass: ("weex-slider-cell weex-ct" + (this$1.isNeighbor ? ' neighbor-cell' : ''))
        }, [vnode])
      });
      if (indicatorVnode) {
        indicatorVnode.data.attrs = indicatorVnode.data.attrs || {};
        indicatorVnode.data.attrs.count = cells.length;
        indicatorVnode.data.attrs.active = this.currentIndex;
        this._indicator = indicatorVnode;
      }
      return cells
    },

    _renderSlides: function _renderSlides (createElement) {
      this._cells = this._formatChildren(createElement);
      this.frameCount = this._cells.length;
      return createElement(
        'nav',
        {
          ref: 'wrapper',
          attrs: { 'weex-type': this.isNeighbor ? 'slider-neighbor' : 'slider' },
          on: {
            touchstart: this._handleTouchStart,
            touchmove: weex.utils.throttle(weex.utils.bind(this._handleTouchMove, this), 25),
            touchend: this._handleTouchEnd,
            touchcancel: this._handleTouchCancel
          },
          staticClass: 'weex-slider weex-slider-wrapper weex-ct',
          staticStyle: weex.extractComponentStyle(this)
        },
        [
          createElement('ul', {
            ref: 'inner',
            staticClass: 'weex-slider-inner weex-ct'
          }, this._cells),
          this._indicator
        ]
      )
    },

    // get standard index
    _normalizeIndex: function _normalizeIndex (index) {
      var newIndex = (index + this.frameCount) % this.frameCount;
      return Math.min(Math.max(newIndex, 0), this.frameCount - 1)
    },

    _startAutoPlay: function _startAutoPlay () {
      if (!this.autoPlay || this.autoPlay === 'false') {
        return
      }
      if (this._autoPlayTimer) {
        clearTimeout(this._autoPlayTimer);
        this._autoPlayTimer = null;
      }
      var interval = parseInt(this.interval - TRANSITION_TIME - NEIGHBOR_SCALE_TIME);
      interval = interval > INTERVAL_MINIMUM ? interval : INTERVAL_MINIMUM;
      this._autoPlayTimer = setTimeout(weex.utils.bind(this._next, this), interval);
    },

    _stopAutoPlay: function _stopAutoPlay () {
      if (this._autoPlayTimer) {
        clearTimeout(this._autoPlayTimer);
        this._autoPlayTimer = null;
      }
    },

    _slideTo: function _slideTo (index, isTouchScroll) {
      var this$1 = this;

      if (this.frameCount <= 0) {
        return
      }
      if (!this.infinite || this.infinite === 'false') {
        if (index === -1 || index > (this.frameCount - 1)) {
          this._slideTo(this.currentIndex);
          return
        }
      }
      if (!this._preIndex && this._preIndex !== 0) {
        if (this._showNodes && this._showNodes[0]) {
          this._preIndex = this._showNodes[0].index;
        }
        else {
          this._preIndex = this.currentIndex;
        }
      }

      if (this._sliding) {
        return
      }
      this._sliding = true;

      var newIndex = this._normalizeIndex(index);
      var inner = this.$refs.inner;
      var step = this._step = this.frameCount <= 1 ? 0 : this._preIndex - index;

      if (inner) {
        this._prepareNodes();
        var translate = weex.utils.getTransformObj(inner).translate;
        var match = translate && translate.match(/translate[^(]+\(([+-\d.]+)/);
        var innerX = match && match[1] || 0;
        var dist = innerX - this.innerOffset;
        this.innerOffset += step * this._wrapperWidth;
        // transform the whole slides group.
        inner.style.webkitTransition = "-webkit-transform " + (TRANSITION_TIME / 1000) + "s ease-in-out";
        inner.style.mozTransition = "transform " + (TRANSITION_TIME / 1000) + "s ease-in-out";
        inner.style.transition = "transform " + (TRANSITION_TIME / 1000) + "s ease-in-out";
        inner.style.webkitTransform = "translate3d(" + (this.innerOffset) + "px, 0, 0)";
        inner.style.mozTransform = "translate3d(" + (this.innerOffset) + "px, 0, 0)";
        inner.style.transform = "translate3d(" + (this.innerOffset) + "px, 0, 0)";

        // emit scroll events.
        if (!isTouchScroll) {
          this._emitScrollEvent('scrollstart');
        }
        setTimeout(function () {
          this$1._throttleEmitScroll(dist, function () {
            this$1._emitScrollEvent('scrollend');
          });
        }, THROTTLE_SCROLL_TIME);

        this._loopShowNodes(step);

        setTimeout(function () {
          if (this$1.isNeighbor) {
            this$1._setNeighbors();
          }

          setTimeout(function () {
            inner.style.webkitTransition = '';
            inner.style.mozTransition = '';
            inner.style.transition = '';
            for (var i = this$1._showStartIdx; i <= this$1._showEndIdx; i++) {
              var node = this$1._showNodes[i];
              if (!node) { continue }
              var elm = node.firstElementChild;
              elm.style.webkitTransition = '';
              elm.style.mozTransition = '';
              elm.style.transition = '';
            }
            // clean cloned nodes and rearrange slide cells.
            this$1._rearrangeNodes(newIndex);
          }, NEIGHBOR_SCALE_TIME);
        }, TRANSITION_TIME);
      }

      if (newIndex !== this._preIndex) {
        weex.utils.dispatchNativeEvent(this.$el, 'change', {
          index: newIndex
        });
      }
    },

    _clearNodesOffset: function _clearNodesOffset () {
      var this$1 = this;

      var end = this._showEndIdx;
      for (var i = this._showStartIdx; i <= end; i++) {
        var node = this$1._showNodes[i];
        node = node && node.firstElementChild;
        if (!node) { continue }
        weex.utils.addTransform(this$1._showNodes[i].firstElementChild, {
          translate: 'translate3d(0px, 0px, 0px)'
        });
      }
    },

    _loopShowNodes: function _loopShowNodes (step) {
      var this$1 = this;

      if (!step || this.frameCount <= 1) {
        return
      }
      var sign = step > 0 ? 1 : -1;
      var i = step <= 0 ? this._showStartIdx : this._showEndIdx;
      var end = step <= 0 ? this._showEndIdx : this._showStartIdx;
      for (; i !== end - sign; i -= sign) {
        var nextIdx = i + step;
        this$1._showNodes[nextIdx] = this$1._showNodes[i];
        this$1._showNodes[nextIdx]._showIndex = nextIdx;
        delete this$1._showNodes[i];
      }
      this._showStartIdx += step;
      this._showEndIdx += step;
    },

    _prepareNodes: function _prepareNodes () {
      // test if the next slide towards the direction exists.
      // e.g. currentIndex 0 -> 1: should prepare 4 slides: -1, 0, 1, 2
      // if not, translate a node to here, or just clone it.
      var step = this._step;
      if (!this._inited) {
        this._initNodes();
        this._inited = true;
        this._showNodes = {};
      }
      if (this.frameCount <= 1) {
        this._showStartIdx = this._showEndIdx = 0;
        var node = this._cells[0].elm;
        node.style.opacity = 1;
        node.style.zIndex = 99;
        node.index = 0;
        this._showNodes[0] = node;
        node._inShow = true;
        node._showIndex = 0;
        return
      }

      var showCount = this._showCount = Math.abs(step) + 3;
      this._showStartIdx = step <= 0 ? -1 : 2 - showCount;
      this._showEndIdx = step <= 0 ? showCount - 2 : 1;
      this._clearNodesOffset();
      this._positionNodes(this._showStartIdx, this._showEndIdx, step);
    },

    _clearClones: function _clearClones () {
      var this$1 = this;

      // clear all clones.
      Object.keys(this._clones).forEach(function (key) {
        this$1._clones[key].forEach(function (cloneNode) {
          cloneNode.parentNode.removeChild(cloneNode);
        });
        this$1._clones[key] = [];
      });
    },

    // reset nodes' index and _inShow state. But leave the styles
    // as they are to prevent dom rerendering.
    _resetNodes: function _resetNodes () {
      this._clearClones();
      // reset status.
      this._cells.forEach(function (cell, idx) {
        var elm = cell.elm;
        elm.index = idx;
        elm._inShow = false;
      });
    },

    _initNodes: function _initNodes () {
      this._cells.forEach(function (cell, idx) {
        var node = cell.elm;
        node.index = idx;
        node._inShow = false;
        node.style.zIndex = 0;
        node.style.opacity = 0;
      });
    },

    _positionNodes: function _positionNodes (begin, end, step, anim) {
      var this$1 = this;

      var cells = this._cells;
      var start = step <= 0 ? begin : end;
      var stop = step <= 0 ? end : begin;
      var sign = step <= 0 ? -1 : 1;
      var cellIndex = this._preIndex + sign;
      for (var i = start; i !== stop - sign; i = i - sign) {
        var node = cells[this$1._normalizeIndex(cellIndex)].elm;
        cellIndex = cellIndex - sign;
        this$1._positionNode(node, i);
      }
    },

    /**
     * index: position index in the showing cells' view.
     */
    _positionNode: function _positionNode (node, index) {
      var holder = this._showNodes[index];
      if (node._inShow && (holder !== node || holder._showIndex !== index)) {
        if (holder && holder._isClone) { this._removeClone(holder); }
        node = this._getClone(node.index);
      }
      else if (node._inShow) {  // holder === node
        return
      }

      node._inShow = true;
      var translateX = index * this._wrapperWidth - this.innerOffset;
      weex.utils.addTransform(node, {
        translate: ("translate3d(" + translateX + "px, 0px, 0px)")
      });
      node.style.zIndex = 99 - Math.abs(index);
      node.style.opacity = 1;
      node._showIndex = index;
      this._showNodes[index] = node;
    },

    _getClone: function _getClone (index) {
      var arr = this._clones[index] || (this._clones[index] = []);
      var origNode = this._cells[index].elm;
      var clone = origNode.cloneNode(true);
      clone._isClone = true;
      clone._inShow = true;
      // clone._inShow = origNode._inShow
      clone.index = origNode.index;
      clone.style.opacity = 0;
      clone.style.zIndex = 0;
      this.$refs.inner.appendChild(clone);
      arr.push(clone);
      return clone
      // try {
      //   let arr = this._clones[index]
      //   if (!arr) {
      //     this._clones[index] = arr = []
      //   }
      //   if (arr.length <= 0) {

      //   }
      //   return arr.pop()
      // } catch (err) {
      //   console.error('this._cells -> ', this._cells)
      // }
    },

    _removeClone: function _removeClone (node) {
      var cloneArr = this._clones[node.index];
      var i;
      if (cloneArr && (i = cloneArr.indexOf(node)) > -1) {
        cloneArr.splice(i, 1);
      }
      try {
        node.parentNode.removeChild(node);
      }
      catch (err) {
        // maybe cells has been updated and this clone node is already removed from the dom tree
        // throught _clearClones method.
      }
      // const idx = node.index
      // this._hideNode(node)
      // const arr = this._clones[idx]
      // arr.push(node)
    },

    _hideNode: function _hideNode (node) {
      node._inShow = false;
      node.style.opacity = 0;
      node.style.zIndex = 0;
    },

    /**
     * hide nodes from begin to end in showArray.
     * if it is clone node, just move the clone node to the buffer.
     */
    _clearNodes: function _clearNodes (begin, end) {
      var this$1 = this;

      for (var i = begin; i <= end; i++) {
        var node = this$1._showNodes[i];
        if (!node) { return }
        if (node._isClone) {
          this$1._removeClone(node);
        }
        else if (!node._inShow) {
          this$1._hideNode(node);
        }
        delete this$1._showNodes[i];
      }
    },

    /**
     * copy node style props (opacity and zIndex) and transform status from
     * one element to another.
     */
    _copyStyle: function _copyStyle (from, to, styles, transformExtra) {
      if ( styles === void 0 ) styles = ['opacity', 'zIndex'];
      if ( transformExtra === void 0 ) transformExtra = {};

      weex.utils.extendKeys(to.style, from.style, styles);
      var transObj = weex.utils.getTransformObj(from);
      for (var k in transformExtra) {
        transObj[k] = transformExtra[k];
      }
      weex.utils.addTransform(to, transObj);
      var fromInner = from.firstElementChild;
      var toInner = to.firstElementChild;
      toInner.style.opacity = fromInner.style.opacity;
      weex.utils.copyTransform(fromInner, toInner);
    },

    /**
     * replace a clone node with the original node if it's not in use.
     */
    _replaceClone: function _replaceClone (clone, pos) {
      var this$1 = this;

      var origCell = this._cells[clone.index];
      if (!origCell) {
        return
      }
      var origNode = origCell.elm;
      if (origNode._inShow) {
        return
      }
      var origShowIndex = origNode._showIndex;
      var styleProps = ['opacity', 'zIndex'];
      var cl;
      if (Math.abs(origShowIndex) <= 1) {
        // leave a clone to replace the origNode in the show zone(-1 ~ 1).
        cl = this._getClone(origNode.index);
        this._copyStyle(origNode, cl);
        this._showNodes[origShowIndex] = cl;
      }
      origNode._inShow = true;
      var transObj = weex.utils.getTransformObj(clone);
      transObj.translate = transObj.translate.replace(/[+-\d.]+[pw]x/, function ($0) {
        return pos * this$1._wrapperWidth - this$1.innerOffset + 'px'
      });
      this._copyStyle(clone, origNode, styleProps, transObj);
      this._removeClone(clone);
      if (!cl) {
        delete this._showNodes[origShowIndex];
      }
      this._showNodes[pos] = origNode;
      origNode._showIndex = pos;
    },

    _rearrangeNodes: function _rearrangeNodes (newIndex) {
      var this$1 = this;

      if (this.frameCount <= 1) {
        this._sliding = false;
        this.currentIndex = 0;
        return
      }

      // clear autoPlay timer (and restart after updated hook).
      this._startAutoPlay();

      /**
       * clean nodes. replace current node with non-cloned node.
       * set current index to the new index.
       */
      var shows = this._showNodes;
      for (var i = this._showStartIdx; i <= this._showEndIdx; i++) {
        shows[i]._inShow = false;
      }
      for (var i$1 = -1; i$1 <= 1; i$1++) {
        var node = shows[i$1];
        if (!node._isClone) {
          node._inShow = true;
        }
        else {
          this$1._replaceClone(node, i$1);
        }
      }

      this._clearNodes(this._showStartIdx, -2);
      this._showStartIdx = -1;
      this._clearNodes(2, this._showEndIdx);
      this._showEndIdx = 1;
      this._sliding = false;

      // set current index to the new index.
      this.currentIndex = newIndex;
      this._preIndex = newIndex;
    },

    /**
     * according to the attrs: neighborScale, neighborAlpha, neighborSpace.
     * 1. apply the main cell transform effects.
     * 2. set the previous cell and the next cell's positon, scale and alpha.
     * 3. set other cells' scale and alpha.
     */
    _setNeighbors: function _setNeighbors () {
      var this$1 = this;

      for (var i = this._showStartIdx; i <= this._showEndIdx; i++) {
        var elm = this$1._showNodes[i].firstElementChild;
        elm.style.webkitTransition = "all " + (NEIGHBOR_SCALE_TIME / 1000) + "s ease";
        elm.style.mozTransition = "all " + (NEIGHBOR_SCALE_TIME / 1000) + "s ease";
        elm.style.transition = "all " + (NEIGHBOR_SCALE_TIME / 1000) + "s ease";
        var transObj = {
          scale: ("scale(" + (i === 0 ? this$1.currentItemScale : this$1.neighborScale) + ")")
        };
        var translateX = (void 0);
        if (!this$1._neighborWidth) {
          this$1._neighborWidth = parseFloat(elm.style.width) || elm.getBoundingClientRect().width;
        }
        // calculate position offsets according to neighbor scales.
        if (Math.abs(i) === 1) {
          var dist = ((this$1._wrapperWidth - this$1._neighborWidth * this$1.neighborScale) / 2
            + this$1.neighborSpace * weex.config.env.scale) / this$1.neighborScale;
          translateX = -i * dist;
        }
        else {
          // clear position offsets.
          translateX = 0;
        }
        transObj.translate = "translate3d(" + translateX + "px, 0px, 0px)";
        weex.utils.addTransform(elm, transObj);
        elm.style.opacity = i === 0 ? MAIN_SLIDE_OPACITY : this$1.neighborAlpha;
      }
    },

    _next: function _next () {
      var next = this.currentIndex + 1;
      if (this.frameCount <= 1) {
        next--;
      }
      this._slideTo(next);
    },

    _prev: function _prev () {
      var prev = this.currentIndex - 1;
      if (this.frameCount <= 1) {
        prev++;
      }
      this._slideTo(prev);
    },

    _handleTouchStart: function _handleTouchStart (event) {
      var touch = event.changedTouches[0];
      this._stopAutoPlay();
      var inner = this.$refs.inner;
      this._touchParams = {
        originalTransform: inner.style.webkitTransform
          || inner.style.mozTransform
          || inner.style.transform,
        startTouchEvent: touch,
        startX: touch.pageX,
        startY: touch.pageY,
        timeStamp: event.timeStamp
      };
    },

    _handleTouchMove: function _handleTouchMove (event) {
      var tp = this._touchParams;
      if (!tp) { return }
      if (this._sliding) {
        return
      }
      var ref = this._touchParams;
      var startX = ref.startX;
      var startY = ref.startY;
      var touch = event.changedTouches[0];
      var offsetX = touch.pageX - startX;
      var offsetY = touch.pageY - startY;
      tp.offsetX = offsetX;
      tp.offsetY = offsetY;
      var isV = tp.isVertical;
      if (typeof isV === 'undefined') {
        isV = tp.isVertical = Math.abs(offsetX) < Math.abs(offsetY);
        if (!isV) {
          this._emitScrollEvent('scrollstart');
        }
      }
      // vertical scroll. just ignore it.
      if (isV) {
        return
      }
      // horizontal scroll. trigger scroll event.
      event.preventDefault();
      var inner = this.$refs.inner;
      if (inner && offsetX) {
        if (!this._nodesOffsetCleared) {
          this._nodesOffsetCleared = true;
          this._clearNodesOffset();
        }
        this._emitScrollEvent('weex$scroll', {
          offsetXRatio: offsetX / this._wrapperWidth
        });
        inner.style.webkitTransform = "translate3d(" + (this.innerOffset + offsetX) + "px, 0, 0)";
        inner.style.mozTransform = "translate3d(" + (this.innerOffset + offsetX) + "px, 0, 0)";
        inner.style.transform = "translate3d(" + (this.innerOffset + offsetX) + "px, 0, 0)";
      }
    },

    _handleTouchEnd: function _handleTouchEnd (event) {
      this._startAutoPlay();
      var tp = this._touchParams;
      if (!tp) { return }
      var isV = tp.isVertical;
      if (typeof isV === 'undefined') {
        return
      }
      var inner = this.$refs.inner;
      var offsetX = tp.offsetX;
      if (inner) {
        this._nodesOffsetCleared = false;
        // TODO: test the velocity if it's less than 0.2.
        var reset = Math.abs(offsetX / this._wrapperWidth) < 0.2;
        var direction = offsetX > 0 ? 1 : -1;
        var newIndex = reset ? this.currentIndex : (this.currentIndex - direction);
        this._slideTo(newIndex, true);
      }
      delete this._touchParams;
    },

    _handleTouchCancel: function _handleTouchCancel (event) {
      return this._handleTouchEnd(event)
    },

    _emitScrollEvent: function _emitScrollEvent (type, data) {
      if ( data === void 0 ) data = {};

      var el = this.$el;
      if (el) {
        weex.utils.dispatchNativeEvent(el, type, data);
      }
    },

    _throttleEmitScroll: function _throttleEmitScroll (offset, callback) {
      var this$1 = this;

      var i = 0;
      var throttleTime = THROTTLE_SCROLL_TIME;
      var cnt = parseInt(TRANSITION_TIME / throttleTime) - 1;
      var sign = offset > 0 ? 1 : -1;
      var r = Math.abs(offset / this._wrapperWidth);
      var throttledScroll = function () {
        if (++i > cnt) {
          return callback && callback.call(this$1)
        }
        var ratio = this$1._step === 0
          ? sign * r * (1 - i / cnt)
          : sign * (r + (1 - r) * i / cnt);
        this$1._emitScrollEvent('weex$scroll', {
          offsetXRatio: ratio
        });
        setTimeout(throttledScroll, THROTTLE_SCROLL_TIME);
      };
      throttledScroll();
    }
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// import { validateStyles } from '../../validator'
// import indicator from './indicator'
var slider$1 = {
  mixins: [slideMixin],
  props: {
    index: {
      type: [String, Number],
      default: 0
    },
    'auto-play': {
      type: [String, Boolean],
      default: false
    },
    interval: {
      type: [String, Number],
      default: 3000
    },
    infinite: {
      type: [String, Boolean],
      default: true
    }
  },

  watch: {
    index: function index () {
      this.currentIndex = this._normalizeIndex(this.index);
    }
  },

  data: function data () {
    return {
      frameCount: 0,
      currentIndex: this.index
    }
  },

  beforeCreate: function beforeCreate () {
    this.weexType = 'slider';
  },

  render: function render (createElement) {
    /* istanbul ignore next */
    // if ("production" === 'development') {
    //   validateStyles('slider', this.$vnode.data && this.$vnode.data.staticStyle)
    // }
    return this._renderSlides(createElement)
  }
};

var slider$2 = {
  init: function init (weex) {
    weex.registerComponent('slider', slider$1);
    weex.registerComponent('cycleslider', slider$1);
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var DEFAULT_NEIGHBOR_SPACE = 20;
var DEFAULT_NEIGHBOR_ALPHA = 0.6;
var DEFAULT_NEIGHBOR_SCALE = 0.8;
var DEFAULT_CURRENT_ITEM_SCALE = 0.9;

var sliderNeighbor = {
  mixins: [slideMixin],
  props: {
    index: {
      type: [String, Number],
      default: 0
    },
    autoPlay: {
      type: [String, Boolean],
      default: false
    },
    interval: {
      type: [String, Number],
      default: 3000
    },
    infinite: {
      type: [String, Boolean],
      default: true
    },
    neighborSpace: {
      type: [String, Number],
      validator: function (val) {
        val = parseFloat(val);
        return !isNaN(val) && val > 0
      },
      default: DEFAULT_NEIGHBOR_SPACE
    },
    neighborAlpha: {
      type: [String, Number],
      validator: function (val) {
        val = parseFloat(val);
        return !isNaN(val) && val >= 0 && val <= 1
      },
      default: DEFAULT_NEIGHBOR_ALPHA
    },
    neighborScale: {
      type: [String, Number],
      validator: function (val) {
        val = parseFloat(val);
        return !isNaN(val) && val >= 0 && val <= 1
      },
      default: DEFAULT_NEIGHBOR_SCALE
    },
    currentItemScale: {
      type: [String, Number],
      validator: function (val) {
        val = parseFloat(val);
        return !isNaN(val) && val >= 0 && val <= 1
      },
      default: DEFAULT_CURRENT_ITEM_SCALE
    }
  },

  watch: {
    index: function index () {
      this.currentIndex = this._normalizeIndex(this.index);
    }
  },

  data: function data () {
    return {
      currentIndex: this.index,
      frameCount: 0
    }
  },

  beforeCreate: function beforeCreate () {
    this.isNeighbor = true;
    this.weexType = 'slider-neighbor';
  },

  render: function render (createElement) {
    return this._renderSlides(createElement)
  }
};

var neighbor = {
  init: function init (weex) {
    weex.registerComponent('slider-neighbor', sliderNeighbor);
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

var getComponentInlineStyle$1;

function getIndicatorItemStyle (ms, isActive) {
  var style = {};
  var bgColor = isActive
    ? ms['itemSelectedColor'] || ms['item-selected-color']
    : ms['itemColor'] || ms['item-color'];
  style['background-color'] = bgColor;
  style['width'] = style['height'] = ms['itemSize'] || ms['item-size'];
  return style
}

function getScopeIds (context) {
  var scopeIds = context._scopeIds;
  if (scopeIds) {
    return scopeIds
  }
  else {
    scopeIds = [];
  }
  var parent = context.$parent;
  while (parent) {
    var i = (void 0);
    if ((i = parent.$options) && (i = i._scopeId)) {
      scopeIds.push(i);
    }
    parent = parent.$parent;
  }
  context._scopeIds = scopeIds;
  return scopeIds
}

function _render (context, h) {
  var children = [];
  var mergedStyle = getComponentInlineStyle$1(context);
  var scopeIds = getScopeIds(context);
  var attrs = {};
  for (var i = 0, l = scopeIds.length; i < l; i++) {
    attrs[scopeIds[i]] = '';
  }
  for (var i$1 = 0; i$1 < Number(context.count); ++i$1) {
    var classNames = ['weex-indicator-item weex-el'];
    var isActive = false;
    if (i$1 === Number(context.active)) {
      classNames.push('weex-indicator-item-active');
      isActive = true;
    }
    children.push(h('mark', {
      attrs: attrs,
      staticClass: classNames.join(' '),
      staticStyle: getIndicatorItemStyle(mergedStyle, isActive)
    }));
  }
  return h('nav', {
    attrs: { 'weex-type': 'indicator' },
    staticClass: 'weex-indicator weex-ct'
  }, [
    // the indicator nav may cover the slides, and may stop the
    // click event be triggered on the slides.
    // so a smaller wrapper is needed to prevent the overlap.
    // This wrapper will cover only the whole size of all the
    // indicator pointers' item-sizes.
    h('div', {
      staticClass: 'weex-indicator-inner'
    }, children)
  ])
}

var indicator = {
  name: 'weex-indicator',
  methods: {
    show: function () {
      this.$el.style.visibility = 'visible';
    }
  },
  props: {
    itemColor: [String],
    itemSelectedColor: [String],
    itemSize: [String]
  },
  data: function data () {
    return {
      count: 0,
      active: 0
    }
  },
  render: function render (createElement) {
    var ref = this.$vnode.data.attrs || {};
    var count = ref.count;
    var active = ref.active;
    this.count = count;
    this.active = active;
    if (!this.count) { return }
    return _render(this, createElement)
  }
};

var indicator$1 = {
  init: function init (weex) {
    getComponentInlineStyle$1 = weex.getComponentInlineStyle;
    weex.registerComponent('indicator', indicator);
  }
};

__$styleInject("/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n \n.weex-slider-wrapper {\n  overflow: hidden;\n}\n\n.weex-slider-inner {\n  width: 100%;\n  height: 100%;\n  overflow: visible;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n  -webkit-flex-direction: row;\n          flex-direction: row;\n}\n\n.weex-slider-cell {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  background: transparent !important;\n  overflow: hidden;\n  -webkit-box-align: center;\n  -webkit-align-items: center;\n          align-items: center;\n  -webkit-box-pack: center;\n  -webkit-justify-content: center;\n          justify-content: center;\n}\n\n.neighbor-cell {\n  overflow: visible !important;\n}\n\nnav.weex-indicator {\n  position: absolute;\n  z-index: 10;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n  -webkit-flex-direction: row;\n          flex-direction: row;\n  margin: 0;\n  padding: 0;\n  -webkit-box-align: center;\n  -webkit-align-items: center;\n          align-items: center;\n  -webkit-box-pack: center;\n  -webkit-justify-content: center;\n          justify-content: center;\n  -webkit-transform: translate(-10rem, 0px);\n          transform: translate(-10rem, 0px)\n}\n\ndiv.weex-indicator-inner {\n  -webkit-transform: translate(10rem, 0px);\n          transform: translate(10rem, 0px);\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n  -webkit-flex-direction: row;\n          flex-direction: row;\n}\n\n.weex-indicator-item {\n  display: inline-block;\n  position: relative;\n  border-radius: 50%;\n  width: 0.266667rem;\n  height: 0.266667rem;\n  background-color: #BBBBBB;\n}\n.weex-indicator-item + .weex-indicator-item {\n  margin-left: 0.133333rem;\n}\n\n.weex-indicator-item-active {\n  background-color: blue;\n}",undefined);

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

var slider = {
  init: function init (weex) {
    weex.install(slider$2);
    weex.install(neighbor);
    weex.install(indicator$1);
  }
};

__$styleInject("/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n.weex-textarea {\n  font-size: 0.426667rem\n}\n.weex-textarea:focus {\n  outline: none;\n}\n",undefined);

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
function getTextarea (weex) {
  var extractComponentStyle = weex.extractComponentStyle;
  var ref = weex.mixins;
  var inputCommon = ref.inputCommon;
  var ref$1 = weex.utils;
  var extend = ref$1.extend;
  var mapFormEvents = ref$1.mapFormEvents;

  return {
    name: 'weex-textarea',
    mixins: [inputCommon],
    props: {
      value: String,
      placeholder: String,
      disabled: {
        type: [String, Boolean],
        default: false
      },
      autofocus: {
        type: [String, Boolean],
        default: false
      },
      rows: {
        type: [String, Number],
        default: 2
      },
      returnKeyType: String
    },

    render: function render (createElement) {
      /* istanbul ignore next */
      // if ("production" === 'development') {
      //   validateStyles('textarea', this.$vnode.data && this.$vnode.data.staticStyle)
      // }
      var events = extend(mapFormEvents(this));
      return createElement('html:textarea', {
        attrs: {
          'weex-type': 'textarea',
          value: this.value,
          disabled: (this.disabled !== 'false' && this.disabled !== false),
          autofocus: (this.autofocus !== 'false' && this.autofocus !== false),
          placeholder: this.placeholder,
          rows: this.rows,
          'return-key-type': this.returnKeyType
        },
        domProps: {
          value: this.value
        },
        on: this.createKeyboardEvent(events),
        staticClass: 'weex-textarea weex-el',
        staticStyle: extractComponentStyle(this)
      })
    }
  }
}

var textarea = {
  init: function init (weex) {
    weex.registerComponent('textarea', getTextarea(weex));
  }
};

/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/

function getVideo (weex) {
  var extractComponentStyle = weex.extractComponentStyle;
  var mapNativeEvents = weex.mapNativeEvents;
  var ref = weex.utils;
  var dispatchNativeEvent = ref.dispatchNativeEvent;

  return {
    name: 'weex-video',
    props: {
      src: String,
      playStatus: {
        type: String,
        default: 'pause',
        validator: function validator (value) {
          return ['play', 'pause'].indexOf(value) !== -1
        }
      },
      autoplay: {
        type: [String, Boolean],
        default: false
      },
      autoPlay: {
        type: [String, Boolean],
        default: false
      },
      playsinline: {
        type: [String, Boolean],
        default: true
      },
      controls: {
        type: [String, Boolean],
        default: false
      }
    },

    render: function render (createElement) {
      if (this.playStatus === 'play') {
        this.$nextTick(function () {
          try {
            this.$el && this.$el.play();
          }
          catch (err) {
            dispatchNativeEvent(this && this.$el, 'error', {
              message: err.message
            });
          }
        });
      }
      else if (this.playStatus === 'pause') {
        this.$nextTick(function () {
          this.$el && this.$el.pause();
        });
      }

      return createElement('html:video', {
        attrs: {
          'weex-type': 'video',
          autoplay: ((this.autoplay !== 'false' && this.autoplay !== false)
            || (this.autoPlay !== 'false' && this.autoPlay !== false)),
          'webkit-playsinline': this.playsinline,
          controls: this.controls,
          src: this.src
        },
        on: mapNativeEvents(this, {
          play: 'start',
          error: 'fail'
        }),
        staticClass: 'weex-video weex-el',
        staticStyle: extractComponentStyle(this)
      })
    }
  }
}

var video = {
  init: function init (weex) {
    weex.registerComponent('video', getVideo(weex));
  }
};

__$styleInject("/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n.weex-web {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  border: none;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n}\n",undefined);

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
function getWeb (weex) {
  var extractComponentStyle = weex.extractComponentStyle;
  var ref = weex.utils;
  var dispatchNativeEvent = ref.dispatchNativeEvent;

  return {
    data: function data () {
      return {
        currentSrc: ''
      }
    },
    name: 'weex-web',
    props: {
      src: String
    },
    watch: {
      src: function src (newVal) {
        this.currentSrc = newVal;
      }
    },
    methods: {
      goBack: function goBack () {
        var el = this.$el;
        if (el) {
          var win = el.contentWindow;
          try {
            win.history.back();
            this.currentSrc = win.location.href;
          }
          catch (err) {
            dispatchNativeEvent(el, 'error', err);
          }
        }
      },
      goForward: function goForward () {
        var el = this.$el;
        if (el) {
          var win = el.contentWindow;
          try {
            win.history.forward();
            this.currentSrc = win.location.href;
          }
          catch (err) {
            dispatchNativeEvent(el, 'error', err);
          }
        }
      },
      reload: function reload () {
        var el = this.$el;
        if (el) {
          try {
            el.contentWindow.location.reload();
            dispatchNativeEvent(el, 'pagestart', { url: this.currentSrc });
          }
          catch (err) {
            dispatchNativeEvent(el, 'error', err);
          }
        }
      }
    },

    created: function created () {
      this.currentSrc = this.src;
    },

    mounted: function mounted () {
      var el = this.$el;
      this._prevSrc = this.currentSrc;
      if (el) {
        dispatchNativeEvent(el, 'pagestart', { url: this.currentSrc });
      }
    },

    updated: function updated () {
      if (this.currentSrc !== this._prevSrc) {
        this._prevSrc = this.currentSrc;
        dispatchNativeEvent(this.$el, 'pagestart', { url: this.currentSrc });
      }
    },

    render: function render (createElement) {
      var this$1 = this;

      return createElement('iframe', {
        attrs: {
          'weex-type': 'web',
          src: this.currentSrc
        },
        on: {
          load: function (event) {
            this$1.$nextTick(function () {
              var el = this.$el;
              try {
                var html = el.contentWindow.document.documentElement;
                if (html) {
                  dispatchNativeEvent(el, 'pagefinish', { url: this.currentSrc });
                }
                else {
                  dispatchNativeEvent(el, 'error', new Error('[vue-render]:found no page content.'));
                }
              }
              catch (err) {
                dispatchNativeEvent(el, 'error', err);
              }
            });
          }
        },
        staticClass: 'weex-web weex-el',
        staticStyle: extractComponentStyle(this)
      })
    }
  }
}

var web = {
  init: function init (weex) {
    weex.registerComponent('web', getWeb(weex));
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// import a from './a'
// import div from './div'
// import image from './image'
// import text from './text'
var components = [
  // a,
  // div,
  // image,
  input,
  _switch,
  scrollable,
  slider,
  // text,
  textarea,
  video,
  web
];

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var supportGeolocation = 'geolocation' in navigator;
var errorMsg = "[h5-render]: browser doesn't support geolocation.";

var geolocation = {
  // options:
  //   - enableHighAccuracy optional, value is true or false, false by default.
  //   - timeout [none-native] optional, value is a number (milliseconds), default vaule is FINFINITY.
  //   - maximumAge [none-native] optional, value is a number (milliseconds), default value is 0.
  getCurrentPosition: function getCurrentPosition (successCbId, errorCbId, options) {
    var this$1 = this;

    var successCb = function (pos) { return this$1.sender.performCallback(successCbId, pos); };
    var errorCb = function (err) { return this$1.sender.performCallback(errorCbId, err); };
    if (supportGeolocation) {
      navigator.geolocation.getCurrentPosition(successCb, errorCb, options);
    }
    else {
      console.warn(errorMsg);
      errorCb(new Error(errorMsg));
    }
  },

  // options: the same with `getCurrentPosition`.
  watchPosition: function watchPosition (successCbId, errorCbId, options) {
    var this$1 = this;

    var successCb = function (pos) { return this$1.sender.performCallback(successCbId, pos, true); };
    var errorCb = function (err) { return this$1.sender.performCallback(errorCbId, err); };
    if (supportGeolocation) {
      var id = navigator.geolocation.watchPosition(function (pos) {
        pos.watchId = id;
        successCb(pos);
      }, errorCb, options);
    }
    else {
      console.warn(errorMsg);
      errorCb(new Error(errorMsg));
    }
  },

  clearWatch: function clearWatch (watchId) {
    if (supportGeolocation) {
      navigator.geolocation.clearWatch(watchId);
    }
    else {
      console.warn(errorMsg);
    }
  }
};

var meta = {
  geolocation: [{
    name: 'getCurrentPosition',
    args: ['function', 'function', 'object']
  }, {
    name: 'watchPosition',
    args: ['function', 'function', 'object']
  }, {
    name: 'clearWatch',
    args: ['string']
  }]
};

var geolocation$1 = {
  init: function init (Weex) {
    Weex.registerApiModule('geolocation', geolocation, meta);
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/* global localStorage */

var supportLocalStorage = false;
try {
  supportLocalStorage = typeof localStorage !== 'undefined';
}
catch (err) {
  // not support.
}

var SUCCESS = 'success';
var FAILED = 'failed';
var INVALID_PARAM = 'invalid_param';
var UNDEFINED = 'undefined';

function callFail (sender, callbackId, errorMsg) {
  sender.performCallback(callbackId, {
    result: FAILED,
    data: errorMsg || UNDEFINED
  });
}

function callNotSupportFail (sender, callbackId) {
  sender.performCallback(callbackId, {
    result: FAILED,
    data: 'localStorage is disabled or not supported.'
  });
}

var storage = {

  /**
   * When passed a key name and value, will add that key to the storage,
   * or update that key's value if it already exists.
   * @param {string} key
   * @param {string} value not null nor undifined，but 0 works.
   * @param {function} callbackId
   */
  setItem: function (key, value, callbackId) {
    var sender = this.sender;
    if (!supportLocalStorage) {
      return callNotSupportFail(sender, callbackId)
    }
    if (!key || (!value && value !== 0)) {
      sender.performCallback(callbackId, {
        result: 'failed',
        data: INVALID_PARAM
      });
      return
    }
    try {
      localStorage.setItem(key, value);
      sender.performCallback(callbackId, {
        result: SUCCESS,
        data: UNDEFINED
      });
    }
    catch (e) {
      // accept any exception thrown during a storage attempt as a quota error
      callFail(sender, callbackId);
    }
  },

  /**
   * When passed a key name, will return that key's value.
   * @param {string} key
   * @param {function} callbackId
   */
  getItem: function (key, callbackId) {
    var sender = this.sender;
    if (!supportLocalStorage) {
      return callNotSupportFail(sender, callbackId)
    }
    if (!key) {
      sender.performCallback(callbackId, {
        result: FAILED,
        data: INVALID_PARAM
      });
      return
    }
    try {
      var val = localStorage.getItem(key);
      sender.performCallback(callbackId, {
        result: val ? SUCCESS : FAILED,
        data: val || UNDEFINED
      });
    }
    catch (e) {
      // accept any exception thrown during a storage attempt as a quota error
      callFail(sender, callbackId);
    }
  },

  /**
   *When passed a key name, will remove that key from the storage.
   * @param {string} key
   * @param {function} callbackId
   */
  removeItem: function (key, callbackId) {
    var sender = this.sender;
    if (!supportLocalStorage) {
      return callNotSupportFail(sender, callbackId)
    }
    if (!key) {
      sender.performCallback(callbackId, {
        result: FAILED,
        data: INVALID_PARAM
      });
      return
    }
    try {
      localStorage.removeItem(key);
      sender.performCallback(callbackId, {
        result: SUCCESS,
        data: UNDEFINED
      });
    }
    catch (e) {
      // accept any exception thrown during a storage attempt as a quota error
      callFail(sender, callbackId);
    }
  },

  /**
   * Returns an integer representing the number of data items stored in the Storage object.
   * @param {function} callbackId
   */
  length: function (callbackId) {
    var sender = this.sender;
    if (!supportLocalStorage) {
      return callNotSupportFail(sender, callbackId)
    }
    try {
      var len = localStorage.length;
      sender.performCallback(callbackId, {
        result: SUCCESS,
        data: len
      });
    }
    catch (e) {
      // accept any exception thrown during a storage attempt as a quota error
      callFail(sender, callbackId);
    }
  },

  /**
   * Returns an array that contains all keys stored in Storage object.
   * @param {function} callbackId
   */
  getAllKeys: function (callbackId) {
    var sender = this.sender;
    if (!supportLocalStorage) {
      return callNotSupportFail(sender, callbackId)
    }
    try {
      var _arr = [];
      for (var i = 0; i < localStorage.length; i++) {
        _arr.push(localStorage.key(i));
      }
      sender.performCallback(callbackId, {
        result: SUCCESS,
        data: _arr
      });
    }
    catch (e) {
      // accept any exception thrown during a storage attempt as a quota error
      callFail(sender, callbackId);
    }
  }
};

var meta$1 = {
  storage: [{
    name: 'setItem',
    args: ['string', 'string', 'function']
  }, {
    name: 'getItem',
    args: ['string', 'function']
  }, {
    name: 'removeItem',
    args: ['string', 'function']
  }, {
    name: 'length',
    args: ['function']
  }, {
    name: 'getAllKeys',
    args: ['function']
  }]
};

var storage$1 = {
  init: function (Weex) {
    Weex.registerApiModule('storage', storage, meta$1);
  }
};

(typeof window === 'undefined') && (window = {ctrl: {}, lib: {}});!window.ctrl && (window.ctrl = {});!window.lib && (window.lib = {});!function(a,b){function c(a){var b={};Object.defineProperty(this,"params",{set:function(a){if("object"==typeof a){for(var c in b){ delete b[c]; }for(var c in a){ b[c]=a[c]; }}},get:function(){return b},enumerable:!0}), Object.defineProperty(this,"search",{set:function(a){if("string"==typeof a){0===a.indexOf("?")&&(a=a.substr(1));var c=a.split("&");for(var d in b){ delete b[d]; }for(var e=0;e<c.length;e++){var f=c[e].split("=");if(void 0!==f[1]&&(f[1]=f[1].toString()), f[0]){ try{b[decodeURIComponent(f[0])]=decodeURIComponent(f[1]);}catch(g){b[f[0]]=f[1];} }}}},get:function(){var a=[];for(var c in b){ if(void 0!==b[c]){ if(""!==b[c]){ try{a.push(encodeURIComponent(c)+"="+encodeURIComponent(b[c]));}catch(d){a.push(c+"="+b[c]);} }else { try{a.push(encodeURIComponent(c));}catch(d){a.push(c);} } } }return a.length?"?"+a.join("&"):""},enumerable:!0});var c;Object.defineProperty(this,"hash",{set:function(a){"string"==typeof a&&(a&&a.indexOf("#")<0&&(a="#"+a), c=a||"");},get:function(){return c},enumerable:!0}), this.set=function(a){a=a||"";var b;if(!(b=a.match(new RegExp("^([a-z0-9-]+:)?[/]{2}(?:([^@/:?]+)(?::([^@/:]+))?@)?([^:/?#]+)(?:[:]([0-9]+))?([/][^?#;]*)?(?:[?]([^#]*))?([#][^?]*)?$","i")))){ throw new Error("Wrong uri scheme."); }this.protocol=b[1]||("object"==typeof location?location.protocol:""), this.username=b[2]||"", this.password=b[3]||"", this.hostname=this.host=b[4], this.port=b[5]||"", this.pathname=b[6]||"/", this.search=b[7]||"", this.hash=b[8]||"", this.origin=this.protocol+"//"+this.hostname;}, this.toString=function(){var a=this.protocol+"//";return this.username&&(a+=this.username, this.password&&(a+=":"+this.password), a+="@"), a+=this.host, this.port&&"80"!==this.port&&(a+=":"+this.port), this.pathname&&(a+=this.pathname), this.search&&(a+=this.search), this.hash&&(a+=this.hash), a}, a&&this.set(a.toString());}b.httpurl=function(a){return new c(a)};}(window,window.lib||(window.lib={}));var httpurl_common = window.lib['httpurl'];

var strictUriEncode = function (str) {
	return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
		return '%' + c.charCodeAt(0).toString(16).toUpperCase();
	});
};

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject$1(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
	var arguments$1 = arguments;

	var from;
	var to = toObject$1(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments$1[s]);

		for (var key in from) {
			if (hasOwnProperty$1.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

function encoderForArrayFormat(opts) {
	switch (opts.arrayFormat) {
		case 'index':
			return function (key, value, index) {
				return value === null ? [
					encode(key, opts),
					'[',
					index,
					']'
				].join('') : [
					encode(key, opts),
					'[',
					encode(index, opts),
					']=',
					encode(value, opts)
				].join('');
			};

		case 'bracket':
			return function (key, value) {
				return value === null ? encode(key, opts) : [
					encode(key, opts),
					'[]=',
					encode(value, opts)
				].join('');
			};

		default:
			return function (key, value) {
				return value === null ? encode(key, opts) : [
					encode(key, opts),
					'=',
					encode(value, opts)
				].join('');
			};
	}
}

function parserForArrayFormat(opts) {
	var result;

	switch (opts.arrayFormat) {
		case 'index':
			return function (key, value, accumulator) {
				result = /\[(\d*)\]$/.exec(key);

				key = key.replace(/\[\d*\]$/, '');

				if (!result) {
					accumulator[key] = value;
					return;
				}

				if (accumulator[key] === undefined) {
					accumulator[key] = {};
				}

				accumulator[key][result[1]] = value;
			};

		case 'bracket':
			return function (key, value, accumulator) {
				result = /(\[\])$/.exec(key);
				key = key.replace(/\[\]$/, '');

				if (!result) {
					accumulator[key] = value;
					return;
				} else if (accumulator[key] === undefined) {
					accumulator[key] = [value];
					return;
				}

				accumulator[key] = [].concat(accumulator[key], value);
			};

		default:
			return function (key, value, accumulator) {
				if (accumulator[key] === undefined) {
					accumulator[key] = value;
					return;
				}

				accumulator[key] = [].concat(accumulator[key], value);
			};
	}
}

function encode(value, opts) {
	if (opts.encode) {
		return opts.strict ? strictUriEncode(value) : encodeURIComponent(value);
	}

	return value;
}

function keysSorter(input) {
	if (Array.isArray(input)) {
		return input.sort();
	} else if (typeof input === 'object') {
		return keysSorter(Object.keys(input)).sort(function (a, b) {
			return Number(a) - Number(b);
		}).map(function (key) {
			return input[key];
		});
	}

	return input;
}

var extract = function (str) {
	return str.split('?')[1] || '';
};

var parse = function (str, opts) {
	opts = objectAssign({arrayFormat: 'none'}, opts);

	var formatter = parserForArrayFormat(opts);

	// Create an object with no prototype
	// https://github.com/sindresorhus/query-string/issues/47
	var ret = Object.create(null);

	if (typeof str !== 'string') {
		return ret;
	}

	str = str.trim().replace(/^(\?|#|&)/, '');

	if (!str) {
		return ret;
	}

	str.split('&').forEach(function (param) {
		var parts = param.replace(/\+/g, ' ').split('=');
		// Firefox (pre 40) decodes `%3D` to `=`
		// https://github.com/sindresorhus/query-string/pull/37
		var key = parts.shift();
		var val = parts.length > 0 ? parts.join('=') : undefined;

		// missing `=` should be `null`:
		// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
		val = val === undefined ? null : decodeURIComponent(val);

		formatter(decodeURIComponent(key), val, ret);
	});

	return Object.keys(ret).sort().reduce(function (result, key) {
		var val = ret[key];
		if (Boolean(val) && typeof val === 'object' && !Array.isArray(val)) {
			// Sort object keys, not values
			result[key] = keysSorter(val);
		} else {
			result[key] = val;
		}

		return result;
	}, Object.create(null));
};

var stringify = function (obj, opts) {
	var defaults = {
		encode: true,
		strict: true,
		arrayFormat: 'none'
	};

	opts = objectAssign(defaults, opts);

	var formatter = encoderForArrayFormat(opts);

	return obj ? Object.keys(obj).sort().map(function (key) {
		var val = obj[key];

		if (val === undefined) {
			return '';
		}

		if (val === null) {
			return encode(key, opts);
		}

		if (Array.isArray(val)) {
			var result = [];

			val.slice().forEach(function (val2) {
				if (val2 === undefined) {
					return;
				}

				result.push(formatter(key, val2, result.length));
			});

			return result.join('&');
		}

		return encode(key, opts) + '=' + encode(val, opts);
	}).filter(function (x) {
		return x.length > 0;
	}).join('&') : '';
};

var queryString = {
	extract: extract,
	parse: parse,
	stringify: stringify
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/* global lib, XMLHttpRequest */
/* deps: httpurl */

var utils$1;

var jsonpCnt = 0;
var ERROR_STATE = -1;

function _jsonp (config, callback, progressCallback) {
  var cbName = config.jsonpCallbackName || 'jsonp_' + (++jsonpCnt);
  var url;

  if (!config.url) {
    console.error('[h5-render] config.url should be set in _jsonp for \'fetch\' API.');
  }

  global[cbName] = (function (cb) {
    return function (response) {
      callback({
        status: 200,
        ok: true,
        statusText: 'OK',
        data: response
      });
      delete global[cb];
    }
  })(cbName);

  var script = document.createElement('script');
  try {
    url = lib.httpurl(config.url);
  }
  catch (err) {
    console.error('[h5-render] invalid config.url in _jsonp for \'fetch\' API: '
      + config.url);
  }
  url.params.callback = cbName;
  script.type = 'text/javascript';
  script.src = url.toString();
  // script.onerror is not working on IE or safari.
  // but they are not considered here.
  script.onerror = (function (cb) {
    return function (err) {
      console.error('[h5-render] unexpected error in _jsonp for \'fetch\' API', err);
      callback({
        status: ERROR_STATE,
        ok: false,
        statusText: '',
        data: ''
      });
      delete global[cb];
    }
  })(cbName);
  var head = document.getElementsByTagName('head')[0];
  head.insertBefore(script, null);
}

function _xhr (config, callback, progressCallback) {
  var xhr = new XMLHttpRequest();
  xhr.responseType = config.type;
  xhr.open(config.method, config.url, true);

  // cors cookie support
  if (config.withCredentials === true) {
    xhr.withCredentials = true;
  }

  var headers = config.headers || {};
  for (var k in headers) {
    xhr.setRequestHeader(k, headers[k]);
  }

  xhr.onload = function (res) {
    callback({
      status: xhr.status,
      ok: xhr.status >= 200 && xhr.status < 300,
      statusText: xhr.statusText,
      data: xhr.response,
      headers: xhr.getAllResponseHeaders().split('\n')
        .reduce(function (obj, headerStr) {
          var headerArr = headerStr.match(/(.+): (.+)/);
          if (headerArr) {
            obj[headerArr[1]] = headerArr[2];
          }
          return obj
        }, {})
    });
  };

  if (progressCallback) {
    xhr.onprogress = function (e) {
      progressCallback({
        readyState: xhr.readyState,
        status: xhr.status,
        length: e.loaded,
        total: e.total,
        statusText: xhr.statusText,
        headers: xhr.getAllResponseHeaders().split('\n')
          .reduce(function (obj, headerStr) {
            var headerArr = headerStr.match(/(.+): (.+)/);
            if (headerArr) {
              obj[headerArr[1]] = headerArr[2];
            }
            return obj
          }, {})
      });
    };
  }

  xhr.onerror = function (err) {
    console.error('[h5-render] unexpected error in _xhr for \'fetch\' API', err);
    callback({
      status: ERROR_STATE,
      ok: false,
      statusText: '',
      data: ''
    });
  };

  xhr.send(config.body || null);
}

var stream = {

  /**
   * sendHttp
   * @deprecated
   * Note: This API is deprecated. Please use stream.fetch instead.
   * send a http request through XHR.
   * @param  {obj} params
   *  - method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'HEAD' | 'PATCH',
   *  - url: url requested
   * @param  {string} callbackId
   */
  sendHttp: function (param, callbackId) {
    if (typeof param === 'string') {
      try {
        param = JSON.parse(param);
      }
      catch (e) {
        return
      }
    }
    if (typeof param !== 'object' || !param.url) {
      return console.error(
        '[h5-render] invalid config or invalid config.url for sendHttp API')
    }

    var sender = this.sender;
    var method = param.method || 'GET';
    var xhr = new XMLHttpRequest();
    xhr.open(method, param.url, true);
    xhr.onload = function () {
      sender.performCallback(callbackId, this.responseText);
    };
    xhr.onerror = function (error) {
      return console.error('[h5-render] unexpected error in sendHttp API', error)
      // sender.performCallback(
      //   callbackId,
      //   new Error('unexpected error in sendHttp API')
      // )
    };
    xhr.send();
  },

  /**
   * fetch
   * use stream.fetch to request for a json file, a plain text file or
   * a arraybuffer for a file stream. (You can use Blob and FileReader
   * API implemented by most modern browsers to read a arraybuffer.)
   * @param  {object} options config options
   *   - method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'HEAD' | 'PATCH'
   *   - headers {obj}
   *   - url {string}
   *   - mode {string} 'cors' | 'no-cors' | 'same-origin' | 'navigate'
   *   - withCredentials {boolean}
   *   - body
   *   - type {string} 'json' | 'jsonp' | 'text'
   * @param  {string} callbackId
   * @param  {string} progressCallbackId
   */
  fetch: function (options, callbackId, progressCallbackId) {
    var DEFAULT_METHOD = 'GET';
    var DEFAULT_MODE = 'cors';
    var DEFAULT_TYPE = 'text';

    var methodOptions = ['GET', 'POST', 'PUT', 'DELETE', 'HEAD', 'PATCH'];
    var modeOptions = ['cors', 'no-cors', 'same-origin', 'navigate'];
    var typeOptions = ['text', 'json', 'jsonp', 'arraybuffer'];

    // const fallback = false  // fallback from 'fetch' API to XHR.
    var sender = this.sender;

    var config = utils$1.extend({}, options);

    // validate options.method
    if (typeof config.method === 'undefined') {
      config.method = DEFAULT_METHOD;
      console.warn('[h5-render] options.method for \'fetch\' API has been set to '
        + 'default value \'' + config.method + '\'');
    }
    else if (methodOptions.indexOf((config.method + '')
      .toUpperCase()) === -1) {
      return console.error('[h5-render] options.method \''
        + config.method
        + '\' for \'fetch\' API should be one of '
        + methodOptions + '.')
    }

    // validate options.url
    if (!config.url) {
      return console.error('[h5-render] options.url should be set for \'fetch\' API.')
    }

    // validate body content for method 'GET'.
    if (config.method.toUpperCase() === 'GET') {
      var body = config.body;
      if (utils$1.isPlainObject(body)) {
        body = queryString.stringify(body);
      }
      var url = config.url;
      var hashIdx = url.indexOf('#');
      hashIdx <= -1 && (hashIdx = url.length);
      var hash = url.substr(hashIdx);
      if (hash && hash[0] === '#') {
        hash = hash.substr(1);
      }
      url = url.substring(0, hashIdx);
      if (body) {
        url += (config.url.indexOf('?') <= -1 ? '?' : '&') + body;
      }
      url += '#' + hash;
      config.url = url;
    }

    // validate options.mode
    if (typeof config.mode === 'undefined') {
      config.mode = DEFAULT_MODE;
    }
    else if (modeOptions.indexOf((config.mode + '').toLowerCase()) === -1) {
      return console.error('[h5-render] options.mode \''
        + config.mode
        + '\' for \'fetch\' API should be one of '
        + modeOptions + '.')
    }

    // validate options.type
    if (typeof config.type === 'undefined') {
      config.type = DEFAULT_TYPE;
      console.warn('[h5-render] options.type for \'fetch\' API has been set to '
        + 'default value \'' + config.type + '\'.');
    }
    else if (typeOptions.indexOf((config.type + '').toLowerCase()) === -1) {
      return console.error('[h5-render] options.type \''
          + config.type
          + '\' for \'fetch\' API should be one of '
          + typeOptions + '.')
    }

    // validate options.headers
    config.headers = config.headers || {};
    if (!utils$1.isPlainObject(config.headers)) {
      return console.error('[h5-render] options.headers should be a plain object')
    }

    // validate options.timeout
    config.timeout = parseInt(config.timeout, 10) || 2500;

    var _callArgs = [config, function (res) {
      sender.performCallback(callbackId, res);
    }];
    if (progressCallbackId) {
      _callArgs.push(function (res) {
        // Set 'keepAlive' to true for sending continuous callbacks
        sender.performCallback(progressCallbackId, res, true);
      });
    }

    if (config.type === 'jsonp') {
      _jsonp.apply(this, _callArgs);
    }
    else {
      _xhr.apply(this, _callArgs);
    }
  }

};

var meta$2 = {
  stream: [{
    name: 'sendHttp',
    args: ['object', 'function']
  }, {
    name: 'fetch',
    args: ['object', 'function', 'function']
  }]
};

var stream$1 = {
  init: function (Weex) {
    utils$1 = Weex.utils;
    Weex.registerApiModule('stream', stream, meta$2);
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**

AUCTION:
taskQueue
Clipboard.setString()  NOW not works, facing to user-act lose of taskQueue.

works in Chrome Firefox Opera. but not in Safari.
@see https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand#Browser_compatibility

Clipboard.getString() unimplemented. There is no easy way to do paste from clipboard to js variable.

So look out your app behavior, when downgrade to html5 render.
Any idea is welcome.
**/

var WEEX_CLIPBOARD_ID = '__weex_clipboard_id__';

var clipboard = {

  getString: function (callbackId) {
    // not supported in html5
    console.log('clipboard.getString() is not supported now.');
  },

  setString: function (text) {
    // not support safari
    if (typeof text === 'string' && text !== '' && document.execCommand) {
      var tempInput = element();
      tempInput.value = text;

      tempInput.select();
      document.execCommand('copy');
      // var out = document.execCommand('copy');
      // console.log("execCommand out is " + out);
      tempInput.value = '';
      tempInput.blur();
    }
    else {
      console.log('only support string input now');
    }
  }

};

function element () {
  var tempInput = document.getElementById(WEEX_CLIPBOARD_ID);
  if (!tempInput) {
    tempInput = document.createElement('input');
    tempInput.setAttribute('id', WEEX_CLIPBOARD_ID);
    tempInput.style.cssText = 'height:1px;width:1px;border:none;';
    // tempInput.style.cssText = "height:40px;width:300px;border:solid;"
    document.body.appendChild(tempInput);
  }
  return tempInput
}

var meta$3 = {
  clipboard: [{
    name: 'getString',
    args: ['function']
  }, {
    name: 'setString',
    args: ['string']
  }]
};

var clipboard$1 = {
  init: function (Weex) {
    Weex.registerApiModule('clipboard', clipboard, meta$3);
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var event$2 = {
  /**
   * openUrl
   * @param  {string} url
   */
  openURL: function (url) {
    location.href = url;
  }

};

var meta$4 = {
  event: [{
    name: 'openURL',
    args: ['string']
  }]
};

var eventModule = {
  init: function (Weex) {
    Weex.registerApiModule('event', event$2, meta$4);
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var utils$2 = {};
var endEvent;
var styleName;

var DESIGN_ROOT_VALUE = 75;

var EVENT_NAME_MAP = {
  transition: 'transitionend',
  WebkitTransition: 'webkitTransitionEnd',
  MozTransition: 'mozTransitionEnd',
  OTransition: 'oTransitionEnd',
  msTransition: 'MSTransitionEnd'
};

function detectEvents () {
  var testEl = document.createElement('div');
  var style = testEl.style;
  for (var name in EVENT_NAME_MAP) {
    if (name in style) {
      endEvent = EVENT_NAME_MAP[name];
      styleName = name;
      break
    }
  }
}

detectEvents();

function transitionOnce (vnode, config, callback) {
  var nextFrame = utils$2.nextFrame;
  var toCSSText = utils$2.toCSSText;
  var styleObject2rem = utils$2.styleObject2rem;
  var isArray = utils$2.isArray;

  if (isArray(vnode)) {
    vnode = vnode[0];
  }

  var duration = config.duration || 0; // ms
  var timing = config.timingFunction || 'linear';
  var delay = config.delay || 0;  // ms

  // TODO: parse transition properties
  var transitionValue = "all " + duration + "ms " + timing + " " + delay + "ms";

  var dom = vnode instanceof HTMLElement ? vnode : vnode.$el;
  // trigger image lazyloading by force.
  dom && weex.utils.fireLazyload(dom, true);

  var transitionEndHandler = function (event) {
    event && event.stopPropagation();
    if (endEvent) {
      dom.removeEventListener(endEvent, transitionEndHandler);
      dom.style[styleName] = '';
    }
    callback();
  };
  if (endEvent) {
    dom.style[styleName] = transitionValue;
    dom.addEventListener(endEvent, transitionEndHandler);
  }
  nextFrame(function () {
    dom.style.cssText
      += toCSSText(styleObject2rem(config.styles, DESIGN_ROOT_VALUE) || {});
  });
}

var animation = {
  /**
   * transition
   * @param  {String} vnode
   * @param  {Object} config
   * @param  {String} callback
   */
  transition: function transition (vnode, config, callback) {
    if (!config.styles) { return }
    return transitionOnce(vnode, config, function () {
      callback && callback();
    })
  }
};

var animation$1 = {
  init: function init (weex) {
    var extendKeys = weex.utils.extendKeys;
    extendKeys(utils$2, weex.utils, [
      'nextFrame',
      'toCSSText',
      'styleObject2rem',
      // 'autoPrefix',
      // 'normalizeStyle',
      'isArray'
    ]);

    weex.registerModule('animation', animation);
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var utils$3 = {};

function now () {
  var now = window.performance && window.performance.now
    ? window.performance.now.bind(window.performance) : Date.now;
  return now()
}

function scrollElement (dSuffix, position) {
  if ((this === document.body) || (this === window)
    && window.scrollTo) {
    return window.scrollTo(0, position)
  }
  this[("scroll" + dSuffix)] = position;
}
/**
 * self invoked function that, given a context, steps through scrolling
 * @method step
 * @param {Object} context
 */
function step$1 (context) {
  // call method again on next available frame
  context.frame = window.requestAnimationFrame(step$1.bind(window, context));
  var time = now();
  var elapsed = (time - context.startTime) / 468;
  // avoid elapsed times higher than one
  elapsed = elapsed > 1 ? 1 : elapsed;
  // apply easing to elapsed time
  var value = ease(elapsed);
  var currentPosition = context.startPosition + (context.position - context.startPosition) * value;
  context.method.call(context.scrollable, context.dSuffix, currentPosition);
  // return when end points have been reached
  /**
    * NOTE: should use ~~ to parse position number into integer. Otherwise
    * this two float numbers maybe have a slicely little difference, which
    * will cause this function never to stop.
  */
  if (~~currentPosition === ~~context.position) {
    window.cancelAnimationFrame(context.frame);
    return
  }
}
/**
 * returns result of applying ease math function to a number
 * @method ease
 * @param {Number} k
 * @returns {Number}
 */
function ease (k) {
  return 0.5 * (1 - Math.cos(Math.PI * k))
}
var dom = {
  /**
   * scrollToElement
   * @param  {Vnode | VComponent} vnode
   * @param  {Object} options {offset:Number}
   *   ps: scroll-to has 'ease' and 'duration'(ms) as options.
   */
  scrollToElement: function (vnode, options) {
    var isArray = utils$3.isArray;
    var getParentScrollerElement = utils$3.getParentScrollerElement;
    if (isArray(vnode)) {
      vnode = vnode[0];
    }
    var isElement = vnode instanceof HTMLElement;
    var el = isElement ? vnode : (vnode.$el || vnode.elm);
    var ct = getParentScrollerElement(vnode);
    var scroller = ct.__vue__;
    var isWindow = ct === document.body;
    var scrollDirection =
      isWindow ? 'vertical'
        : (scroller && scroller.scrollDirection || 'vertical');
    if (ct && el) {
      var dSuffix = ({
        horizontal: 'Left',
        vertical: 'Top'
      })[scrollDirection];
      var ctRect = ct.getBoundingClientRect();
      var elRect = el.getBoundingClientRect();
      /**
        * if it's a waterfall, and you want to scroll to a header, then just
        * scroll to the top.
      */
      if (
        !isElement
        && scroller
        && scroller.weexType === 'waterfall'
        && scroller._headers
        && scroller._headers.indexOf(vnode.$vnode || vnode) > -1) {
        // it's in waterfall. just scroll to the top.
        elRect = ct.firstElementChild.getBoundingClientRect();
      }
      var dir = dSuffix.toLowerCase();
      var offset = (isWindow ? 0 : ct[("scroll" + dSuffix)]) + elRect[dir] - ctRect[dir];
      if (options) {
        offset += options.offset && options.offset * weex.config.env.scale || 0;
      }
      else {}
      if (options && options.animated === false) {
        return scrollElement.call(ct, dSuffix, offset)
      }
      step$1({
        scrollable: ct,
        startTime: now(),
        frame: null,
        startPosition: isWindow ? window.pageYOffset : ct[("scroll" + dSuffix)],
        position: offset,
        method: scrollElement,
        dSuffix: dSuffix
      });
    }
  },
  /**
   * getComponentRect
   * @param {String} vnode
   * @param {Function} callback
   */
  getComponentRect: function (vnode, callback) {
    var isArray = utils$3.isArray;
    if (isArray(vnode)) {
      vnode = vnode[0];
    }
    var scale = window.weex.config.env.scale;
    var info = {
      result: false
    };
    var rectKeys = ['width', 'height', 'top', 'bottom', 'left', 'right'];

    function recalc (rect) {
      var res = {};
      rectKeys.forEach(function (key) {
        if (rect[key]) {
          res[key] = rect[key] / scale;
        }
      });
      return res
    }
    if (vnode && vnode === 'viewport') {
      info.result = true;
      info.size = recalc({
        width: document.documentElement.clientWidth,
        height: document.documentElement.clientHeight,
        top: 0,
        left: 0,
        right: document.documentElement.clientWidth,
        bottom: document.documentElement.clientHeight
      });
    }
    else if (vnode) {
      var el = vnode instanceof HTMLElement
        ? vnode
        : vnode.$el;
      if (el.getBoundingClientRect) {
        info.result = true;
        info.size = recalc(el.getBoundingClientRect());
      }
      else {
        info.result = false;
      }
    }
    var message = info.result ? info : {
      result: false,
      errMsg: 'Illegal parameter'
    };
    callback && callback(message);
    return message
  },
  /**
   * for adding fontFace
   * @param {string} key fontFace
   * @param {object} styles rules
   */
  addRule: function (key, styles) {
    var camelToKebab = utils$3.camelToKebab;
    var appendCss = utils$3.appendCss;
    key = camelToKebab(key);
    var stylesText = '';
    for (var k in styles) {
      if (styles.hasOwnProperty(k)) {
        stylesText += camelToKebab(k) + ':' + styles[k] + ';';
      }
    }
    var styleText = "@" + key + "{" + stylesText + "}";
    appendCss(styleText, 'dom-added-rules');
  }
};
var dom$1 = {
  init: function init (weex) {
    var extendKeys = weex.utils.extendKeys;
    extendKeys(utils$3, weex.utils, ['camelToKebab', 'appendCss', 'isArray', 'getParentScrollerElement']);
    weex.registerModule('dom', dom);
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * globalEvent API:
 * @doc http://weex.apache.org/cn/references/modules/globalevent.html
 */
// track varies kinds of events and listeners.
var handlerTraker = {};

var globalEvent = {
  /**
   * addEventListener
   * NOTE: one callback can only be bound to the same event once. Bind a callback twice doesn't
   *  mean it will be called twice when the event fired once.
   * @param {string} evt - the event name to add a listener on.
   */
  addEventListener: function addEventListener (evt, callback) {
    if (!callback) {
      return
    }
    var handlers = handlerTraker[evt];
    if (!handlers) {
      handlers = handlerTraker[evt] = [];
    }
    var len = handlers.length;
    for (var i = 0; i < len; i++) {
      if (handlers[i] === callback) {
        // this callback is already bound. no need to bind it again.
        return
      }
    }
    handlers.push(callback);
    document.addEventListener(evt, callback);
  },

  /**
   * removeEventListener
   * NOTE: remove all the event handlers for the specified event type.
   * @param {string} evt - the event name to remove a listener from.
   */
  removeEventListener: function removeEventListener (evt) {
    var handlers = handlerTraker[evt];
    if (!handlers) {
      // evt handlers has been already removed.
      return
    }
    handlers.forEach(function (cb) { return document.removeEventListener(evt, cb); });
    delete handlerTraker[evt];
  }
};

var globalEvent$1 = {
  init: function init (weex) {
    weex.registerModule('globalEvent', globalEvent);
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var queue$1 = [];
var isProcessing = false;
var toastWin;
var TOAST_WIN_CLASS_NAME = 'weex-toast';
var TOAST_TRANSITION_DURATION = 0.4;

var DEFAULT_DURATION = 0.8;

function showToastWindow (msg, callback) {
  if (!toastWin) {
    toastWin = document.createElement('div');
    toastWin.classList.add(TOAST_WIN_CLASS_NAME);
    toastWin.classList.add('hide');
    document.body.appendChild(toastWin);
  }
  toastWin.textContent = msg;
  setTimeout(function () {
    toastWin.classList.remove('hide');
    callback && callback();
  }, 16);
}

function hideToastWindow (callback) {
  if (!toastWin) {
    return
  }
  toastWin.classList.add('hide');
  setTimeout(function () {
    callback && callback();
  }, TOAST_TRANSITION_DURATION * 1000);
}

var toast = {
  push: function (msg, duration) {
    queue$1.push({
      msg: msg,
      duration: duration || DEFAULT_DURATION
    });
    this.show();
  },

  show: function () {
    var that = this;

    // All messages had been toasted already, so remove the toast window,
    if (!queue$1.length) {
      toastWin && toastWin.parentNode.removeChild(toastWin);
      toastWin = null;
      return
    }

    // the previous toast is not ended yet.
    if (isProcessing) {
      return
    }
    isProcessing = true;

    var toastInfo = queue$1.shift();
    showToastWindow(toastInfo.msg, function () {
      setTimeout(function () {
        hideToastWindow(function () {
          isProcessing = false;
          that.show();
        });
      }, toastInfo.duration * 1000);
    });
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// there will be only one instance of modal.
var MODAL_WRAP_CLASS = 'weex-modal-wrap';
var MODAL_NODE_CLASS = 'weex-modal-node';

function Modal () {
  this.wrap = document.querySelector(MODAL_WRAP_CLASS);
  this.node = document.querySelector(MODAL_NODE_CLASS);
  if (!this.wrap) {
    this.createWrap();
  }
  if (!this.node) {
    this.createNode();
  }
  this.clearNode();
  this.createNodeContent();
  this.bindEvents();
}

Modal.prototype = {

  show: function () {
    this.wrap.style.display = 'block';
    this.node.classList.remove('hide');
  },

  destroy: function () {
    document.body.removeChild(this.wrap);
    document.body.removeChild(this.node);
    this.wrap = null;
    this.node = null;
  },

  createWrap: function () {
    this.wrap = document.createElement('div');
    this.wrap.className = MODAL_WRAP_CLASS;
    document.body.appendChild(this.wrap);
  },

  createNode: function () {
    this.node = document.createElement('div');
    this.node.classList.add(MODAL_NODE_CLASS, 'hide');
    document.body.appendChild(this.node);
  },

  clearNode: function () {
    this.node.innerHTML = '';
  },

  createNodeContent: function () {

    // do nothing.
    // child classes can override this method.
  },

  bindEvents: function () {
    this.wrap.addEventListener('click', function (e) {
      e.preventDefault();
      e.stopPropagation();
    });
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var CONTENT_CLASS = 'content';
var MSG_CLASS = 'content-msg';
var BUTTON_GROUP_CLASS = 'btn-group';
var BUTTON_CLASS = 'btn';

function Alert (config) {
  this.msg = config.message || '';
  this.callback = config.callback;
  this.okTitle = config.okTitle || 'OK';
  Modal.call(this);
  this.node.classList.add('weex-alert');
}

Alert.prototype = Object.create(Modal.prototype);

Alert.prototype.createNodeContent = function () {
  var content = document.createElement('div');
  content.classList.add(CONTENT_CLASS);
  this.node.appendChild(content);

  var msg = document.createElement('div');
  msg.classList.add(MSG_CLASS);
  msg.appendChild(document.createTextNode(this.msg));
  content.appendChild(msg);

  var buttonGroup = document.createElement('div');
  buttonGroup.classList.add(BUTTON_GROUP_CLASS);
  this.node.appendChild(buttonGroup);
  var button = document.createElement('div');
  button.classList.add(BUTTON_CLASS, 'alert-ok');
  button.appendChild(document.createTextNode(this.okTitle));
  buttonGroup.appendChild(button);
};

Alert.prototype.bindEvents = function () {
  Modal.prototype.bindEvents.call(this);
  var button = this.node.querySelector('.' + BUTTON_CLASS);
  button.addEventListener('click', function () {
    this.destroy();
    this.callback && this.callback();
  }.bind(this));
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var CONTENT_CLASS$1 = 'content';
var MSG_CLASS$1 = 'content-msg';
var BUTTON_GROUP_CLASS$1 = 'btn-group';
var BUTTON_CLASS$1 = 'btn';

function Confirm (config) {
  this.msg = config.message || '';
  this.callback = config.callback;
  this.okTitle = config.okTitle || 'OK';
  this.cancelTitle = config.cancelTitle || 'Cancel';
  Modal.call(this);
  this.node.classList.add('weex-confirm');
}

Confirm.prototype = Object.create(Modal.prototype);

Confirm.prototype.createNodeContent = function () {
  var content = document.createElement('div');
  content.classList.add(CONTENT_CLASS$1);
  this.node.appendChild(content);

  var msg = document.createElement('div');
  msg.classList.add(MSG_CLASS$1);
  msg.appendChild(document.createTextNode(this.msg));
  content.appendChild(msg);

  var buttonGroup = document.createElement('div');
  buttonGroup.classList.add(BUTTON_GROUP_CLASS$1);
  this.node.appendChild(buttonGroup);
  var btnOk = document.createElement('div');
  btnOk.appendChild(document.createTextNode(this.okTitle));
  btnOk.classList.add('btn-ok', BUTTON_CLASS$1);
  var btnCancel = document.createElement('div');
  btnCancel.appendChild(document.createTextNode(this.cancelTitle));
  btnCancel.classList.add('btn-cancel', BUTTON_CLASS$1);
  buttonGroup.appendChild(btnOk);
  buttonGroup.appendChild(btnCancel);
  this.node.appendChild(buttonGroup);
};

Confirm.prototype.bindEvents = function () {
  Modal.prototype.bindEvents.call(this);
  var btnOk = this.node.querySelector('.' + BUTTON_CLASS$1 + '.btn-ok');
  var btnCancel = this.node.querySelector('.' + BUTTON_CLASS$1 + '.btn-cancel');
  btnOk.addEventListener('click', function () {
    this.destroy();
    this.callback && this.callback(this.okTitle);
  }.bind(this));
  btnCancel.addEventListener('click', function () {
    this.destroy();
    this.callback && this.callback(this.cancelTitle);
  }.bind(this));
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var CONTENT_CLASS$2 = 'content';
var MSG_CLASS$2 = 'content-msg';
var BUTTON_GROUP_CLASS$2 = 'btn-group';
var BUTTON_CLASS$2 = 'btn';
var INPUT_WRAP_CLASS = 'input-wrap';
var INPUT_CLASS = 'input';

function Prompt (config) {
  this.msg = config.message || '';
  this.defaultMsg = config.default || '';
  this.callback = config.callback;
  this.okTitle = config.okTitle || 'OK';
  this.cancelTitle = config.cancelTitle || 'Cancel';
  Modal.call(this);
  this.node.classList.add('weex-prompt');
}

Prompt.prototype = Object.create(Modal.prototype);

Prompt.prototype.createNodeContent = function () {
  var content = document.createElement('div');
  content.classList.add(CONTENT_CLASS$2);
  this.node.appendChild(content);

  var msg = document.createElement('div');
  msg.classList.add(MSG_CLASS$2);
  msg.appendChild(document.createTextNode(this.msg));
  content.appendChild(msg);

  var inputWrap = document.createElement('div');
  inputWrap.classList.add(INPUT_WRAP_CLASS);
  content.appendChild(inputWrap);
  var input = document.createElement('input');
  input.classList.add(INPUT_CLASS);
  input.type = 'text';
  input.autofocus = true;
  input.placeholder = this.defaultMsg;
  inputWrap.appendChild(input);

  var buttonGroup = document.createElement('div');
  buttonGroup.classList.add(BUTTON_GROUP_CLASS$2);
  var btnOk = document.createElement('div');
  btnOk.appendChild(document.createTextNode(this.okTitle));
  btnOk.classList.add('btn-ok', BUTTON_CLASS$2);
  var btnCancel = document.createElement('div');
  btnCancel.appendChild(document.createTextNode(this.cancelTitle));
  btnCancel.classList.add('btn-cancel', BUTTON_CLASS$2);
  buttonGroup.appendChild(btnOk);
  buttonGroup.appendChild(btnCancel);
  this.node.appendChild(buttonGroup);
};

Prompt.prototype.bindEvents = function () {
  Modal.prototype.bindEvents.call(this);
  var btnOk = this.node.querySelector('.' + BUTTON_CLASS$2 + '.btn-ok');
  var btnCancel = this.node.querySelector('.' + BUTTON_CLASS$2 + '.btn-cancel');
  var that = this;
  btnOk.addEventListener('click', function () {
    var val = document.querySelector('input').value;
    this.destroy();
    this.callback && this.callback({
      result: that.okTitle,
      data: val
    });
  }.bind(this));
  btnCancel.addEventListener('click', function () {
    var val = document.querySelector('input').value;
    this.destroy();
    this.callback && this.callback({
      result: that.cancelTitle,
      data: val
    });
  }.bind(this));
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var _css$1 = "\n.weex-toast {\n  font-size: 0.426667rem;\n  line-height: 0.426667rem;\n  position: fixed;\n  z-index: 1999999999;\n  box-sizing: border-box;\n  max-width: 80%;\n  bottom: 50%;\n  left: 50%;\n  padding: 0.213333rem;\n  background-color: #000;\n  color: #fff;\n  text-align: center;\n  opacity: 0.7;\n  -webkit-transition: all 0.4s ease-in-out;\n  -moz-transition: all 0.4s ease-in-out;\n  -ms-transition: all 0.4s ease-in-out;\n  transition: all 0.4s ease-in-out;\n  border-radius: 0.066667rem;\n  -webkit-transform: translateX(-50%);\n  -moz-transform: translateX(-50%);\n  -ms-transform: translateX(-50%);\n  transform: translateX(-50%);\n}\n\n.weex-toast.hide {\n  opacity: 0;\n}\n\n.weex-alert .weex-alert-ok {\n  width: 100%;\n}\n\n.weex-confirm .btn-group .btn {\n  float: left;\n  width: 50%;\n}\n\n.weex-confirm .btn-group .btn.btn-ok {\n  border-right: 0.013333rem solid #ddd;\n}\n\n.weex-modal-wrap {\n  display: none;\n  position: fixed;\n  z-index: 999999999;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: #000;\n  opacity: 0.5;\n}\n\n.weex-modal-node {\n  position: fixed;\n  z-index: 9999999999;\n  top: 50%;\n  left: 50%;\n  width: 6.666667rem;\n  min-height: 2.666667rem;\n  border-radius: 0.066667rem;\n  -webkit-transform: translate(-50%, -50%);\n  -moz-transform: translate(-50%, -50%);\n  -ms-transform: translate(-50%, -50%);\n  transform: translate(-50%, -50%);\n  background-color: #fff;\n}\n\n.weex-modal-node.hide {\n  display: none;\n}\n\n.weex-modal-node .content {\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -moz-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-flex-direction: column;\n  -moz-box-orient: vertical;\n  -moz-box-direction: normal;\n  -ms-flex-direction: column;\n      flex-direction: column;\n  -webkit-box-align: center;\n  -webkit-align-items: center;\n  -ms-flex-align: center;\n  -moz-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  -webkit-box-pack: center;\n  -webkit-justify-content: center;\n  -moz-box-pack: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  width: 100%;\n  min-height: 1.866667rem;\n  box-sizing: border-box;\n  font-size: 0.426667rem;\n  line-height: 0.426667rem;\n  padding: 0.213333rem;\n  border-bottom: 0.013333rem solid #ddd;\n}\n\n.weex-modal-node .btn-group {\n  width: 100%;\n  height: 0.8rem;\n  font-size: 0.373333rem;\n  text-align: center;\n  margin: 0;\n  padding: 0;\n  border: none;\n}\n\n.weex-modal-node .btn-group .btn {\n  text-align: center;\n}\n\n.weex-modal-node .btn-group .btn {\n  box-sizing: border-box;\n  height: 0.8rem;\n  line-height: 0.8rem;\n  margin: 0;\n  padding: 0;\n  border: none;\n  background: none;\n  text-align: center;\n}\n\n.weex-prompt .input-wrap {\n  box-sizing: border-box;\n  width: 100%;\n  margin-top: 0.133333rem;\n  height: 0.96rem;\n}\n\n.weex-prompt .input-wrap .input {\n  box-sizing: border-box;\n  width: 100%;\n  height: 0.56rem;\n  line-height: 0.56rem;\n  font-size: 0.426667rem;\n  border: 0.013333rem solid #999;\n}\n\n.weex-prompt .btn-group .btn {\n  float: left;\n  width: 50%;\n}\n\n.weex-prompt .btn-group .btn.btn-ok {\n  border-right: 0.013333rem solid #ddd;\n}\n";

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// TODO: rewrite the modal styles
var modal = {

  // duration: default is 0.8 seconds.
  toast: function (config) {
    toast.push(config.message, config.duration);
  },

  // config:
  //  - message: string
  //  - okTitle: title of ok button
  //  - callback
  alert: function (config, callback) {
    config.callback = function () {
      callback && callback();
    };
    new Alert(config).show();
  },

  // config:
  //  - message: string
  //  - okTitle: title of ok button
  //  - cancelTitle: title of cancel button
  //  - callback
  confirm: function (config, callback) {
    config.callback = function (val) {
      callback && callback(val);
    };
    new Confirm(config).show();
  },

  // config:
  //  - message: string
  //  - okTitle: title of ok button
  //  - cancelTitle: title of cancel button
  //  - callback
  prompt: function (config, callback) {
    config.callback = function (val) {
      callback && callback(val);
    };
    new Prompt(config).show();
  }
};

var modal$1 = {
  init: function (Weex) {
    Weex.utils.appendCss(_css$1, 'weex-mud-modal');
    Weex.registerModule('modal', modal);
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Navigator module
 */
var navigatorModule = {
  push: function (config, callback) {
    window.location.href = config.url;
    callback && callback();
  },

  pop: function (config, callback) {
    window.history.back();
    callback && callback();
  }
};

var navigatorModule$1 = {
  init: function init (weex) {
    weex.registerModule('navigator', navigatorModule);
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Webview module
 */
var isArray$1;

var webview = {
  goBack: function goBack (vnode) {
    if (isArray$1(vnode)) {
      vnode = vnode[0];
    }
    if (vnode && typeof vnode.goBack === 'function') {
      vnode.goBack();
    }
  },
  goForward: function goForward (vnode) {
    if (isArray$1(vnode)) {
      vnode = vnode[0];
    }
    if (vnode && typeof vnode.goForward === 'function') {
      vnode.goForward();
    }
  },
  reload: function reload (vnode) {
    if (isArray$1(vnode)) {
      vnode = vnode[0];
    }
    if (vnode && typeof vnode.reload === 'function') {
      vnode.reload();
    }
  }
};

var webview$1 = {
  init: function init (weex) {
    isArray$1 = weex.utils.isArray;
    weex.registerModule('webview', webview);
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * websocket module
 */
/*global WebSocket*/
var websocket$1 = (function () {
  var registerListeners = ['onopen', 'onmessage', 'onerror', 'onclose'];
  var ws = {
    INSTANCE: null,
    WebSocket: function (url, protocol) {
      if (!url) {
        ws.INSTANCE = null;
        return
      }
      if (!protocol) {
        ws.INSTANCE = new WebSocket(url);
      }
      else {
        ws.INSTANCE = new WebSocket(url, protocol);
      }
      return ws.INSTANCE
    },
    send: function (messages) {
      ws.INSTANCE && ws.INSTANCE.send(messages);
    },
    close: function () {
      ws.INSTANCE && ws.INSTANCE.close();
    }
  };
  var loop = function ( i ) {
    if (registerListeners.hasOwnProperty(i)) {
      Object.defineProperty(ws, registerListeners[i], {
        get: function () {
          return ws.INSTANCE && ws.INSTANCE[registerListeners[i]]
        },
        set: function (fn) {
          if (ws.INSTANCE) {
            ws.INSTANCE[registerListeners[i]] = fn;
          }
        }
      });
    }
  };

  for (var i in registerListeners) loop( i );
  return ws
})();

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// TODO: rewrite the module meta
var websocket = {
  init: function (Weex) {
    Weex.registerModule('webSocket', websocket$1, { registerType: 'assignment' });
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

var meta$5 = {
  /**
   * setViewport.
   * Changing viewport design width at runtime.
   */
  setViewport: function setViewport (options) {
    if (!options) {
      console.error(("[vue-render] set viewport width invalid options: " + options));
    }
    var newWidth = parseInt(options.width);
    if (!isNaN(newWidth) && newWidth > 0) {
      resetViewport(options.width);
    }
    else {
      console.error(("[vue-render] set viewport width invalid options.width: " + (options.width)));
    }
  }
};

var meta$6 = {
  init: function init (weex) {
    weex.registerModule('meta', meta$5);
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// modules from render/browesr (legacy modules)

// custom modules
var modules$1 = [
  geolocation$1,
  storage$1,
  stream$1,
  clipboard$1,
  eventModule,
  modal$1,
  websocket,
  animation$1,
  dom$1,
  globalEvent$1,
  navigatorModule$1,
  webview$1,
  meta$6
];

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var valMap = {
  contain: 'contain',
  cover: 'cover',
  stretch: '100% 100%'
};
var vals = Object.keys(valMap);
var defaultVal = 'stretch';

var resize = {
  init: function init (weex) {
    weex.__vue__.directive('weex-resize', function (el, binding) {
      if (el.tagName.toLowerCase() !== 'figure') {
        return
      }
      var value = binding.value;
      var oldValue = binding.oldvalue;
      if (value === oldValue) {
        return
      }
      if (vals.indexOf(value) <= -1) {
        value = defaultVal;
      }
      el.style.backgroundSize = valMap[value];
    });
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var directives = {
  resize: resize
};

var preInit = weex.init;

weex.init = function () {
  preInit.apply(weex, arguments);
  var plugins = components.concat(modules$1);

  plugins.forEach(function (plugin) {
    weex.install(plugin);
  });

  for (var k in directives) {
    weex.install(directives[k]);
  }
};

if (global.Vue) {
  weex.init(global.Vue);
}

return weex;

})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguY29tbW9uLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pbnRlZ2VyLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVmaW5lZC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1hdC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2xpYnJhcnkuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19nbG9iYWwuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb3JlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtb2JqZWN0LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmFpbHMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZXNjcmlwdG9ycy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Byb3BlcnR5LWRlc2MuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oaWRlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faGFzLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdWlkLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3R4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZXhwb3J0LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlcmF0b3JzLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29mLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW9iamVjdC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWlvYmplY3QuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1sZW5ndGguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1hYnNvbHV0ZS1pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1idWcta2V5cy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwcy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2h0bWwuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXRvLXN0cmluZy10YWcuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLW9iamVjdC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1ncG8uanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRlZmluZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvci5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItY2FsbC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LWl0ZXIuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jcmVhdGUtcHJvcGVydHkuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jbGFzc29mLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRldGVjdC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZyb20uanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9hcnJheS9mcm9tLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcHMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtcGllLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWFzc2lnbi5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24uanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9vYmplY3QvYXNzaWduLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcGQuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtcHJvdG8uanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL29iamVjdC9zZXQtcHJvdG90eXBlLW9mLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FkZC10by11bnNjb3BhYmxlcy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItc3RlcC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4taW5zdGFuY2UuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mb3Itb2YuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW52b2tlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdGFzay5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21pY3JvdGFzay5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX25ldy1wcm9taXNlLWNhcGFiaWxpdHkuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wZXJmb3JtLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcHJvbWlzZS1yZXNvbHZlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUtYWxsLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXNwZWNpZXMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wcm9taXNlLmpzIiwiLi4vLi4vLi4vc3JjL2xpYi9nZXN0dXJlLmpzIiwiLi4vLi4vLi4vc3JjL2xpYi9lbnZkL3ZlcnNpb24uanMiLCIuLi8uLi8uLi9zcmMvbGliL2VudmQvcGFyYW1zLmpzIiwiLi4vLi4vLi4vc3JjL2xpYi9lbnZkL2luZGV4LmpzIiwiLi4vLi4vLi4vc3JjL3V0aWxzL3R5cGUuanMiLCIuLi8uLi8uLi9zcmMvdXRpbHMvZnVuYy5qcyIsIi4uLy4uLy4uL3NyYy93ZWV4L3ZpZXdwb3J0LmpzIiwiLi4vLi4vLi4vc3JjL3V0aWxzL2V2ZW50LmpzIiwiLi4vLi4vLi4vc3JjL2NvbmZpZy5qcyIsIi4uLy4uLy4uL3NyYy91dGlscy9jb21wb25lbnQuanMiLCIuLi8uLi8uLi9zcmMvdXRpbHMvbGF6eWxvYWQuanMiLCIuLi8uLi8uLi9zcmMvdXRpbHMvc3R5bGUuanMiLCIuLi8uLi8uLi9zcmMvdXRpbHMvaW5kZXguanMiLCIuLi8uLi8uLi9zcmMvd2VleC93eC1lbnYuanMiLCIuLi8uLi8uLi9zcmMvd2VleC9pbnN0YW5jZS5qcyIsIi4uLy4uLy4uL3NyYy9jb3JlL3N0eWxlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3d4di10cmFuc2Zvcm1lci90cmFuc2Zvcm1lci90ZXh0LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3d4di10cmFuc2Zvcm1lci90cmFuc2Zvcm1lci9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy93eHYtdHJhbnNmb3JtZXIvaW5kZXguanMiLCIuLi8uLi8uLi9zcmMvY29yZS9ub2RlLmpzIiwiLi4vLi4vLi4vc3JjL2NvcmUvaW5kZXguanMiLCIuLi8uLi8uLi9zcmMvbWl4aW5zL2Jhc2UuanMiLCIuLi8uLi8uLi9zcmMvbWl4aW5zL2V2ZW50LmpzIiwiLi4vLi4vLi4vc3JjL21peGlucy9zdHlsZS5qcyIsIi4uLy4uLy4uL3NyYy9taXhpbnMvaW5wdXQtY29tbW9uLmpzIiwiLi4vLi4vLi4vc3JjL21peGlucy9zdGlja3kuanMiLCIuLi8uLi8uLi9zcmMvbWl4aW5zL2luZGV4LmpzIiwiLi4vLi4vLi4vc3JjL3dlZXgvZ2xvYmFsLmpzIiwiLi4vLi4vLi4vc3JjL3dlZXgvcmVuZGVyLWZ1bmN0aW9uLmpzIiwiLi4vLi4vLi4vc3JjL3dlZXgvaW5kZXguanMiLCIuLi8uLi8uLi9zcmMvaW5kZXguanMiLCIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9pbnB1dC9pbmRleC5qcyIsIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3N3aXRjaC9pbmRleC5qcyIsIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3Njcm9sbGFibGUvbWl4aW5zL3Njcm9sbGFibGUuanMiLCIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9zY3JvbGxhYmxlL21peGlucy9pbmRleC5qcyIsIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3Njcm9sbGFibGUvbGlzdC5qcyIsIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3Njcm9sbGFibGUvc2Nyb2xsZXIuanMiLCIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9zY3JvbGxhYmxlL3dhdGVyZmFsbC5qcyIsIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3Njcm9sbGFibGUvaGVhZGVyLmpzIiwiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvc2Nyb2xsYWJsZS9sb2FkaW5nLmpzIiwiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvc2Nyb2xsYWJsZS9yZWZyZXNoLmpzIiwiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvc2Nyb2xsYWJsZS9sb2FkaW5nLWluZGljYXRvci5qcyIsIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3Njcm9sbGFibGUvaW5kZXguanMiLCIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9zbGlkZXIvc2xpZGVNaXhpbi5qcyIsIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3NsaWRlci9zbGlkZXIuanMiLCIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9zbGlkZXIvc2xpZGVyLW5laWdoYm9yLmpzIiwiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvc2xpZGVyL2luZGljYXRvci5qcyIsIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3NsaWRlci9pbmRleC5qcyIsIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3RleHRhcmVhL2luZGV4LmpzIiwiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvdmlkZW8uanMiLCIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy93ZWIvaW5kZXguanMiLCIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9pbmRleC5qcyIsIi4uLy4uLy4uL3NyYy9tb2R1bGVzL2dlb2xvY2F0aW9uLmpzIiwiLi4vLi4vLi4vc3JjL21vZHVsZXMvc3RvcmFnZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9odHRwdXJsL2J1aWxkL2h0dHB1cmwuY29tbW9uLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0cmljdC11cmktZW5jb2RlL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcXVlcnktc3RyaW5nL2luZGV4LmpzIiwiLi4vLi4vLi4vc3JjL21vZHVsZXMvc3RyZWFtLmpzIiwiLi4vLi4vLi4vc3JjL21vZHVsZXMvY2xpcGJvYXJkLmpzIiwiLi4vLi4vLi4vc3JjL21vZHVsZXMvZXZlbnQuanMiLCIuLi8uLi8uLi9zcmMvbW9kdWxlcy9hbmltYXRpb24uanMiLCIuLi8uLi8uLi9zcmMvbW9kdWxlcy9kb20uanMiLCIuLi8uLi8uLi9zcmMvbW9kdWxlcy9nbG9iYWxFdmVudC5qcyIsIi4uLy4uLy4uL3NyYy9tb2R1bGVzL21vZGFsL3RvYXN0LmpzIiwiLi4vLi4vLi4vc3JjL21vZHVsZXMvbW9kYWwvbW9kYWwuanMiLCIuLi8uLi8uLi9zcmMvbW9kdWxlcy9tb2RhbC9hbGVydC5qcyIsIi4uLy4uLy4uL3NyYy9tb2R1bGVzL21vZGFsL2NvbmZpcm0uanMiLCIuLi8uLi8uLi9zcmMvbW9kdWxlcy9tb2RhbC9wcm9tcHQuanMiLCIuLi8uLi8uLi9zcmMvbW9kdWxlcy9tb2RhbC9zdHlsZS5qcyIsIi4uLy4uLy4uL3NyYy9tb2R1bGVzL21vZGFsL2luZGV4LmpzIiwiLi4vLi4vLi4vc3JjL21vZHVsZXMvbmF2aWdhdG9yLmpzIiwiLi4vLi4vLi4vc3JjL21vZHVsZXMvd2Vidmlldy5qcyIsIi4uLy4uLy4uL3NyYy9tb2R1bGVzL3dlYnNvY2tldC93ZWJzb2NrZXQuanMiLCIuLi8uLi8uLi9zcmMvbW9kdWxlcy93ZWJzb2NrZXQvaW5kZXguanMiLCIuLi8uLi8uLi9zcmMvbW9kdWxlcy9tZXRhLmpzIiwiLi4vLi4vLi4vc3JjL21vZHVsZXMvaW5kZXguanMiLCIuLi8uLi8uLi9zcmMvZGlyZWN0aXZlcy9yZXNpemUuanMiLCIuLi8uLi8uLi9zcmMvZGlyZWN0aXZlcy9pbmRleC5qcyIsIi4uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyA3LjEuNCBUb0ludGVnZXJcbnZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xufTtcbiIsIi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgcG9zKSB7XG4gICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gICAgdmFyIGkgPSB0b0ludGVnZXIocG9zKTtcbiAgICB2YXIgbCA9IHMubGVuZ3RoO1xuICAgIHZhciBhLCBiO1xuICAgIGlmIChpIDwgMCB8fCBpID49IGwpIHJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmICh0eXBlb2YgX19nID09ICdudW1iZXInKSBfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjUuMicgfTtcbmlmICh0eXBlb2YgX19lID09ICdudW1iZXInKSBfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsIi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIGlzID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2RpdicpLCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZFAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwidmFyIGlkID0gMDtcbnZhciBweCA9IE1hdGgucmFuZG9tKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBTUkMgPSByZXF1aXJlKCcuL191aWQnKSgnc3JjJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSBGdW5jdGlvbltUT19TVFJJTkddO1xudmFyIFRQTCA9ICgnJyArICR0b1N0cmluZykuc3BsaXQoVE9fU1RSSU5HKTtcblxucmVxdWlyZSgnLi9fY29yZScpLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuICR0b1N0cmluZy5jYWxsKGl0KTtcbn07XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbCwgc2FmZSkge1xuICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiB2YWwgPT0gJ2Z1bmN0aW9uJztcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsICduYW1lJykgfHwgaGlkZSh2YWwsICduYW1lJywga2V5KTtcbiAgaWYgKE9ba2V5XSA9PT0gdmFsKSByZXR1cm47XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCBTUkMpIHx8IGhpZGUodmFsLCBTUkMsIE9ba2V5XSA/ICcnICsgT1trZXldIDogVFBMLmpvaW4oU3RyaW5nKGtleSkpKTtcbiAgaWYgKE8gPT09IGdsb2JhbCkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIGlmICghc2FmZSkge1xuICAgIGRlbGV0ZSBPW2tleV07XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH0gZWxzZSBpZiAoT1trZXldKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2Uge1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9XG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgdGhpc1tTUkNdIHx8ICR0b1N0cmluZy5jYWxsKHRoaXMpO1xufSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbiAodHlwZSwgbmFtZSwgc291cmNlKSB7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GO1xuICB2YXIgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuRztcbiAgdmFyIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlM7XG4gIHZhciBJU19QUk9UTyA9IHR5cGUgJiAkZXhwb3J0LlA7XG4gIHZhciBJU19CSU5EID0gdHlwZSAmICRleHBvcnQuQjtcbiAgdmFyIHRhcmdldCA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSB8fCAoZ2xvYmFsW25hbWVdID0ge30pIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXTtcbiAgdmFyIGV4cG9ydHMgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KTtcbiAgdmFyIGV4cFByb3RvID0gZXhwb3J0c1tQUk9UT1RZUEVdIHx8IChleHBvcnRzW1BST1RPVFlQRV0gPSB7fSk7XG4gIHZhciBrZXksIG93biwgb3V0LCBleHA7XG4gIGlmIChJU19HTE9CQUwpIHNvdXJjZSA9IG5hbWU7XG4gIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7XG4gICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcbiAgICBvdXQgPSAob3duID8gdGFyZ2V0IDogc291cmNlKVtrZXldO1xuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgZXhwID0gSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIGlmICh0YXJnZXQpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBvdXQsIHR5cGUgJiAkZXhwb3J0LlUpO1xuICAgIC8vIGV4cG9ydFxuICAgIGlmIChleHBvcnRzW2tleV0gIT0gb3V0KSBoaWRlKGV4cG9ydHMsIGtleSwgZXhwKTtcbiAgICBpZiAoSVNfUFJPVE8gJiYgZXhwUHJvdG9ba2V5XSAhPSBvdXQpIGV4cFByb3RvW2tleV0gPSBvdXQ7XG4gIH1cbn07XG5nbG9iYWwuY29yZSA9IGNvcmU7XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xufTtcbiIsIi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCIvLyA3LjEuMTUgVG9MZW5ndGhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7XG59O1xuIiwiLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pIHtcbiAgICAgIGlmIChPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB7fSk7XG59O1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSBpZiAoa2V5ICE9IElFX1BST1RPKSBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIElFIDgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gKFxuICAnY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mJ1xuKS5zcGxpdCgnLCcpO1xuIiwiLy8gMTkuMS4yLjE0IC8gMTUuMi4zLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xuICByZXR1cm4gJGtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IGdldEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgUDtcbiAgd2hpbGUgKGxlbmd0aCA+IGkpIGRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xubW9kdWxlLmV4cG9ydHMgPSBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4iLCIvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGRQcyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBFbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpO1xuICB2YXIgaSA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgdmFyIGx0ID0gJzwnO1xuICB2YXIgZ3QgPSAnPic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZSAoaS0tKSBkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCJ2YXIgc3RvcmUgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnd2tzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuU3ltYm9sO1xudmFyIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7XG5cbnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9XG4gICAgVVNFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV0gfHwgKFVTRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG5cbiRleHBvcnRzLnN0b3JlID0gc3RvcmU7XG4iLCJ2YXIgZGVmID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIHRhZywgc3RhdCkge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSkgZGVmKGl0LCBUQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2hpZGUnKShJdGVyYXRvclByb3RvdHlwZSwgcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogZGVzY3JpcHRvcigxLCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7XG59O1xuIiwiLy8gNy4xLjEzIFRvT2JqZWN0KGFyZ3VtZW50KVxudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCIvLyAxOS4xLjIuOSAvIDE1LjIuMy4yIE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG8gOiBudWxsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciAkaXRlckNyZWF0ZSA9IHJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1kgPSAhKFtdLmtleXMgJiYgJ25leHQnIGluIFtdLmtleXMoKSk7IC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbnZhciBGRl9JVEVSQVRPUiA9ICdAQGl0ZXJhdG9yJztcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbiAoa2luZCkge1xuICAgIGlmICghQlVHR1kgJiYga2luZCBpbiBwcm90bykgcmV0dXJuIHByb3RvW2tpbmRdO1xuICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gIH07XG4gIHZhciBUQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVM7XG4gIHZhciBWQUxVRVNfQlVHID0gZmFsc2U7XG4gIHZhciBwcm90byA9IEJhc2UucHJvdG90eXBlO1xuICB2YXIgJG5hdGl2ZSA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXTtcbiAgdmFyICRkZWZhdWx0ID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVCk7XG4gIHZhciAkZW50cmllcyA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWQ7XG4gIHZhciAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZTtcbiAgdmFyIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7XG4gIC8vIEZpeCBuYXRpdmVcbiAgaWYgKCRhbnlOYXRpdmUpIHtcbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEl0ZXJhdG9yUHJvdG90eXBlLm5leHQpIHtcbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXG4gICAgICBpZiAoIUxJQlJBUlkgJiYgIWhhcyhJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IpKSBoaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgfVxuICB9XG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUykge1xuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9O1xuICB9XG4gIC8vIERlZmluZSBpdGVyYXRvclxuICBpZiAoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpIHtcbiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xuICB9XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG4gIEl0ZXJhdG9yc1tUQUddID0gcmV0dXJuVGhpcztcbiAgaWYgKERFRkFVTFQpIHtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6IElTX1NFVCA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogJGVudHJpZXNcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoa2V5IGluIG1ldGhvZHMpIHtcbiAgICAgIGlmICghKGtleSBpbiBwcm90bykpIHJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG4gICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbi8vIDIxLjEuMy4yNyBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBTdHJpbmcoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbi8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIgaW5kZXggPSB0aGlzLl9pO1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBPLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9ICRhdChPLCBpbmRleCk7XG4gIHRoaXMuX2kgKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4geyB2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlIH07XG59KTtcbiIsIi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3JcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgZW50cmllcykge1xuICB0cnkge1xuICAgIHJldHVybiBlbnRyaWVzID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB2YXIgcmV0ID0gaXRlcmF0b3JbJ3JldHVybiddO1xuICAgIGlmIChyZXQgIT09IHVuZGVmaW5lZCkgYW5PYmplY3QocmV0LmNhbGwoaXRlcmF0b3IpKTtcbiAgICB0aHJvdyBlO1xuICB9XG59O1xuIiwiLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBpbmRleCwgdmFsdWUpIHtcbiAgaWYgKGluZGV4IGluIG9iamVjdCkgJGRlZmluZVByb3BlcnR5LmYob2JqZWN0LCBpbmRleCwgY3JlYXRlRGVzYygwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtpbmRleF0gPSB2YWx1ZTtcbn07XG4iLCIvLyBnZXR0aW5nIHRhZyBmcm9tIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuLy8gRVMzIHdyb25nIGhlcmVcbnZhciBBUkcgPSBjb2YoZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8sIFQsIEI7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mIChUID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUQUcpKSA9PSAnc3RyaW5nJyA/IFRcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IEFSRyA/IGNvZihPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChCID0gY29mKE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogQjtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb3JlJykuZ2V0SXRlcmF0b3JNZXRob2QgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ICE9IHVuZGVmaW5lZCkgcmV0dXJuIGl0W0lURVJBVE9SXVxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTtcbiIsInZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgcml0ZXIgPSBbN11bSVRFUkFUT1JdKCk7XG4gIHJpdGVyWydyZXR1cm4nXSA9IGZ1bmN0aW9uICgpIHsgU0FGRV9DTE9TSU5HID0gdHJ1ZTsgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBza2lwQ2xvc2luZykge1xuICBpZiAoIXNraXBDbG9zaW5nICYmICFTQUZFX0NMT1NJTkcpIHJldHVybiBmYWxzZTtcbiAgdmFyIHNhZmUgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gWzddO1xuICAgIHZhciBpdGVyID0gYXJyW0lURVJBVE9SXSgpO1xuICAgIGl0ZXIubmV4dCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHsgZG9uZTogc2FmZSA9IHRydWUgfTsgfTtcbiAgICBhcnJbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcjsgfTtcbiAgICBleGVjKGFycik7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gc2FmZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uIChpdGVyKSB7IEFycmF5LmZyb20oaXRlcik7IH0pLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4xIEFycmF5LmZyb20oYXJyYXlMaWtlLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgZnJvbTogZnVuY3Rpb24gZnJvbShhcnJheUxpa2UgLyogLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgICB2YXIgQyA9IHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBpdGVyRm4gPSBnZXRJdGVyRm4oTyk7XG4gICAgdmFyIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAobWFwcGluZykgbWFwZm4gPSBjdHgobWFwZm4sIGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTtcbiAgICAvLyBpZiBvYmplY3QgaXNuJ3QgaXRlcmFibGUgb3IgaXQncyBhcnJheSB3aXRoIGRlZmF1bHQgaXRlcmF0b3IgLSB1c2Ugc2ltcGxlIGNhc2VcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhKEMgPT0gQXJyYXkgJiYgaXNBcnJheUl0ZXIoaXRlckZuKSkpIHtcbiAgICAgIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgcmVzdWx0ID0gbmV3IEMoKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpbmRleCsrKSB7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBjYWxsKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgICAgZm9yIChyZXN1bHQgPSBuZXcgQyhsZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gbWFwZm4oT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGluZGV4O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5hcnJheS5mcm9tJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5BcnJheS5mcm9tO1xuIiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsImV4cG9ydHMuZiA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4yLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSwgLi4uKVxudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgJGFzc2lnbiA9IE9iamVjdC5hc3NpZ247XG5cbi8vIHNob3VsZCB3b3JrIHdpdGggc3ltYm9scyBhbmQgc2hvdWxkIGhhdmUgZGV0ZXJtaW5pc3RpYyBwcm9wZXJ0eSBvcmRlciAoVjggYnVnKVxubW9kdWxlLmV4cG9ydHMgPSAhJGFzc2lnbiB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgdmFyIEEgPSB7fTtcbiAgdmFyIEIgPSB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBTID0gU3ltYm9sKCk7XG4gIHZhciBLID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0JztcbiAgQVtTXSA9IDc7XG4gIEsuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGspIHsgQltrXSA9IGs7IH0pO1xuICByZXR1cm4gJGFzc2lnbih7fSwgQSlbU10gIT0gNyB8fCBPYmplY3Qua2V5cygkYXNzaWduKHt9LCBCKSkuam9pbignJykgIT0gSztcbn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdmFyIFQgPSB0b09iamVjdCh0YXJnZXQpO1xuICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDE7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICB2YXIgaXNFbnVtID0gcElFLmY7XG4gIHdoaWxlIChhTGVuID4gaW5kZXgpIHtcbiAgICB2YXIgUyA9IElPYmplY3QoYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICB2YXIga2V5cyA9IGdldFN5bWJvbHMgPyBnZXRLZXlzKFMpLmNvbmNhdChnZXRTeW1ib2xzKFMpKSA6IGdldEtleXMoUyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBqID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBqKSBpZiAoaXNFbnVtLmNhbGwoUywga2V5ID0ga2V5c1tqKytdKSkgVFtrZXldID0gU1trZXldO1xuICB9IHJldHVybiBUO1xufSA6ICRhc3NpZ247XG4iLCIvLyAxOS4xLjMuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYsICdPYmplY3QnLCB7IGFzc2lnbjogcmVxdWlyZSgnLi9fb2JqZWN0LWFzc2lnbicpIH0pO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmFzc2lnbjtcbiIsInZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSU9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGdPUEQoTywgUCk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlRGVzYyghcElFLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIiwiLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBjaGVjayA9IGZ1bmN0aW9uIChPLCBwcm90bykge1xuICBhbk9iamVjdChPKTtcbiAgaWYgKCFpc09iamVjdChwcm90bykgJiYgcHJvdG8gIT09IG51bGwpIHRocm93IFR5cGVFcnJvcihwcm90byArIFwiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlIVwiKTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGZ1bmN0aW9uICh0ZXN0LCBidWdneSwgc2V0KSB7XG4gICAgICB0cnkge1xuICAgICAgICBzZXQgPSByZXF1aXJlKCcuL19jdHgnKShGdW5jdGlvbi5jYWxsLCByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmYoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCwgMik7XG4gICAgICAgIHNldCh0ZXN0LCBbXSk7XG4gICAgICAgIGJ1Z2d5ID0gISh0ZXN0IGluc3RhbmNlb2YgQXJyYXkpO1xuICAgICAgfSBjYXRjaCAoZSkgeyBidWdneSA9IHRydWU7IH1cbiAgICAgIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgICAgICBjaGVjayhPLCBwcm90byk7XG4gICAgICAgIGlmIChidWdneSkgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICAgICAgZWxzZSBzZXQoTywgcHJvdG8pO1xuICAgICAgICByZXR1cm4gTztcbiAgICAgIH07XG4gICAgfSh7fSwgZmFsc2UpIDogdW5kZWZpbmVkKSxcbiAgY2hlY2s6IGNoZWNrXG59O1xuIiwiLy8gMTkuMS4zLjE5IE9iamVjdC5zZXRQcm90b3R5cGVPZihPLCBwcm90bylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgc2V0UHJvdG90eXBlT2Y6IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldCB9KTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Quc2V0UHJvdG90eXBlT2Y7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIHRlc3QgPSB7fTtcbnRlc3RbcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyldID0gJ3onO1xuaWYgKHRlc3QgKyAnJyAhPSAnW29iamVjdCB6XScpIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShPYmplY3QucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJ1tvYmplY3QgJyArIGNsYXNzb2YodGhpcykgKyAnXSc7XG4gIH0sIHRydWUpO1xufVxuIiwiLy8gMjIuMS4zLjMxIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxudmFyIFVOU0NPUEFCTEVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcbmlmIChBcnJheVByb3RvW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIHJlcXVpcmUoJy4vX2hpZGUnKShBcnJheVByb3RvLCBVTlNDT1BBQkxFUywge30pO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRvbmUsIHZhbHVlKSB7XG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xuXG4vLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpXG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmtleXMoKVxuLy8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKVxuLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICB0aGlzLl90ID0gdG9JT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAvLyBraW5kXG4vLyAyMi4xLjUuMi4xICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIga2luZCA9IHRoaXMuX2s7XG4gIHZhciBpbmRleCA9IHRoaXMuX2krKztcbiAgaWYgKCFPIHx8IGluZGV4ID49IE8ubGVuZ3RoKSB7XG4gICAgdGhpcy5fdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc3RlcCgxKTtcbiAgfVxuICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGluZGV4KTtcbiAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIE9baW5kZXhdKTtcbiAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pO1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyUgKDkuNC40LjYsIDkuNC40LjcpXG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsInZhciAkaXRlcmF0b3JzID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciBJVEVSQVRPUiA9IHdrcygnaXRlcmF0b3InKTtcbnZhciBUT19TVFJJTkdfVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xudmFyIEFycmF5VmFsdWVzID0gSXRlcmF0b3JzLkFycmF5O1xuXG52YXIgRE9NSXRlcmFibGVzID0ge1xuICBDU1NSdWxlTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIENTU1N0eWxlRGVjbGFyYXRpb246IGZhbHNlLFxuICBDU1NWYWx1ZUxpc3Q6IGZhbHNlLFxuICBDbGllbnRSZWN0TGlzdDogZmFsc2UsXG4gIERPTVJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NU3RyaW5nTGlzdDogZmFsc2UsXG4gIERPTVRva2VuTGlzdDogdHJ1ZSxcbiAgRGF0YVRyYW5zZmVySXRlbUxpc3Q6IGZhbHNlLFxuICBGaWxlTGlzdDogZmFsc2UsXG4gIEhUTUxBbGxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MRm9ybUVsZW1lbnQ6IGZhbHNlLFxuICBIVE1MU2VsZWN0RWxlbWVudDogZmFsc2UsXG4gIE1lZGlhTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIE1pbWVUeXBlQXJyYXk6IGZhbHNlLFxuICBOYW1lZE5vZGVNYXA6IGZhbHNlLFxuICBOb2RlTGlzdDogdHJ1ZSxcbiAgUGFpbnRSZXF1ZXN0TGlzdDogZmFsc2UsXG4gIFBsdWdpbjogZmFsc2UsXG4gIFBsdWdpbkFycmF5OiBmYWxzZSxcbiAgU1ZHTGVuZ3RoTGlzdDogZmFsc2UsXG4gIFNWR051bWJlckxpc3Q6IGZhbHNlLFxuICBTVkdQYXRoU2VnTGlzdDogZmFsc2UsXG4gIFNWR1BvaW50TGlzdDogZmFsc2UsXG4gIFNWR1N0cmluZ0xpc3Q6IGZhbHNlLFxuICBTVkdUcmFuc2Zvcm1MaXN0OiBmYWxzZSxcbiAgU291cmNlQnVmZmVyTGlzdDogZmFsc2UsXG4gIFN0eWxlU2hlZXRMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgVGV4dFRyYWNrQ3VlTGlzdDogZmFsc2UsXG4gIFRleHRUcmFja0xpc3Q6IGZhbHNlLFxuICBUb3VjaExpc3Q6IGZhbHNlXG59O1xuXG5mb3IgKHZhciBjb2xsZWN0aW9ucyA9IGdldEtleXMoRE9NSXRlcmFibGVzKSwgaSA9IDA7IGkgPCBjb2xsZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICB2YXIgTkFNRSA9IGNvbGxlY3Rpb25zW2ldO1xuICB2YXIgZXhwbGljaXQgPSBET01JdGVyYWJsZXNbTkFNRV07XG4gIHZhciBDb2xsZWN0aW9uID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgcHJvdG8gPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICB2YXIga2V5O1xuICBpZiAocHJvdG8pIHtcbiAgICBpZiAoIXByb3RvW0lURVJBVE9SXSkgaGlkZShwcm90bywgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTtcbiAgICBpZiAoIXByb3RvW1RPX1NUUklOR19UQUddKSBoaWRlKHByb3RvLCBUT19TVFJJTkdfVEFHLCBOQU1FKTtcbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBBcnJheVZhbHVlcztcbiAgICBpZiAoZXhwbGljaXQpIGZvciAoa2V5IGluICRpdGVyYXRvcnMpIGlmICghcHJvdG9ba2V5XSkgcmVkZWZpbmUocHJvdG8sIGtleSwgJGl0ZXJhdG9yc1trZXldLCB0cnVlKTtcbiAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIENvbnN0cnVjdG9yLCBuYW1lLCBmb3JiaWRkZW5GaWVsZCkge1xuICBpZiAoIShpdCBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSB8fCAoZm9yYmlkZGVuRmllbGQgIT09IHVuZGVmaW5lZCAmJiBmb3JiaWRkZW5GaWVsZCBpbiBpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IobmFtZSArICc6IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIEJSRUFLID0ge307XG52YXIgUkVUVVJOID0ge307XG52YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCBlbnRyaWVzLCBmbiwgdGhhdCwgSVRFUkFUT1IpIHtcbiAgdmFyIGl0ZXJGbiA9IElURVJBVE9SID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcmFibGU7IH0gOiBnZXRJdGVyRm4oaXRlcmFibGUpO1xuICB2YXIgZiA9IGN0eChmbiwgdGhhdCwgZW50cmllcyA/IDIgOiAxKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCwgc3RlcCwgaXRlcmF0b3IsIHJlc3VsdDtcbiAgaWYgKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ZXJhYmxlICsgJyBpcyBub3QgaXRlcmFibGUhJyk7XG4gIC8vIGZhc3QgY2FzZSBmb3IgYXJyYXlzIHdpdGggZGVmYXVsdCBpdGVyYXRvclxuICBpZiAoaXNBcnJheUl0ZXIoaXRlckZuKSkgZm9yIChsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgIHJlc3VsdCA9IGVudHJpZXMgPyBmKGFuT2JqZWN0KHN0ZXAgPSBpdGVyYWJsZVtpbmRleF0pWzBdLCBzdGVwWzFdKSA6IGYoaXRlcmFibGVbaW5kZXhdKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfSBlbHNlIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTspIHtcbiAgICByZXN1bHQgPSBjYWxsKGl0ZXJhdG9yLCBmLCBzdGVwLnZhbHVlLCBlbnRyaWVzKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcbmV4cG9ydHMuQlJFQUsgPSBCUkVBSztcbmV4cG9ydHMuUkVUVVJOID0gUkVUVVJOO1xuIiwiLy8gNy4zLjIwIFNwZWNpZXNDb25zdHJ1Y3RvcihPLCBkZWZhdWx0Q29uc3RydWN0b3IpXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBEKSB7XG4gIHZhciBDID0gYW5PYmplY3QoTykuY29uc3RydWN0b3I7XG4gIHZhciBTO1xuICByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IChTID0gYW5PYmplY3QoQylbU1BFQ0lFU10pID09IHVuZGVmaW5lZCA/IEQgOiBhRnVuY3Rpb24oUyk7XG59O1xuIiwiLy8gZmFzdCBhcHBseSwgaHR0cDovL2pzcGVyZi5sbmtpdC5jb20vZmFzdC1hcHBseS81XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgYXJncywgdGhhdCkge1xuICB2YXIgdW4gPSB0aGF0ID09PSB1bmRlZmluZWQ7XG4gIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiB1biA/IGZuKClcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCk7XG4gICAgY2FzZSAxOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgIGNhc2UgMzogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgY2FzZSA0OiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgfSByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJncyk7XG59O1xuIiwidmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGludm9rZSA9IHJlcXVpcmUoJy4vX2ludm9rZScpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuL19odG1sJyk7XG52YXIgY2VsID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBzZXRUYXNrID0gZ2xvYmFsLnNldEltbWVkaWF0ZTtcbnZhciBjbGVhclRhc2sgPSBnbG9iYWwuY2xlYXJJbW1lZGlhdGU7XG52YXIgTWVzc2FnZUNoYW5uZWwgPSBnbG9iYWwuTWVzc2FnZUNoYW5uZWw7XG52YXIgRGlzcGF0Y2ggPSBnbG9iYWwuRGlzcGF0Y2g7XG52YXIgY291bnRlciA9IDA7XG52YXIgcXVldWUgPSB7fTtcbnZhciBPTlJFQURZU1RBVEVDSEFOR0UgPSAnb25yZWFkeXN0YXRlY2hhbmdlJztcbnZhciBkZWZlciwgY2hhbm5lbCwgcG9ydDtcbnZhciBydW4gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpZCA9ICt0aGlzO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gIGlmIChxdWV1ZS5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICB2YXIgZm4gPSBxdWV1ZVtpZF07XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgICBmbigpO1xuICB9XG59O1xudmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIHJ1bi5jYWxsKGV2ZW50LmRhdGEpO1xufTtcbi8vIE5vZGUuanMgMC45KyAmIElFMTArIGhhcyBzZXRJbW1lZGlhdGUsIG90aGVyd2lzZTpcbmlmICghc2V0VGFzayB8fCAhY2xlYXJUYXNrKSB7XG4gIHNldFRhc2sgPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoZm4pIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIHZhciBpID0gMTtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgcXVldWVbKytjb3VudGVyXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgaW52b2tlKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbiksIGFyZ3MpO1xuICAgIH07XG4gICAgZGVmZXIoY291bnRlcik7XG4gICAgcmV0dXJuIGNvdW50ZXI7XG4gIH07XG4gIGNsZWFyVGFzayA9IGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGlkKSB7XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgfTtcbiAgLy8gTm9kZS5qcyAwLjgtXG4gIGlmIChyZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2VzcycpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhjdHgocnVuLCBpZCwgMSkpO1xuICAgIH07XG4gIC8vIFNwaGVyZSAoSlMgZ2FtZSBlbmdpbmUpIERpc3BhdGNoIEFQSVxuICB9IGVsc2UgaWYgKERpc3BhdGNoICYmIERpc3BhdGNoLm5vdykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBEaXNwYXRjaC5ub3coY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBCcm93c2VycyB3aXRoIE1lc3NhZ2VDaGFubmVsLCBpbmNsdWRlcyBXZWJXb3JrZXJzXG4gIH0gZWxzZSBpZiAoTWVzc2FnZUNoYW5uZWwpIHtcbiAgICBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgcG9ydCA9IGNoYW5uZWwucG9ydDI7XG4gICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBsaXN0ZW5lcjtcbiAgICBkZWZlciA9IGN0eChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0LCAxKTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBwb3N0TWVzc2FnZSwgc2tpcCBXZWJXb3JrZXJzXG4gIC8vIElFOCBoYXMgcG9zdE1lc3NhZ2UsIGJ1dCBpdCdzIHN5bmMgJiB0eXBlb2YgaXRzIHBvc3RNZXNzYWdlIGlzICdvYmplY3QnXG4gIH0gZWxzZSBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgJiYgdHlwZW9mIHBvc3RNZXNzYWdlID09ICdmdW5jdGlvbicgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShpZCArICcnLCAnKicpO1xuICAgIH07XG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAvLyBJRTgtXG4gIH0gZWxzZSBpZiAoT05SRUFEWVNUQVRFQ0hBTkdFIGluIGNlbCgnc2NyaXB0JykpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgaHRtbC5hcHBlbmRDaGlsZChjZWwoJ3NjcmlwdCcpKVtPTlJFQURZU1RBVEVDSEFOR0VdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICBydW4uY2FsbChpZCk7XG4gICAgICB9O1xuICAgIH07XG4gIC8vIFJlc3Qgb2xkIGJyb3dzZXJzXG4gIH0gZWxzZSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHNldFRpbWVvdXQoY3R4KHJ1biwgaWQsIDEpLCAwKTtcbiAgICB9O1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXRUYXNrLFxuICBjbGVhcjogY2xlYXJUYXNrXG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIG1hY3JvdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXQ7XG52YXIgT2JzZXJ2ZXIgPSBnbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBnbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgUHJvbWlzZSA9IGdsb2JhbC5Qcm9taXNlO1xudmFyIGlzTm9kZSA9IHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBoZWFkLCBsYXN0LCBub3RpZnk7XG5cbiAgdmFyIGZsdXNoID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXJlbnQsIGZuO1xuICAgIGlmIChpc05vZGUgJiYgKHBhcmVudCA9IHByb2Nlc3MuZG9tYWluKSkgcGFyZW50LmV4aXQoKTtcbiAgICB3aGlsZSAoaGVhZCkge1xuICAgICAgZm4gPSBoZWFkLmZuO1xuICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZuKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChoZWFkKSBub3RpZnkoKTtcbiAgICAgICAgZWxzZSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH0gbGFzdCA9IHVuZGVmaW5lZDtcbiAgICBpZiAocGFyZW50KSBwYXJlbnQuZW50ZXIoKTtcbiAgfTtcblxuICAvLyBOb2RlLmpzXG4gIGlmIChpc05vZGUpIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTtcbiAgICB9O1xuICAvLyBicm93c2VycyB3aXRoIE11dGF0aW9uT2JzZXJ2ZXIsIGV4Y2VwdCBpT1MgU2FmYXJpIC0gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzMzOVxuICB9IGVsc2UgaWYgKE9ic2VydmVyICYmICEoZ2xvYmFsLm5hdmlnYXRvciAmJiBnbG9iYWwubmF2aWdhdG9yLnN0YW5kYWxvbmUpKSB7XG4gICAgdmFyIHRvZ2dsZSA9IHRydWU7XG4gICAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gICAgbmV3IE9ic2VydmVyKGZsdXNoKS5vYnNlcnZlKG5vZGUsIHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBub2RlLmRhdGEgPSB0b2dnbGUgPSAhdG9nZ2xlO1xuICAgIH07XG4gIC8vIGVudmlyb25tZW50cyB3aXRoIG1heWJlIG5vbi1jb21wbGV0ZWx5IGNvcnJlY3QsIGJ1dCBleGlzdGVudCBQcm9taXNlXG4gIH0gZWxzZSBpZiAoUHJvbWlzZSAmJiBQcm9taXNlLnJlc29sdmUpIHtcbiAgICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb21pc2UudGhlbihmbHVzaCk7XG4gICAgfTtcbiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjpcbiAgLy8gLSBzZXRJbW1lZGlhdGVcbiAgLy8gLSBNZXNzYWdlQ2hhbm5lbFxuICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnXG4gIC8vIC0gb25yZWFkeXN0YXRlY2hhbmdlXG4gIC8vIC0gc2V0VGltZW91dFxuICB9IGVsc2Uge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbClcbiAgICAgIG1hY3JvdGFzay5jYWxsKGdsb2JhbCwgZmx1c2gpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGZuKSB7XG4gICAgdmFyIHRhc2sgPSB7IGZuOiBmbiwgbmV4dDogdW5kZWZpbmVkIH07XG4gICAgaWYgKGxhc3QpIGxhc3QubmV4dCA9IHRhc2s7XG4gICAgaWYgKCFoZWFkKSB7XG4gICAgICBoZWFkID0gdGFzaztcbiAgICAgIG5vdGlmeSgpO1xuICAgIH0gbGFzdCA9IHRhc2s7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjUuNC4xLjUgTmV3UHJvbWlzZUNhcGFiaWxpdHkoQylcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5cbmZ1bmN0aW9uIFByb21pc2VDYXBhYmlsaXR5KEMpIHtcbiAgdmFyIHJlc29sdmUsIHJlamVjdDtcbiAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24gKCQkcmVzb2x2ZSwgJCRyZWplY3QpIHtcbiAgICBpZiAocmVzb2x2ZSAhPT0gdW5kZWZpbmVkIHx8IHJlamVjdCAhPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoJ0JhZCBQcm9taXNlIGNvbnN0cnVjdG9yJyk7XG4gICAgcmVzb2x2ZSA9ICQkcmVzb2x2ZTtcbiAgICByZWplY3QgPSAkJHJlamVjdDtcbiAgfSk7XG4gIHRoaXMucmVzb2x2ZSA9IGFGdW5jdGlvbihyZXNvbHZlKTtcbiAgdGhpcy5yZWplY3QgPSBhRnVuY3Rpb24ocmVqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIChDKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiB7IGU6IGZhbHNlLCB2OiBleGVjKCkgfTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB7IGU6IHRydWUsIHY6IGUgfTtcbiAgfVxufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEMsIHgpIHtcbiAgYW5PYmplY3QoQyk7XG4gIGlmIChpc09iamVjdCh4KSAmJiB4LmNvbnN0cnVjdG9yID09PSBDKSByZXR1cm4geDtcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZihDKTtcbiAgdmFyIHJlc29sdmUgPSBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlO1xuICByZXNvbHZlKHgpO1xuICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTtcbn07XG4iLCJ2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzcmMsIHNhZmUpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldLCBzYWZlKTtcbiAgcmV0dXJuIHRhcmdldDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSkge1xuICB2YXIgQyA9IGdsb2JhbFtLRVldO1xuICBpZiAoREVTQ1JJUFRPUlMgJiYgQyAmJiAhQ1tTUEVDSUVTXSkgZFAuZihDLCBTUEVDSUVTLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfVxuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciB0YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldDtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuL19wZXJmb3JtJyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuL19wcm9taXNlLXJlc29sdmUnKTtcbnZhciBQUk9NSVNFID0gJ1Byb21pc2UnO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyICRQcm9taXNlID0gZ2xvYmFsW1BST01JU0VdO1xudmFyIGlzTm9kZSA9IGNsYXNzb2YocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xudmFyIGVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIEludGVybmFsLCBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHksIE93blByb21pc2VDYXBhYmlsaXR5LCBXcmFwcGVyO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZjtcblxudmFyIFVTRV9OQVRJVkUgPSAhIWZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICAvLyBjb3JyZWN0IHN1YmNsYXNzaW5nIHdpdGggQEBzcGVjaWVzIHN1cHBvcnRcbiAgICB2YXIgcHJvbWlzZSA9ICRQcm9taXNlLnJlc29sdmUoMSk7XG4gICAgdmFyIEZha2VQcm9taXNlID0gKHByb21pc2UuY29uc3RydWN0b3IgPSB7fSlbcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKV0gPSBmdW5jdGlvbiAoZXhlYykge1xuICAgICAgZXhlYyhlbXB0eSwgZW1wdHkpO1xuICAgIH07XG4gICAgLy8gdW5oYW5kbGVkIHJlamVjdGlvbnMgdHJhY2tpbmcgc3VwcG9ydCwgTm9kZUpTIFByb21pc2Ugd2l0aG91dCBpdCBmYWlscyBAQHNwZWNpZXMgdGVzdFxuICAgIHJldHVybiAoaXNOb2RlIHx8IHR5cGVvZiBQcm9taXNlUmVqZWN0aW9uRXZlbnQgPT0gJ2Z1bmN0aW9uJykgJiYgcHJvbWlzZS50aGVuKGVtcHR5KSBpbnN0YW5jZW9mIEZha2VQcm9taXNlO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn0oKTtcblxuLy8gaGVscGVyc1xudmFyIGlzVGhlbmFibGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHRoZW47XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgdHlwZW9mICh0aGVuID0gaXQudGhlbikgPT0gJ2Z1bmN0aW9uJyA/IHRoZW4gOiBmYWxzZTtcbn07XG52YXIgbm90aWZ5ID0gZnVuY3Rpb24gKHByb21pc2UsIGlzUmVqZWN0KSB7XG4gIGlmIChwcm9taXNlLl9uKSByZXR1cm47XG4gIHByb21pc2UuX24gPSB0cnVlO1xuICB2YXIgY2hhaW4gPSBwcm9taXNlLl9jO1xuICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIG9rID0gcHJvbWlzZS5fcyA9PSAxO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcnVuID0gZnVuY3Rpb24gKHJlYWN0aW9uKSB7XG4gICAgICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsO1xuICAgICAgdmFyIHJlc29sdmUgPSByZWFjdGlvbi5yZXNvbHZlO1xuICAgICAgdmFyIHJlamVjdCA9IHJlYWN0aW9uLnJlamVjdDtcbiAgICAgIHZhciBkb21haW4gPSByZWFjdGlvbi5kb21haW47XG4gICAgICB2YXIgcmVzdWx0LCB0aGVuO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICBpZiAoIW9rKSB7XG4gICAgICAgICAgICBpZiAocHJvbWlzZS5faCA9PSAyKSBvbkhhbmRsZVVuaGFuZGxlZChwcm9taXNlKTtcbiAgICAgICAgICAgIHByb21pc2UuX2ggPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaGFuZGxlciA9PT0gdHJ1ZSkgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoZG9tYWluKSBkb21haW4uZW50ZXIoKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IGhhbmRsZXIodmFsdWUpO1xuICAgICAgICAgICAgaWYgKGRvbWFpbikgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gcmVhY3Rpb24ucHJvbWlzZSkge1xuICAgICAgICAgICAgcmVqZWN0KFR5cGVFcnJvcignUHJvbWlzZS1jaGFpbiBjeWNsZScpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHRoZW4uY2FsbChyZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHJlamVjdCh2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHdoaWxlIChjaGFpbi5sZW5ndGggPiBpKSBydW4oY2hhaW5baSsrXSk7IC8vIHZhcmlhYmxlIGxlbmd0aCAtIGNhbid0IHVzZSBmb3JFYWNoXG4gICAgcHJvbWlzZS5fYyA9IFtdO1xuICAgIHByb21pc2UuX24gPSBmYWxzZTtcbiAgICBpZiAoaXNSZWplY3QgJiYgIXByb21pc2UuX2gpIG9uVW5oYW5kbGVkKHByb21pc2UpO1xuICB9KTtcbn07XG52YXIgb25VbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjtcbiAgICB2YXIgdW5oYW5kbGVkID0gaXNVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgdmFyIHJlc3VsdCwgaGFuZGxlciwgY29uc29sZTtcbiAgICBpZiAodW5oYW5kbGVkKSB7XG4gICAgICByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGlzTm9kZSkge1xuICAgICAgICAgIHByb2Nlc3MuZW1pdCgndW5oYW5kbGVkUmVqZWN0aW9uJywgdmFsdWUsIHByb21pc2UpO1xuICAgICAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub251bmhhbmRsZWRyZWplY3Rpb24pIHtcbiAgICAgICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiB2YWx1ZSB9KTtcbiAgICAgICAgfSBlbHNlIGlmICgoY29uc29sZSA9IGdsb2JhbC5jb25zb2xlKSAmJiBjb25zb2xlLmVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uJywgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8vIEJyb3dzZXJzIHNob3VsZCBub3QgdHJpZ2dlciBgcmVqZWN0aW9uSGFuZGxlZGAgZXZlbnQgaWYgaXQgd2FzIGhhbmRsZWQgaGVyZSwgTm9kZUpTIC0gc2hvdWxkXG4gICAgICBwcm9taXNlLl9oID0gaXNOb2RlIHx8IGlzVW5oYW5kbGVkKHByb21pc2UpID8gMiA6IDE7XG4gICAgfSBwcm9taXNlLl9hID0gdW5kZWZpbmVkO1xuICAgIGlmICh1bmhhbmRsZWQgJiYgcmVzdWx0LmUpIHRocm93IHJlc3VsdC52O1xuICB9KTtcbn07XG52YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICBpZiAocHJvbWlzZS5faCA9PSAxKSByZXR1cm4gZmFsc2U7XG4gIHZhciBjaGFpbiA9IHByb21pc2UuX2EgfHwgcHJvbWlzZS5fYztcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVhY3Rpb247XG4gIHdoaWxlIChjaGFpbi5sZW5ndGggPiBpKSB7XG4gICAgcmVhY3Rpb24gPSBjaGFpbltpKytdO1xuICAgIGlmIChyZWFjdGlvbi5mYWlsIHx8ICFpc1VuaGFuZGxlZChyZWFjdGlvbi5wcm9taXNlKSkgcmV0dXJuIGZhbHNlO1xuICB9IHJldHVybiB0cnVlO1xufTtcbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGFuZGxlcjtcbiAgICBpZiAoaXNOb2RlKSB7XG4gICAgICBwcm9jZXNzLmVtaXQoJ3JlamVjdGlvbkhhbmRsZWQnLCBwcm9taXNlKTtcbiAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub25yZWplY3Rpb25oYW5kbGVkKSB7XG4gICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiBwcm9taXNlLl92IH0pO1xuICAgIH1cbiAgfSk7XG59O1xudmFyICRyZWplY3QgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgcHJvbWlzZS5fcyA9IDI7XG4gIGlmICghcHJvbWlzZS5fYSkgcHJvbWlzZS5fYSA9IHByb21pc2UuX2Muc2xpY2UoKTtcbiAgbm90aWZ5KHByb21pc2UsIHRydWUpO1xufTtcbnZhciAkcmVzb2x2ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIHZhciB0aGVuO1xuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHRyeSB7XG4gICAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB0aHJvdyBUeXBlRXJyb3IoXCJQcm9taXNlIGNhbid0IGJlIHJlc29sdmVkIGl0c2VsZlwiKTtcbiAgICBpZiAodGhlbiA9IGlzVGhlbmFibGUodmFsdWUpKSB7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgd3JhcHBlciA9IHsgX3c6IHByb21pc2UsIF9kOiBmYWxzZSB9OyAvLyB3cmFwXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhlbi5jYWxsKHZhbHVlLCBjdHgoJHJlc29sdmUsIHdyYXBwZXIsIDEpLCBjdHgoJHJlamVjdCwgd3JhcHBlciwgMSkpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgJHJlamVjdC5jYWxsKHdyYXBwZXIsIGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICAgICAgcHJvbWlzZS5fcyA9IDE7XG4gICAgICBub3RpZnkocHJvbWlzZSwgZmFsc2UpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgICRyZWplY3QuY2FsbCh7IF93OiBwcm9taXNlLCBfZDogZmFsc2UgfSwgZSk7IC8vIHdyYXBcbiAgfVxufTtcblxuLy8gY29uc3RydWN0b3IgcG9seWZpbGxcbmlmICghVVNFX05BVElWRSkge1xuICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKVxuICAkUHJvbWlzZSA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICRQcm9taXNlLCBQUk9NSVNFLCAnX2gnKTtcbiAgICBhRnVuY3Rpb24oZXhlY3V0b3IpO1xuICAgIEludGVybmFsLmNhbGwodGhpcyk7XG4gICAgdHJ5IHtcbiAgICAgIGV4ZWN1dG9yKGN0eCgkcmVzb2x2ZSwgdGhpcywgMSksIGN0eCgkcmVqZWN0LCB0aGlzLCAxKSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAkcmVqZWN0LmNhbGwodGhpcywgZXJyKTtcbiAgICB9XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICBJbnRlcm5hbCA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICB0aGlzLl9jID0gW107ICAgICAgICAgICAgIC8vIDwtIGF3YWl0aW5nIHJlYWN0aW9uc1xuICAgIHRoaXMuX2EgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gY2hlY2tlZCBpbiBpc1VuaGFuZGxlZCByZWFjdGlvbnNcbiAgICB0aGlzLl9zID0gMDsgICAgICAgICAgICAgIC8vIDwtIHN0YXRlXG4gICAgdGhpcy5fZCA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBkb25lXG4gICAgdGhpcy5fdiA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSB2YWx1ZVxuICAgIHRoaXMuX2ggPSAwOyAgICAgICAgICAgICAgLy8gPC0gcmVqZWN0aW9uIHN0YXRlLCAwIC0gZGVmYXVsdCwgMSAtIGhhbmRsZWQsIDIgLSB1bmhhbmRsZWRcbiAgICB0aGlzLl9uID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIG5vdGlmeVxuICB9O1xuICBJbnRlcm5hbC5wcm90b3R5cGUgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKSgkUHJvbWlzZS5wcm90b3R5cGUsIHtcbiAgICAvLyAyNS40LjUuMyBQcm9taXNlLnByb3RvdHlwZS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKVxuICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgIHZhciByZWFjdGlvbiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkUHJvbWlzZSkpO1xuICAgICAgcmVhY3Rpb24ub2sgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogdHJ1ZTtcbiAgICAgIHJlYWN0aW9uLmZhaWwgPSB0eXBlb2Ygb25SZWplY3RlZCA9PSAnZnVuY3Rpb24nICYmIG9uUmVqZWN0ZWQ7XG4gICAgICByZWFjdGlvbi5kb21haW4gPSBpc05vZGUgPyBwcm9jZXNzLmRvbWFpbiA6IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2MucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAodGhpcy5fYSkgdGhpcy5fYS5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmICh0aGlzLl9zKSBub3RpZnkodGhpcywgZmFsc2UpO1xuICAgICAgcmV0dXJuIHJlYWN0aW9uLnByb21pc2U7XG4gICAgfSxcbiAgICAvLyAyNS40LjUuMSBQcm9taXNlLnByb3RvdHlwZS5jYXRjaChvblJlamVjdGVkKVxuICAgICdjYXRjaCc6IGZ1bmN0aW9uIChvblJlamVjdGVkKSB7XG4gICAgICByZXR1cm4gdGhpcy50aGVuKHVuZGVmaW5lZCwgb25SZWplY3RlZCk7XG4gICAgfVxuICB9KTtcbiAgT3duUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb21pc2UgPSBuZXcgSW50ZXJuYWwoKTtcbiAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xuICAgIHRoaXMucmVzb2x2ZSA9IGN0eCgkcmVzb2x2ZSwgcHJvbWlzZSwgMSk7XG4gICAgdGhpcy5yZWplY3QgPSBjdHgoJHJlamVjdCwgcHJvbWlzZSwgMSk7XG4gIH07XG4gIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gICAgcmV0dXJuIEMgPT09ICRQcm9taXNlIHx8IEMgPT09IFdyYXBwZXJcbiAgICAgID8gbmV3IE93blByb21pc2VDYXBhYmlsaXR5KEMpXG4gICAgICA6IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBQcm9taXNlOiAkUHJvbWlzZSB9KTtcbnJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJykoJFByb21pc2UsIFBST01JU0UpO1xucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShQUk9NSVNFKTtcbldyYXBwZXIgPSByZXF1aXJlKCcuL19jb3JlJylbUFJPTUlTRV07XG5cbi8vIHN0YXRpY3NcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjUgUHJvbWlzZS5yZWplY3QocilcbiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocikge1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkodGhpcyk7XG4gICAgdmFyICQkcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgJCRyZWplY3Qocik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChMSUJSQVJZIHx8ICFVU0VfTkFUSVZFKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNiBQcm9taXNlLnJlc29sdmUoeClcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KSB7XG4gICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKExJQlJBUlkgJiYgdGhpcyA9PT0gV3JhcHBlciA/ICRQcm9taXNlIDogdGhpcywgeCk7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKFVTRV9OQVRJVkUgJiYgcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbiAoaXRlcikge1xuICAkUHJvbWlzZS5hbGwoaXRlcilbJ2NhdGNoJ10oZW1wdHkpO1xufSkpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC4xIFByb21pc2UuYWxsKGl0ZXJhYmxlKVxuICBhbGw6IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZXNvbHZlID0gY2FwYWJpbGl0eS5yZXNvbHZlO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IDE7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIHZhciAkaW5kZXggPSBpbmRleCsrO1xuICAgICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGFscmVhZHlDYWxsZWQpIHJldHVybjtcbiAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICB2YWx1ZXNbJGluZGV4XSA9IHZhbHVlO1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9LFxuICAvLyAyNS40LjQuNCBQcm9taXNlLnJhY2UoaXRlcmFibGUpXG4gIHJhY2U6IGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihjYXBhYmlsaXR5LnJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmUpIHJlamVjdChyZXN1bHQudik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4iLCIvKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG5cbid1c2Ugc3RyaWN0J1xuXG52YXIgaXNJbml0aWFsaXplZCA9IGZhbHNlXG5cbi8vIG1ham9yIGV2ZW50cyBzdXBwb3J0ZWQ6XG4vLyAgIHBhbnN0YXJ0XG4vLyAgIHBhbm1vdmVcbi8vICAgcGFuZW5kXG4vLyAgIHN3aXBlXG4vLyAgIGxvbmdwcmVzc1xuLy8gZXh0cmEgZXZlbnRzIHN1cHBvcnRlZDpcbi8vICAgZHVhbHRvdWNoc3RhcnRcbi8vICAgZHVhbHRvdWNoXG4vLyAgIGR1YWx0b3VjaGVuZFxuLy8gICB0YXBcbi8vICAgZG91YmxldGFwXG4vLyAgIHByZXNzZW5kXG5cbnZhciBkb2MgPSB3aW5kb3cuZG9jdW1lbnRcbnZhciBkb2NFbCA9IGRvYy5kb2N1bWVudEVsZW1lbnRcbnZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZVxudmFyIGdlc3R1cmVzID0ge31cbnZhciBsYXN0VGFwID0gbnVsbFxuXG4vKipcbiAqIGZpbmQgdGhlIGNsb3Nlc3QgY29tbW9uIGFuY2VzdG9yXG4gKiBpZiB0aGVyZSdzIG5vIG9uZSwgcmV0dXJuIG51bGxcbiAqXG4gKiBAcGFyYW0gIHtFbGVtZW50fSBlbDEgZmlyc3QgZWxlbWVudFxuICogQHBhcmFtICB7RWxlbWVudH0gZWwyIHNlY29uZCBlbGVtZW50XG4gKiBAcmV0dXJuIHtFbGVtZW50fSAgICAgY29tbW9uIGFuY2VzdG9yXG4gKi9cbmZ1bmN0aW9uIGdldENvbW1vbkFuY2VzdG9yKGVsMSwgZWwyKSB7XG4gIHZhciBlbCA9IGVsMVxuICB3aGlsZSAoZWwpIHtcbiAgICBpZiAoZWwuY29udGFpbnMoZWwyKSB8fCBlbCA9PSBlbDIpIHtcbiAgICAgIHJldHVybiBlbFxuICAgIH1cbiAgICBlbCA9IGVsLnBhcmVudE5vZGVcbiAgfVxuICByZXR1cm4gbnVsbFxufVxuXG4vKipcbiAqIGZpcmUgYSBIVE1MRXZlbnRcbiAqXG4gKiBAcGFyYW0gIHtFbGVtZW50fSBlbGVtZW50IHdoaWNoIGVsZW1lbnQgdG8gZmlyZSBhIGV2ZW50IG9uXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICB0eXBlICAgIHR5cGUgb2YgZXZlbnRcbiAqIEBwYXJhbSAge29iamVjdH0gIGV4dHJhICAgZXh0cmEgZGF0YSBmb3IgdGhlIGV2ZW50IG9iamVjdFxuICovXG5mdW5jdGlvbiBmaXJlRXZlbnQoZWxlbWVudCwgdHlwZSwgZXh0cmEpIHtcbiAgdmFyIGV2ZW50ID0gZG9jLmNyZWF0ZUV2ZW50KCdIVE1MRXZlbnRzJylcbiAgZXZlbnQuaW5pdEV2ZW50KHR5cGUsIHRydWUsIHRydWUpXG5cbiAgaWYgKHR5cGVvZiBleHRyYSA9PT0gJ29iamVjdCcpIHtcbiAgICBmb3IgKHZhciBwIGluIGV4dHJhKSB7XG4gICAgICBldmVudFtwXSA9IGV4dHJhW3BdXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEEgZmxhZyB0byBkaXN0aW5ndWlzaCB3aXRoIG90aGVyIGV2ZW50cyB3aXRoIHRoZSBzYW1lIG5hbWUgZ2VuZXJhdGVkXG4gICAqIGJ5IGFub3RoZXIgbGlicmFyeSBpbiB0aGUgc2FtZSBwYWdlLlxuICAgKi8gXG4gIGV2ZW50Ll9mb3IgPSAnd2VleCdcblxuICBlbGVtZW50LmRpc3BhdGNoRXZlbnQoZXZlbnQpXG59XG5cbi8qKlxuICogY2FsYyB0aGUgdHJhbnNmb3JtXG4gKiBhc3N1bWUgNCBwb2ludHMgQUJDRCBvbiB0aGUgY29vcmRpbmF0ZSBzeXN0ZW1cbiAqID4gcm90YXRl77yaYW5nbGUgcm90YXRpbmcgZnJvbSBBQiB0byBDRFxuICogPiBzY2FsZe+8mnNjYWxlIHJhdGlvIGZyb20gQUIgdG8gQ0RcbiAqID4gdHJhbnNsYXRl77yadHJhbnNsYXRlIHNoaWZ0IGZyb20gQSB0byBDXG4gKlxuICogQHBhcmFtICB7bnVtYmVyfSB4MSBhYnNjaXNzYSBvZiBBXG4gKiBAcGFyYW0gIHtudW1iZXJ9IHkxIG9yZGluYXRlIG9mIEFcbiAqIEBwYXJhbSAge251bWJlcn0geDIgYWJzY2lzc2Egb2YgQlxuICogQHBhcmFtICB7bnVtYmVyfSB5MiBvcmRpbmF0ZSBvZiBCXG4gKiBAcGFyYW0gIHtudW1iZXJ9IHgzIGFic2Npc3NhIG9mIENcbiAqIEBwYXJhbSAge251bWJlcn0geTMgb3JkaW5hdGUgb2YgQ1xuICogQHBhcmFtICB7bnVtYmVyfSB4NCBhYnNjaXNzYSBvZiBEXG4gKiBAcGFyYW0gIHtudW1iZXJ9IHk0IG9yZGluYXRlIG9mIERcbiAqIEByZXR1cm4ge29iamVjdH0gICAgdHJhbnNmb3JtIG9iamVjdCBsaWtlXG4gKiAgIHtyb3RhdGUsIHNjYWxlLCB0cmFuc2xhdGVbMl0sIG1hdHJpeFszXVszXX1cbiAqL1xuZnVuY3Rpb24gY2FsYyh4MSwgeTEsIHgyLCB5MiwgeDMsIHkzLCB4NCwgeTQpIHtcbiAgdmFyIHJvdGF0ZSA9IE1hdGguYXRhbjIoeTQgLSB5MywgeDQgLSB4MykgLSBNYXRoLmF0YW4yKHkyIC0geTEsIHgyIC0geDEpXG4gIHZhciBzY2FsZSA9IE1hdGguc3FydCgoTWF0aC5wb3coeTQgLSB5MywgMilcbiAgICArIE1hdGgucG93KHg0IC0geDMsIDIpKSAvIChNYXRoLnBvdyh5MiAtIHkxLCAyKVxuICAgICsgTWF0aC5wb3coeDIgLSB4MSwgMikpKVxuICB2YXIgdHJhbnNsYXRlID0gW1xuICAgIHgzXG4gICAgLSBzY2FsZSAqIHgxICogTWF0aC5jb3Mocm90YXRlKVxuICAgICsgc2NhbGUgKiB5MSAqIE1hdGguc2luKHJvdGF0ZSksXG4gICAgeTNcbiAgICAtIHNjYWxlICogeTEgKiBNYXRoLmNvcyhyb3RhdGUpXG4gICAgLSBzY2FsZSAqIHgxICogTWF0aC5zaW4ocm90YXRlKV1cblxuICByZXR1cm4ge1xuICAgIHJvdGF0ZTogcm90YXRlLFxuICAgIHNjYWxlOiBzY2FsZSxcbiAgICB0cmFuc2xhdGU6IHRyYW5zbGF0ZSxcbiAgICBtYXRyaXg6IFtcbiAgICAgIFtzY2FsZSAqIE1hdGguY29zKHJvdGF0ZSksIC1zY2FsZSAqIE1hdGguc2luKHJvdGF0ZSksIHRyYW5zbGF0ZVswXV0sXG4gICAgICBbc2NhbGUgKiBNYXRoLnNpbihyb3RhdGUpLCBzY2FsZSAqIE1hdGguY29zKHJvdGF0ZSksIHRyYW5zbGF0ZVsxXV0sXG4gICAgICBbMCwgMCwgMV1cbiAgICBdXG4gIH1cbn1cblxuLyoqXG4gKiB0YWtlIG92ZXIgdGhlIHRvdWNoc3RhcnQgZXZlbnRzLiBBZGQgbmV3IHRvdWNoZXMgdG8gdGhlIGdlc3R1cmVzLlxuICogSWYgdGhlcmUgaXMgbm8gcHJldmlvdXMgcmVjb3JkcywgdGhlbiBiaW5kIHRvdWNobW92ZSwgdG9jaGVuZFxuICogYW5kIHRvdWNoY2FuY2VsIGV2ZW50cy5cbiAqIG5ldyB0b3VjaGVzIGluaXRpYWxpemVkIHdpdGggc3RhdGUgJ3RhcHBpbmcnLCBhbmQgd2l0aGluIDUwMCBtaWxsaXNlY29uZHNcbiAqIGlmIHRoZSBzdGF0ZSBpcyBzdGlsbCB0YXBwaW5nLCB0aGVuIHRyaWdnZXIgZ2VzdHVyZSAncHJlc3MnLlxuICogSWYgdGhlcmUgYXJlIHR3byB0b3VjaGUgcG9pbnRzLCB0aGVuIHRoZSAnZHVhbHRvdWNoc3RhcnQnIGlzIHRyaWdnZXJkLiBUaGVcbiAqIG5vZGUgb2YgdGhlIHRvdWNoIGdlc3R1cmUgaXMgdGhlaXIgY2xvZXN0IGNvbW1vbiBhbmNlc3Rvci5cbiAqXG4gKiBAZXZlbnRcbiAqIEBwYXJhbSAge2V2ZW50fSBldmVudFxuICovXG5mdW5jdGlvbiB0b3VjaHN0YXJ0SGFuZGxlcihldmVudCkge1xuXG4gIGlmIChPYmplY3Qua2V5cyhnZXN0dXJlcykubGVuZ3RoID09PSAwKSB7XG4gICAgZG9jRWwuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdG91Y2htb3ZlSGFuZGxlciwgdHJ1ZSlcbiAgICBkb2NFbC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRvdWNoZW5kSGFuZGxlciwgdHJ1ZSlcbiAgICBkb2NFbC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGNhbmNlbCcsIHRvdWNoY2FuY2VsSGFuZGxlciwgdHJ1ZSlcbiAgfVxuXG4gIC8vIHJlY29yZCBldmVyeSB0b3VjaFxuICBmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50LmNoYW5nZWRUb3VjaGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHRvdWNoID0gZXZlbnQuY2hhbmdlZFRvdWNoZXNbaV1cbiAgICB2YXIgdG91Y2hSZWNvcmQgPSB7fVxuXG4gICAgZm9yICh2YXIgcCBpbiB0b3VjaCkge1xuICAgICAgdG91Y2hSZWNvcmRbcF0gPSB0b3VjaFtwXVxuICAgIH1cblxuICAgIHZhciBnZXN0dXJlID0ge1xuICAgICAgc3RhcnRUb3VjaDogdG91Y2hSZWNvcmQsXG4gICAgICBzdGFydFRpbWU6IERhdGUubm93KCksXG4gICAgICBzdGF0dXM6ICd0YXBwaW5nJyxcbiAgICAgIGVsZW1lbnQ6IGV2ZW50LnNyY0VsZW1lbnQgfHwgZXZlbnQudGFyZ2V0LFxuICAgICAgcHJlc3NpbmdIYW5kbGVyOiBzZXRUaW1lb3V0KGZ1bmN0aW9uIChlbGVtZW50LCB0b3VjaCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChnZXN0dXJlLnN0YXR1cyA9PT0gJ3RhcHBpbmcnKSB7XG4gICAgICAgICAgICBnZXN0dXJlLnN0YXR1cyA9ICdwcmVzc2luZydcblxuICAgICAgICAgICAgZmlyZUV2ZW50KGVsZW1lbnQsICdsb25ncHJlc3MnLCB7XG4gICAgICAgICAgICAgIC8vIGFkZCB0b3VjaCBkYXRhIGZvciB3ZWV4XG4gICAgICAgICAgICAgIHRvdWNoOiB0b3VjaCxcbiAgICAgICAgICAgICAgdG91Y2hlczogZXZlbnQudG91Y2hlcyxcbiAgICAgICAgICAgICAgY2hhbmdlZFRvdWNoZXM6IGV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICAgICAgICB0b3VjaEV2ZW50OiBldmVudFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjbGVhclRpbWVvdXQoZ2VzdHVyZS5wcmVzc2luZ0hhbmRsZXIpXG4gICAgICAgICAgZ2VzdHVyZS5wcmVzc2luZ0hhbmRsZXIgPSBudWxsXG4gICAgICAgIH1cbiAgICAgIH0oZXZlbnQuc3JjRWxlbWVudCB8fCBldmVudC50YXJnZXQsIGV2ZW50LmNoYW5nZWRUb3VjaGVzW2ldKSwgNTAwKVxuICAgIH1cbiAgICBnZXN0dXJlc1t0b3VjaC5pZGVudGlmaWVyXSA9IGdlc3R1cmVcbiAgfVxuXG4gIGlmIChPYmplY3Qua2V5cyhnZXN0dXJlcykubGVuZ3RoID09IDIpIHtcbiAgICB2YXIgZWxlbWVudHMgPSBbXVxuXG4gICAgZm9yICh2YXIgcCBpbiBnZXN0dXJlcykge1xuICAgICAgZWxlbWVudHMucHVzaChnZXN0dXJlc1twXS5lbGVtZW50KVxuICAgIH1cblxuICAgIGZpcmVFdmVudChnZXRDb21tb25BbmNlc3RvcihlbGVtZW50c1swXSwgZWxlbWVudHNbMV0pLCAnZHVhbHRvdWNoc3RhcnQnLCB7XG4gICAgICB0b3VjaGVzOiBzbGljZS5jYWxsKGV2ZW50LnRvdWNoZXMpLFxuICAgICAgdG91Y2hFdmVudDogZXZlbnRcbiAgICB9KVxuICB9XG59XG5cbi8qKlxuICogdGFrZSBvdmVyIHRvdWNobW92ZSBldmVudHMsIGFuZCBoYW5kbGUgcGFuIGFuZCBkdWFsIHJlbGF0ZWQgZ2VzdHVyZXMuXG4gKlxuICogMS4gdHJhdmVyc2UgZXZlcnkgdG91Y2ggcG9pbnTvvJpcbiAqID4gaWYgJ3RhcHBpbmcnIGFuZCB0aGUgc2hpZnQgaXMgb3ZlciAxMCBwaXhsZXMsIHRoZW4gaXQncyBhICdwYW5uaW5nJy5cbiAqIDIuIGlmIHRoZXJlIGFyZSB0d28gdG91Y2ggcG9pbnRzLCB0aGVuIGNhbGMgdGhlIHRyYW5mb3JtIGFuZCB0cmlnZ2VyXG4gKiAgICdkdWFsdG91Y2gnLlxuICpcbiAqIEBldmVudFxuICogQHBhcmFtICB7ZXZlbnR9IGV2ZW50XG4gKi9cbmZ1bmN0aW9uIHRvdWNobW92ZUhhbmRsZXIoZXZlbnQpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudC5jaGFuZ2VkVG91Y2hlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b3VjaCA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzW2ldXG4gICAgdmFyIGdlc3R1cmUgPSBnZXN0dXJlc1t0b3VjaC5pZGVudGlmaWVyXVxuXG4gICAgaWYgKCFnZXN0dXJlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoIWdlc3R1cmUubGFzdFRvdWNoKSB7XG4gICAgICBnZXN0dXJlLmxhc3RUb3VjaCA9IGdlc3R1cmUuc3RhcnRUb3VjaFxuICAgIH1cbiAgICBpZiAoIWdlc3R1cmUubGFzdFRpbWUpIHtcbiAgICAgIGdlc3R1cmUubGFzdFRpbWUgPSBnZXN0dXJlLnN0YXJ0VGltZVxuICAgIH1cbiAgICBpZiAoIWdlc3R1cmUudmVsb2NpdHlYKSB7XG4gICAgICBnZXN0dXJlLnZlbG9jaXR5WCA9IDBcbiAgICB9XG4gICAgaWYgKCFnZXN0dXJlLnZlbG9jaXR5WSkge1xuICAgICAgZ2VzdHVyZS52ZWxvY2l0eVkgPSAwXG4gICAgfVxuICAgIGlmICghZ2VzdHVyZS5kdXJhdGlvbikge1xuICAgICAgZ2VzdHVyZS5kdXJhdGlvbiA9IDBcbiAgICB9XG5cbiAgICB2YXIgdGltZSA9ICBEYXRlLm5vdygpIC0gZ2VzdHVyZS5sYXN0VGltZVxuICAgIHZhciB2eCA9ICh0b3VjaC5jbGllbnRYIC0gZ2VzdHVyZS5sYXN0VG91Y2guY2xpZW50WCkgLyB0aW1lXG4gICAgdmFyIHZ5ID0gKHRvdWNoLmNsaWVudFkgLSBnZXN0dXJlLmxhc3RUb3VjaC5jbGllbnRZKSAvIHRpbWVcblxuICAgIHZhciBSRUNPUkRfRFVSQVRJT04gPSA3MFxuICAgIGlmICh0aW1lID4gUkVDT1JEX0RVUkFUSU9OKSB7XG4gICAgICB0aW1lID0gUkVDT1JEX0RVUkFUSU9OXG4gICAgfVxuICAgIGlmIChnZXN0dXJlLmR1cmF0aW9uICsgdGltZSA+IFJFQ09SRF9EVVJBVElPTikge1xuICAgICAgZ2VzdHVyZS5kdXJhdGlvbiA9IFJFQ09SRF9EVVJBVElPTiAtIHRpbWVcbiAgICB9XG5cbiAgICBnZXN0dXJlLnZlbG9jaXR5WCA9IChnZXN0dXJlLnZlbG9jaXR5WCAqIGdlc3R1cmUuZHVyYXRpb24gKyB2eCAqIHRpbWUpXG4gICAgICAvIChnZXN0dXJlLmR1cmF0aW9uICsgdGltZSlcbiAgICBnZXN0dXJlLnZlbG9jaXR5WSA9IChnZXN0dXJlLnZlbG9jaXR5WSAqIGdlc3R1cmUuZHVyYXRpb24gKyB2eSAqIHRpbWUpXG4gICAgICAvIChnZXN0dXJlLmR1cmF0aW9uICsgdGltZSlcbiAgICBnZXN0dXJlLmR1cmF0aW9uICs9IHRpbWVcblxuICAgIGdlc3R1cmUubGFzdFRvdWNoID0ge31cblxuICAgIGZvciAodmFyIHAgaW4gdG91Y2gpIHtcbiAgICAgIGdlc3R1cmUubGFzdFRvdWNoW3BdID0gdG91Y2hbcF1cbiAgICB9XG4gICAgZ2VzdHVyZS5sYXN0VGltZSA9IERhdGUubm93KClcblxuICAgIHZhciBkaXNwbGFjZW1lbnRYID0gdG91Y2guY2xpZW50WCAtIGdlc3R1cmUuc3RhcnRUb3VjaC5jbGllbnRYXG4gICAgdmFyIGRpc3BsYWNlbWVudFkgPSB0b3VjaC5jbGllbnRZIC0gZ2VzdHVyZS5zdGFydFRvdWNoLmNsaWVudFlcbiAgICB2YXIgZGlzdGFuY2UgPSBNYXRoLnNxcnQoTWF0aC5wb3coZGlzcGxhY2VtZW50WCwgMilcbiAgICAgICsgTWF0aC5wb3coZGlzcGxhY2VtZW50WSwgMikpXG4gICAgdmFyIGlzVmVydGljYWwgPSAhKE1hdGguYWJzKGRpc3BsYWNlbWVudFgpID4gTWF0aC5hYnMoZGlzcGxhY2VtZW50WSkpXG4gICAgdmFyIGRpcmVjdGlvbiA9IGlzVmVydGljYWxcbiAgICAgID8gZGlzcGxhY2VtZW50WSA+PSAwID8gJ2Rvd24nIDogJ3VwJ1xuICAgICAgOiBkaXNwbGFjZW1lbnRYID49IDAgPyAncmlnaHQnIDogJ2xlZnQnXG5cbiAgICAvLyBtYWdpYyBudW1iZXIgMTA6IG1vdmluZyAxMHB4IG1lYW5zIHBhbiwgbm90IHRhcFxuICAgIGlmICgoZ2VzdHVyZS5zdGF0dXMgPT09ICd0YXBwaW5nJyB8fCBnZXN0dXJlLnN0YXR1cyA9PT0gJ3ByZXNzaW5nJylcbiAgICAgICAgJiYgZGlzdGFuY2UgPiAxMCkge1xuICAgICAgZ2VzdHVyZS5zdGF0dXMgPSAncGFubmluZydcbiAgICAgIGdlc3R1cmUuaXNWZXJ0aWNhbCA9IGlzVmVydGljYWxcbiAgICAgIGdlc3R1cmUuZGlyZWN0aW9uID0gZGlyZWN0aW9uXG5cbiAgICAgIGZpcmVFdmVudChnZXN0dXJlLmVsZW1lbnQsICdwYW5zdGFydCcsIHtcbiAgICAgICAgdG91Y2g6IHRvdWNoLFxuICAgICAgICB0b3VjaGVzOiBldmVudC50b3VjaGVzLFxuICAgICAgICBjaGFuZ2VkVG91Y2hlczogZXZlbnQuY2hhbmdlZFRvdWNoZXMsXG4gICAgICAgIHRvdWNoRXZlbnQ6IGV2ZW50LFxuICAgICAgICBpc1ZlcnRpY2FsOiBnZXN0dXJlLmlzVmVydGljYWwsXG4gICAgICAgIGRpcmVjdGlvbjogZGlyZWN0aW9uXG4gICAgICB9KVxuICAgIH1cblxuICAgIGlmIChnZXN0dXJlLnN0YXR1cyA9PT0gJ3Bhbm5pbmcnKSB7XG4gICAgICBnZXN0dXJlLnBhblRpbWUgPSBEYXRlLm5vdygpXG5cbiAgICAgIGZpcmVFdmVudChnZXN0dXJlLmVsZW1lbnQsICdwYW5tb3ZlJywge1xuICAgICAgICBkaXNwbGFjZW1lbnRYOiBkaXNwbGFjZW1lbnRYLFxuICAgICAgICBkaXNwbGFjZW1lbnRZOiBkaXNwbGFjZW1lbnRZLFxuICAgICAgICB0b3VjaDogdG91Y2gsXG4gICAgICAgIHRvdWNoZXM6IGV2ZW50LnRvdWNoZXMsXG4gICAgICAgIGNoYW5nZWRUb3VjaGVzOiBldmVudC5jaGFuZ2VkVG91Y2hlcyxcbiAgICAgICAgdG91Y2hFdmVudDogZXZlbnQsXG4gICAgICAgIGlzVmVydGljYWw6IGdlc3R1cmUuaXNWZXJ0aWNhbCxcbiAgICAgICAgZGlyZWN0aW9uOiBkaXJlY3Rpb25cbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgaWYgKE9iamVjdC5rZXlzKGdlc3R1cmVzKS5sZW5ndGggPT0gMikge1xuICAgIHZhciBwb3NpdGlvbiA9IFtdXG4gICAgdmFyIGN1cnJlbnQgPSBbXVxuICAgIHZhciBlbGVtZW50cyA9IFtdXG4gICAgdmFyIHRyYW5zZm9ybVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudC50b3VjaGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdG91Y2ggPSBldmVudC50b3VjaGVzW2ldXG4gICAgICB2YXIgZ2VzdHVyZSA9IGdlc3R1cmVzW3RvdWNoLmlkZW50aWZpZXJdXG4gICAgICBwb3NpdGlvbi5wdXNoKFtnZXN0dXJlLnN0YXJ0VG91Y2guY2xpZW50WCwgZ2VzdHVyZS5zdGFydFRvdWNoLmNsaWVudFldKVxuICAgICAgY3VycmVudC5wdXNoKFt0b3VjaC5jbGllbnRYLCB0b3VjaC5jbGllbnRZXSlcbiAgICB9XG5cbiAgICBmb3IgKHZhciBwIGluIGdlc3R1cmVzKSB7XG4gICAgICBlbGVtZW50cy5wdXNoKGdlc3R1cmVzW3BdLmVsZW1lbnQpXG4gICAgfVxuXG4gICAgdHJhbnNmb3JtID0gY2FsYyhcbiAgICAgIHBvc2l0aW9uWzBdWzBdLFxuICAgICAgcG9zaXRpb25bMF1bMV0sXG4gICAgICBwb3NpdGlvblsxXVswXSxcbiAgICAgIHBvc2l0aW9uWzFdWzFdLFxuICAgICAgY3VycmVudFswXVswXSxcbiAgICAgIGN1cnJlbnRbMF1bMV0sXG4gICAgICBjdXJyZW50WzFdWzBdLFxuICAgICAgY3VycmVudFsxXVsxXVxuICAgIClcbiAgICBmaXJlRXZlbnQoZ2V0Q29tbW9uQW5jZXN0b3IoZWxlbWVudHNbMF0sIGVsZW1lbnRzWzFdKSwgJ2R1YWx0b3VjaCcsIHtcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNmb3JtLFxuICAgICAgdG91Y2hlczogZXZlbnQudG91Y2hlcyxcbiAgICAgIHRvdWNoRXZlbnQ6IGV2ZW50XG4gICAgfSlcbiAgfVxufVxuXG4vKipcbiAqIGhhbmRsZSB0b3VjaGVuZCBldmVudFxuICpcbiAqIDEuIGlmIHRoZXJlIGFyZSB0b3cgdG91Y2ggcG9pbnRzLCB0aGVuIHRyaWdnZXIgJ2R1YWx0b3VjaGVuZCflpoJcbiAqXG4gKiAyLiB0cmF2ZXJzZSBldmVyeSB0b3VjaCBwaW9udO+8mlxuICogPiBpZiB0YXBwaW5nLCB0aGVuIHRyaWdnZXIgJ3RhcCcuXG4gKiBJZiB0aGVyZSBpcyBhIHRhcCAzMDAgbWlsbGlzZWNvbmRzIGJlZm9yZSwgdGhlbiBpdCdzIGEgJ2RvdWJsZXRhcCcuXG4gKiA+IGlmIHBhZGRpbmcsIHRoZW4gZGVjaWRlIHRvIHRyaWdnZXIgJ3BhbmVuZCcgb3IgJ3N3aXBlJ1xuICogPiBpZiBwcmVzc2luZywgdGhlbiB0cmlnZ2VyICdwcmVzc2VuZCcuXG4gKlxuICogMy4gcmVtb3ZlIGxpc3RlbmVycy5cbiAqXG4gKiBAZXZlbnRcbiAqIEBwYXJhbSAge2V2ZW50fSBldmVudFxuICovXG5mdW5jdGlvbiB0b3VjaGVuZEhhbmRsZXIoZXZlbnQpIHtcblxuICBpZiAoT2JqZWN0LmtleXMoZ2VzdHVyZXMpLmxlbmd0aCA9PSAyKSB7XG4gICAgdmFyIGVsZW1lbnRzID0gW11cbiAgICBmb3IgKHZhciBwIGluIGdlc3R1cmVzKSB7XG4gICAgICBlbGVtZW50cy5wdXNoKGdlc3R1cmVzW3BdLmVsZW1lbnQpXG4gICAgfVxuICAgIGZpcmVFdmVudChnZXRDb21tb25BbmNlc3RvcihlbGVtZW50c1swXSwgZWxlbWVudHNbMV0pLCAnZHVhbHRvdWNoZW5kJywge1xuICAgICAgdG91Y2hlczogc2xpY2UuY2FsbChldmVudC50b3VjaGVzKSxcbiAgICAgIHRvdWNoRXZlbnQ6IGV2ZW50XG4gICAgfSlcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZXZlbnQuY2hhbmdlZFRvdWNoZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdG91Y2ggPSBldmVudC5jaGFuZ2VkVG91Y2hlc1tpXVxuICAgIHZhciBpZCA9IHRvdWNoLmlkZW50aWZpZXJcbiAgICB2YXIgZ2VzdHVyZSA9IGdlc3R1cmVzW2lkXVxuXG4gICAgaWYgKCFnZXN0dXJlKSB7XG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIGlmIChnZXN0dXJlLnByZXNzaW5nSGFuZGxlcikge1xuICAgICAgY2xlYXJUaW1lb3V0KGdlc3R1cmUucHJlc3NpbmdIYW5kbGVyKVxuICAgICAgZ2VzdHVyZS5wcmVzc2luZ0hhbmRsZXIgPSBudWxsXG4gICAgfVxuXG4gICAgaWYgKGdlc3R1cmUuc3RhdHVzID09PSAndGFwcGluZycpIHtcbiAgICAgIGdlc3R1cmUudGltZXN0YW1wID0gRGF0ZS5ub3coKVxuICAgICAgLy8gZmlyZSBjbGljaywgbm90IHRhcC5cbiAgICAgIGZpcmVFdmVudChnZXN0dXJlLmVsZW1lbnQsICd3ZWV4JHRhcCcsIHtcbiAgICAgICAgdG91Y2g6IHRvdWNoLFxuICAgICAgICB0b3VjaEV2ZW50OiBldmVudFxuICAgICAgfSlcblxuICAgICAgaWYgKGxhc3RUYXAgJiYgZ2VzdHVyZS50aW1lc3RhbXAgLSBsYXN0VGFwLnRpbWVzdGFtcCA8IDMwMCkge1xuICAgICAgICBmaXJlRXZlbnQoZ2VzdHVyZS5lbGVtZW50LCAnZG91YmxldGFwJywge1xuICAgICAgICAgIHRvdWNoOiB0b3VjaCxcbiAgICAgICAgICB0b3VjaEV2ZW50OiBldmVudFxuICAgICAgICB9KVxuICAgICAgfVxuXG4gICAgICBsYXN0VGFwID0gZ2VzdHVyZVxuICAgIH1cblxuICAgIGlmIChnZXN0dXJlLnN0YXR1cyA9PT0gJ3Bhbm5pbmcnKSB7XG4gICAgICB2YXIgbm93ID0gRGF0ZS5ub3coKVxuICAgICAgdmFyIGR1cmF0aW9uID0gbm93IC0gZ2VzdHVyZS5zdGFydFRpbWVcbiAgICAgIHZhciBkaXNwbGFjZW1lbnRYID0gdG91Y2guY2xpZW50WCAtIGdlc3R1cmUuc3RhcnRUb3VjaC5jbGllbnRYXG4gICAgICB2YXIgZGlzcGxhY2VtZW50WSA9IHRvdWNoLmNsaWVudFkgLSBnZXN0dXJlLnN0YXJ0VG91Y2guY2xpZW50WVxuXG4gICAgICB2YXIgdmVsb2NpdHkgPSBNYXRoLnNxcnQoZ2VzdHVyZS52ZWxvY2l0eVkgKiBnZXN0dXJlLnZlbG9jaXR5WVxuICAgICAgICArIGdlc3R1cmUudmVsb2NpdHlYICogZ2VzdHVyZS52ZWxvY2l0eVgpXG4gICAgICB2YXIgaXNTd2lwZSA9IHZlbG9jaXR5ID4gMC41ICYmIChub3cgLSBnZXN0dXJlLmxhc3RUaW1lKSA8IDEwMFxuICAgICAgdmFyIGV4dHJhID0ge1xuICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICAgIGlzU3dpcGU6IGlzU3dpcGUsXG4gICAgICAgIHZlbG9jaXR5WDogZ2VzdHVyZS52ZWxvY2l0eVgsXG4gICAgICAgIHZlbG9jaXR5WTogZ2VzdHVyZS52ZWxvY2l0eVksXG4gICAgICAgIGRpc3BsYWNlbWVudFg6IGRpc3BsYWNlbWVudFgsXG4gICAgICAgIGRpc3BsYWNlbWVudFk6IGRpc3BsYWNlbWVudFksXG4gICAgICAgIHRvdWNoOiB0b3VjaCxcbiAgICAgICAgdG91Y2hlczogZXZlbnQudG91Y2hlcyxcbiAgICAgICAgY2hhbmdlZFRvdWNoZXM6IGV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICB0b3VjaEV2ZW50OiBldmVudCxcbiAgICAgICAgaXNWZXJ0aWNhbDogZ2VzdHVyZS5pc1ZlcnRpY2FsLFxuICAgICAgICBkaXJlY3Rpb246IGdlc3R1cmUuZGlyZWN0aW9uXG4gICAgICB9XG5cbiAgICAgIGZpcmVFdmVudChnZXN0dXJlLmVsZW1lbnQsICdwYW5lbmQnLCBleHRyYSlcbiAgICAgIGlmIChpc1N3aXBlKSB7XG4gICAgICAgIGZpcmVFdmVudChnZXN0dXJlLmVsZW1lbnQsICdzd2lwZScsIGV4dHJhKVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChnZXN0dXJlLnN0YXR1cyA9PT0gJ3ByZXNzaW5nJykge1xuICAgICAgZmlyZUV2ZW50KGdlc3R1cmUuZWxlbWVudCwgJ3ByZXNzZW5kJywge1xuICAgICAgICB0b3VjaDogdG91Y2gsXG4gICAgICAgIHRvdWNoRXZlbnQ6IGV2ZW50XG4gICAgICB9KVxuICAgIH1cblxuICAgIGRlbGV0ZSBnZXN0dXJlc1tpZF1cbiAgfVxuXG4gIGlmIChPYmplY3Qua2V5cyhnZXN0dXJlcykubGVuZ3RoID09PSAwKSB7XG4gICAgZG9jRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdG91Y2htb3ZlSGFuZGxlciwgZmFsc2UpXG4gICAgZG9jRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0b3VjaGVuZEhhbmRsZXIsIGZhbHNlKVxuICAgIGRvY0VsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoY2FuY2VsJywgdG91Y2hjYW5jZWxIYW5kbGVyLCBmYWxzZSlcbiAgfVxufVxuXG4vKipcbiAqIGhhbmRsZSB0b3VjaGNhbmNlbFxuICpcbiAqIDEuIGlmIHRoZXJlIGFyZSB0d28gdG91Y2ggcG9pbnRzLCB0aGVuIHRyaWdnZXIgJ2R1YWx0b3VjaGVuZCdcbiAqXG4gKiAyLiB0cmF2ZXJzZSBldmVydHkgdG91Y2ggcG9pbnQ6XG4gKiA+IGlmIHBhbm5uaWcsIHRoZW4gdHJpZ2dlciAncGFuZW5kJ1xuICogPiBpZiBwcmVzc2luZywgdGhlbiB0cmlnZ2VyICdwcmVzc2VuZCdcbiAqXG4gKiAzLiByZW1vdmUgbGlzdGVuZXJzXG4gKlxuICogQGV2ZW50XG4gKiBAcGFyYW0gIHtldmVudH0gZXZlbnRcbiAqL1xuZnVuY3Rpb24gdG91Y2hjYW5jZWxIYW5kbGVyKGV2ZW50KSB7XG5cbiAgaWYgKE9iamVjdC5rZXlzKGdlc3R1cmVzKS5sZW5ndGggPT0gMikge1xuICAgIHZhciBlbGVtZW50cyA9IFtdXG4gICAgZm9yICh2YXIgcCBpbiBnZXN0dXJlcykge1xuICAgICAgZWxlbWVudHMucHVzaChnZXN0dXJlc1twXS5lbGVtZW50KVxuICAgIH1cbiAgICBmaXJlRXZlbnQoZ2V0Q29tbW9uQW5jZXN0b3IoZWxlbWVudHNbMF0sIGVsZW1lbnRzWzFdKSwgJ2R1YWx0b3VjaGVuZCcsIHtcbiAgICAgIHRvdWNoZXM6IHNsaWNlLmNhbGwoZXZlbnQudG91Y2hlcyksXG4gICAgICB0b3VjaEV2ZW50OiBldmVudFxuICAgIH0pXG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50LmNoYW5nZWRUb3VjaGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHRvdWNoID0gZXZlbnQuY2hhbmdlZFRvdWNoZXNbaV1cbiAgICB2YXIgaWQgPSB0b3VjaC5pZGVudGlmaWVyXG4gICAgdmFyIGdlc3R1cmUgPSBnZXN0dXJlc1tpZF1cblxuICAgIGlmICghZ2VzdHVyZSkge1xuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICBpZiAoZ2VzdHVyZS5wcmVzc2luZ0hhbmRsZXIpIHtcbiAgICAgIGNsZWFyVGltZW91dChnZXN0dXJlLnByZXNzaW5nSGFuZGxlcilcbiAgICAgIGdlc3R1cmUucHJlc3NpbmdIYW5kbGVyID0gbnVsbFxuICAgIH1cblxuICAgIGlmIChnZXN0dXJlLnN0YXR1cyA9PT0gJ3Bhbm5pbmcnKSB7XG4gICAgICBmaXJlRXZlbnQoZ2VzdHVyZS5lbGVtZW50LCAncGFuZW5kJywge1xuICAgICAgICB0b3VjaDogdG91Y2gsXG4gICAgICAgIHRvdWNoZXM6IGV2ZW50LnRvdWNoZXMsXG4gICAgICAgIGNoYW5nZWRUb3VjaGVzOiBldmVudC5jaGFuZ2VkVG91Y2hlcyxcbiAgICAgICAgdG91Y2hFdmVudDogZXZlbnRcbiAgICAgIH0pXG4gICAgfVxuICAgIGlmIChnZXN0dXJlLnN0YXR1cyA9PT0gJ3ByZXNzaW5nJykge1xuICAgICAgZmlyZUV2ZW50KGdlc3R1cmUuZWxlbWVudCwgJ3ByZXNzZW5kJywge1xuICAgICAgICB0b3VjaDogdG91Y2gsXG4gICAgICAgIHRvdWNoRXZlbnQ6IGV2ZW50XG4gICAgICB9KVxuICAgIH1cbiAgICBkZWxldGUgZ2VzdHVyZXNbaWRdXG4gIH1cblxuICBpZiAoT2JqZWN0LmtleXMoZ2VzdHVyZXMpLmxlbmd0aCA9PT0gMCkge1xuICAgIGRvY0VsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRvdWNobW92ZUhhbmRsZXIsIHRydWUpXG4gICAgZG9jRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0b3VjaGVuZEhhbmRsZXIsIHRydWUpXG4gICAgZG9jRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hjYW5jZWwnLCB0b3VjaGNhbmNlbEhhbmRsZXIsIHRydWUpXG4gIH1cbn1cblxuaWYgKCFpc0luaXRpYWxpemVkKSB7XG4gIGRvY0VsLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0b3VjaHN0YXJ0SGFuZGxlciwgdHJ1ZSlcbiAgaXNJbml0aWFsaXplZCA9IHRydWVcbn1cbiIsImNvbnN0IGxpYiA9IHdpbmRvdy5saWIgfHwgKHdpbmRvdy5saWIgPSB7fSlcblxuLyoqXG4gKiBWZXJzaW9uIGNsYXNzLlxuICogQGNsYXNzIGxpYi5lbnZ+VmVyc2lvblxuICogQHBhcmFtIHtTdHJpbmd9IHYgLSB2ZXJzaW9uIG51bWJlci5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gVmVyc2lvbiAodikge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3ZhbCcsIHtcbiAgICB2YWx1ZTogdi50b1N0cmluZygpLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfSlcblxuICAvKipcbiAgICogbGFyZ2VyIHRoYW5cbiAgICogQG1ldGhvZCBndFxuICAgKiBAcGFyYW0ge1N0cmluZ30gdiAtIHZlcnNpb25cbiAgICogQHJldHVybiB7Qm9vbGVhbn0gcmVzdWx0XG4gICAqIEBpbnN0YW5jZVxuICAgKiBAbWVtYmVyb2YgVmVyc2lvblxuICAgKi9cbiAgdGhpcy5ndCA9IGZ1bmN0aW9uICh2KSB7XG4gICAgcmV0dXJuIFZlcnNpb24uY29tcGFyZSh0aGlzLCB2KSA+IDBcbiAgfVxuXG4gIC8qKlxuICAgKiBsYXJnZXIgdGhhbiBvciBlcXVhbCB0by5cbiAgICogQG1ldGhvZCBndGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IHYgLSB2ZXJzaW9uXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IHJlc3VsdFxuICAgKiBAaW5zdGFuY2VcbiAgICogQG1lbWJlcm9mIFZlcnNpb25cbiAgICovXG4gIHRoaXMuZ3RlID0gZnVuY3Rpb24gKHYpIHtcbiAgICByZXR1cm4gVmVyc2lvbi5jb21wYXJlKHRoaXMsIHYpID49IDBcbiAgfVxuXG4gIC8qKlxuICAgKiBsZXNzIHRoYW4uXG4gICAqIEBtZXRob2QgbHRcbiAgICogQHBhcmFtIHtTdHJpbmd9IHYgLSB2ZXJzaW9uXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IHJlc3VsdFxuICAgKiBAaW5zdGFuY2VcbiAgICogQG1lbWJlcm9mIFZlcnNpb25cbiAgICovXG4gIHRoaXMubHQgPSBmdW5jdGlvbiAodikge1xuICAgIHJldHVybiBWZXJzaW9uLmNvbXBhcmUodGhpcywgdikgPCAwXG4gIH1cblxuICAvKipcbiAgICogbGVzcyB0aGFuIG9yIGVxdWFsIHRvLlxuICAgKiBAbWV0aG9kIGx0ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gdiAtIHZlcnNpb25cbiAgICogQHJldHVybiB7Qm9vbGVhbn0gcmVzdWx0XG4gICAqIEBpbnN0YW5jZVxuICAgKiBAbWVtYmVyb2YgVmVyc2lvblxuICAgKi9cbiAgdGhpcy5sdGUgPSBmdW5jdGlvbiAodikge1xuICAgIHJldHVybiBWZXJzaW9uLmNvbXBhcmUodGhpcywgdikgPD0gMFxuICB9XG5cbiAgLyoqXG4gICAqIGVxdWFsIHRvLlxuICAgKiBAbWV0aG9kIGVxXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB2IC0gdmVyc2lvblxuICAgKiBAcmV0dXJuIHtCb29sZWFufSBlcXVhbCB0b1xuICAgKiBAaW5zdGFuY2VcbiAgICogQG1lbWJlcm9mIFZlcnNpb25cbiAgICovXG4gIHRoaXMuZXEgPSBmdW5jdGlvbiAodikge1xuICAgIHJldHVybiBWZXJzaW9uLmNvbXBhcmUodGhpcywgdikgPT09IDBcbiAgfVxufVxuXG4vKipcbiAqIHZlcnNpb24gbnVtYmVyIHN0cmluZy5cbiAqIEBtZXRob2QgdG9TdHJpbmdcbiAqIEByZXR1cm4ge1N0cmluZ30gY3VycmVudCB2ZXJzaW9uIG51bWJlciBzdHJpbmcuXG4gKiBAaW5zdGFuY2VcbiAqIEBtZW1iZXJvZiBWZXJzaW9uXG4gKi9cblZlcnNpb24ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy52YWxcbn1cblxuLyoqXG4gKiByZXR1cm4gY3VycmVudCB2ZXJzaW9uIG51bWJlci5cbiAqIEBtZXRob2QgdmFsdWVPZlxuICogQHJldHVybiB7Qm9vbGVhbn0gdmVyc2lvbiBudW1iZXJcbiAqIEBpbnN0YW5jZVxuICogQG1lbWJlcm9mIFZlcnNpb25cbiAqL1xuVmVyc2lvbi5wcm90b3R5cGUudmFsdWVPZiA9IGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgdiA9IHRoaXMudmFsLnNwbGl0KCcuJylcbiAgY29uc3QgciA9IFtdXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdi5sZW5ndGg7IGkrKykge1xuICAgIGxldCBuID0gcGFyc2VJbnQodltpXSwgMTApXG4gICAgaWYgKGlzTmFOKG4pKSB7XG4gICAgICBuID0gMFxuICAgIH1cbiAgICBsZXQgcyA9IG4udG9TdHJpbmcoKVxuICAgIGlmIChzLmxlbmd0aCA8IDUpIHtcbiAgICAgIHMgPSBBcnJheSg2IC0gcy5sZW5ndGgpLmpvaW4oJzAnKSArIHNcbiAgICB9XG4gICAgci5wdXNoKHMpXG4gICAgaWYgKHIubGVuZ3RoID09PSAxKSB7XG4gICAgICByLnB1c2goJy4nKVxuICAgIH1cbiAgfVxuICByZXR1cm4gcGFyc2VGbG9hdChyLmpvaW4oJycpKVxufVxuXG4vKipcbiAqIGNvbXBhcmUgdHdvIHZlcnNpb25zLlxuICogQG1ldGhvZCBjb21wYXJlXG4gKiBAcGFyYW0ge1N0cmluZ30gdjEgLSB2ZXJzaW9uMVxuICogQHBhcmFtIHtTdHJpbmd9IHYyIC0gdmVyc2lvbjJcbiAqIEByZXR1cm4ge051bWJlcn0gMCBmb3IgZXF1YWxpdHnvvIwtMSBmb3IgbGVzcyB0aGFu77yMMSBmb3IgbGFyZ2VyIHRoYW4uXG4gKiBAbWVtYmVyb2YgVmVyc2lvblxuICovXG5WZXJzaW9uLmNvbXBhcmUgPSBmdW5jdGlvbiAodjEsIHYyKSB7XG4gIHYxID0gdjEudG9TdHJpbmcoKS5zcGxpdCgnLicpXG4gIHYyID0gdjIudG9TdHJpbmcoKS5zcGxpdCgnLicpXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdjEubGVuZ3RoIHx8IGkgPCB2Mi5sZW5ndGg7IGkrKykge1xuICAgIGxldCBuMSA9IHBhcnNlSW50KHYxW2ldLCAxMClcbiAgICBsZXQgbjIgPSBwYXJzZUludCh2MltpXSwgMTApXG4gICAgaWYgKHdpbmRvdy5pc05hTihuMSkpIHtcbiAgICAgIG4xID0gMFxuICAgIH1cbiAgICBpZiAod2luZG93LmlzTmFOKG4yKSkge1xuICAgICAgbjIgPSAwXG4gICAgfVxuICAgIGlmIChuMSA8IG4yKSB7XG4gICAgICByZXR1cm4gLTFcbiAgICB9XG4gICAgZWxzZSBpZiAobjEgPiBuMikge1xuICAgICAgcmV0dXJuIDFcbiAgICB9XG4gIH1cbiAgcmV0dXJuIDBcbn1cblxuLyoqXG4gKiDop6PmnpDlkozmk43kvZzniYjmnKzlj7dcbiAqIEBtZXRob2QgdmVyc2lvblxuICogQHBhcmFtIHtzdHJpbmd9IHYgLSDpnIDopoHop6PmnpDnmoTniYjmnKzlj7dcbiAqIEByZXR1cm4ge2xpYi5lbnZ+VmVyc2lvbn0gVmVyc29u5a6e5L6LXG4gKiBAbWVtYmVyb2YgbGliXG4gKi9cbmxpYi52ZXJzaW9uID0gZnVuY3Rpb24gKHYpIHtcbiAgcmV0dXJuIG5ldyBWZXJzaW9uKHYpXG59XG4iLCJjb25zdCBsaWIgPSB3aW5kb3cubGliIHx8ICh3aW5kb3cubGliID0ge30pXG5jb25zdCBlbnYgPSBsaWIuZW52IHx8IChsaWIuZW52ID0ge30pXG5cbmNvbnN0IHNlYXJjaCA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKVxuZW52LnBhcmFtcyA9IHt9XG5pZiAoc2VhcmNoKSB7XG4gIGNvbnN0IHBhcmFtcyA9IHNlYXJjaC5zcGxpdCgnJicpXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyYW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgcGFyYW1zW2ldID0gcGFyYW1zW2ldLnNwbGl0KCc9JylcbiAgICB0cnkge1xuICAgICAgZW52LnBhcmFtc1twYXJhbXNbaV1bMF1dID0gZGVjb2RlVVJJQ29tcG9uZW50KHBhcmFtc1tpXVsxXSlcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgIGVudi5wYXJhbXNbcGFyYW1zW2ldWzBdXSA9IHBhcmFtc1tpXVsxXVxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0ICcuL3ZlcnNpb24nXG5pbXBvcnQgJy4vcGFyYW1zJ1xuXG5jb25zdCBsaWIgPSB3aW5kb3cubGliIHx8ICh3aW5kb3cubGliID0ge30pXG5jb25zdCBlbnYgPSBsaWIuZW52IHx8IChsaWIuZW52ID0ge30pXG5cbmNvbnN0IHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnRcbmxldCBtYXRjaFxuXG4vKipcbiAqIG9zXG4gKi9cblxubWF0Y2ggPSB1YS5tYXRjaCgvV2luZG93c1xcc1Bob25lXFxzKD86T1NcXHMpPyhbXFxkLl0rKS8pXG5pZiAobWF0Y2gpIHtcbiAgLyoqXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqIEBtZW1iZXJvZiBsaWIuZW52XG4gICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBuYW1lIC0gb3MgbmFtZSwgZS5nLiBBbmRyb2lkL0FuZHJvaWRQYWQvaVBob25lL2lQb2QvaVBhZC9XaW5kb3dzIFBob25lL3Vua25vd24sIGV0Yy5cbiAgICogQHByb3BlcnR5IHtsaWIuZW52flZlcnNpb259IHZlcnNpb24gLSBvcyB2ZXJzaW9uLlxuICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IGlzV2luZG93c1Bob25lXG4gICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gaXNJUGhvbmUgLSBpcyBpUGhvbmUvaVRvdWNoXG4gICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gaXNJUGFkXG4gICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gaXNJT1NcbiAgICogQHByb3BlcnR5IHtCb29sZWFufSBpc0FuZHJvaWRcbiAgICogQHByb3BlcnR5IHtCb29sZWFufSBpc0FuZHJvaWRQYWRcbiAgICovXG4gIGVudi5vcyA9IHtcbiAgICBuYW1lOiAnV2luZG93cyBQaG9uZScsXG4gICAgaXNXaW5kb3dzUGhvbmU6IHRydWUsXG4gICAgdmVyc2lvbjogbWF0Y2hbMV1cbiAgfVxufVxuZWxzZSBpZiAoISF1YS5tYXRjaCgvU2FmYXJpLykgJiYgKG1hdGNoID0gdWEubWF0Y2goL0FuZHJvaWRbXFxzL10oW1xcZC5dKykvKSkpIHtcbiAgZW52Lm9zID0ge1xuICAgIHZlcnNpb246IG1hdGNoWzFdXG4gIH1cblxuICBpZiAoKHVhLm1hdGNoKC9Nb2JpbGVcXHMrU2FmYXJpLykpKSB7XG4gICAgZW52Lm9zLm5hbWUgPSAnQW5kcm9pZCdcbiAgICBlbnYub3MuaXNBbmRyb2lkID0gdHJ1ZVxuICB9XG4gIGVsc2Uge1xuICAgIGVudi5vcy5uYW1lID0gJ0FuZHJvaWRQYWQnXG4gICAgZW52Lm9zLmlzQW5kcm9pZFBhZCA9IHRydWVcbiAgfVxufVxuZWxzZSBpZiAoKG1hdGNoID0gdWEubWF0Y2goLyhpUGhvbmV8aVBhZHxpUG9kKS8pKSkge1xuICBjb25zdCBuYW1lID0gbWF0Y2hbMV1cblxuICBtYXRjaCA9IHVhLm1hdGNoKC9PUyAoW1xcZF8uXSspIGxpa2UgTWFjIE9TIFgvKVxuXG4gIGVudi5vcyA9IHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIGlzSVBob25lOiAobmFtZSA9PT0gJ2lQaG9uZScgfHwgbmFtZSA9PT0gJ2lQb2QnKSxcbiAgICBpc0lQYWQ6IG5hbWUgPT09ICdpUGFkJyxcbiAgICBpc0lPUzogdHJ1ZSxcbiAgICB2ZXJzaW9uOiBtYXRjaCAmJiBtYXRjaFsxXS5zcGxpdCgnXycpLmpvaW4oJy4nKSB8fCAnJ1xuICB9XG59XG5lbHNlIHtcbiAgZW52Lm9zID0ge1xuICAgIG5hbWU6ICd1bmtub3duJyxcbiAgICB2ZXJzaW9uOiAnMC4wLjAnXG4gIH1cbn1cblxuaWYgKGxpYi52ZXJzaW9uKSB7XG4gIGVudi5vcy52ZXJzaW9uID0gbGliLnZlcnNpb24oZW52Lm9zLnZlcnNpb24pXG59XG5cbi8qKlxuICogYnJvd3NlclxuICovXG5cbm1hdGNoID0gdWEubWF0Y2goLyg/OlVDV0VCfFVDQnJvd3NlclxcLykoW1xcZC5dKykvKVxuXG5pZiAobWF0Y2gpIHtcbiAgLyoqXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqIEBtZW1iZXJvZiBlbnZcbiAgICogQHByb3BlcnR5IHtTdHJpbmd9IG5hbWUgLSBicm93c2VyIG5hbWXvvIxlLmcuIFVDL1FRL0ZpcmVmb3gvQ2hyb21lL0FuZHJvaWQvU2FmYXJpL2lPUyBXZWJ2aWV3L0Nocm9tZSBXZWJ2aWV3L0lFL0lFTW9iaWxlL3Vua25vd24sIGV0Yy5cbiAgICogQHByb3BlcnR5IHtlbnZ+VmVyc2lvbn0gdmVyc2lvbiAtIGJyb3dzZXIgdmVyc2lvbi5cbiAgICogQHByb3BlcnR5IHtCb29sZWFufSBpc1VDXG4gICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gaXNRUVxuICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IGlzSUVcbiAgICogQHByb3BlcnR5IHtCb29sZWFufSBpc0lFTW9iaWxlXG4gICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gaXNJRUxpa2VXZWJraXRcbiAgICogQHByb3BlcnR5IHtCb29sZWFufSBpc0Nocm9tZVxuICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IGlzQW5kcm9pZFxuICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IGlzU2FmYXJpXG4gICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gaXNXZWJ2aWV3XG4gICAqL1xuICBlbnYuYnJvd3NlciA9IHtcbiAgICBuYW1lOiAnVUMnLFxuICAgIGlzVUM6IHRydWUsXG4gICAgdmVyc2lvbjogbWF0Y2hbMV1cbiAgfVxufVxuZWxzZSBpZiAoKG1hdGNoID0gdWEubWF0Y2goL01RUUJyb3dzZXJcXC8oW1xcZC5dKykvKSkpIHtcbiAgZW52LmJyb3dzZXIgPSB7XG4gICAgbmFtZTogJ1FRJyxcbiAgICBpc1FROiB0cnVlLFxuICAgIHZlcnNpb246IG1hdGNoWzFdXG4gIH1cbn1cbmVsc2UgaWYgKChtYXRjaCA9IHVhLm1hdGNoKC9GaXJlZm94XFwvKFtcXGQuXSspLykpKSB7XG4gIGVudi5icm93c2VyID0ge1xuICAgIG5hbWU6ICdGaXJlZm94JyxcbiAgICBpc0ZpcmVmb3g6IHRydWUsXG4gICAgdmVyc2lvbjogbWF0Y2hbMV1cbiAgfVxufVxuZWxzZSBpZiAoKG1hdGNoID0gdWEubWF0Y2goL01TSUVcXHMoW1xcZC5dKykvKSlcbiAgfHwgKG1hdGNoID0gdWEubWF0Y2goL0lFTW9iaWxlXFwvKFtcXGQuXSspLykpKSB7XG4gIGVudi5icm93c2VyID0ge1xuICAgIHZlcnNpb246IG1hdGNoWzFdXG4gIH1cblxuICBpZiAodWEubWF0Y2goL0lFTW9iaWxlLykpIHtcbiAgICBlbnYuYnJvd3Nlci5uYW1lID0gJ0lFTW9iaWxlJ1xuICAgIGVudi5icm93c2VyLmlzSUVNb2JpbGUgPSB0cnVlXG4gIH1cbiAgZWxzZSB7XG4gICAgZW52LmJyb3dzZXIubmFtZSA9ICdJRSdcbiAgICBlbnYuYnJvd3Nlci5pc0lFID0gdHJ1ZVxuICB9XG5cbiAgaWYgKHVhLm1hdGNoKC9BbmRyb2lkfGlQaG9uZS8pKSB7XG4gICAgZW52LmJyb3dzZXIuaXNJRUxpa2VXZWJraXQgPSB0cnVlXG4gIH1cbn1cbmVsc2UgaWYgKChtYXRjaCA9IHVhLm1hdGNoKC8oPzpDaHJvbWV8Q3JpT1MpXFwvKFtcXGQuXSspLykpKSB7XG4gIGVudi5icm93c2VyID0ge1xuICAgIG5hbWU6ICdDaHJvbWUnLFxuICAgIGlzQ2hyb21lOiB0cnVlLFxuICAgIHZlcnNpb246IG1hdGNoWzFdXG4gIH1cblxuICBpZiAodWEubWF0Y2goL1ZlcnNpb25cXC9bXFxkKy5dK1xccypDaHJvbWUvKSkge1xuICAgIGVudi5icm93c2VyLm5hbWUgPSAnQ2hyb21lIFdlYnZpZXcnXG4gICAgZW52LmJyb3dzZXIuaXNXZWJ2aWV3ID0gdHJ1ZVxuICB9XG59XG5lbHNlIGlmICghIXVhLm1hdGNoKC9TYWZhcmkvKSAmJiAobWF0Y2ggPSB1YS5tYXRjaCgvQW5kcm9pZFtcXHMvXShbXFxkLl0rKS8pKSkge1xuICBlbnYuYnJvd3NlciA9IHtcbiAgICBuYW1lOiAnQW5kcm9pZCcsXG4gICAgaXNBbmRyb2lkOiB0cnVlLFxuICAgIHZlcnNpb246IG1hdGNoWzFdXG4gIH1cbn1cbmVsc2UgaWYgKHVhLm1hdGNoKC9pUGhvbmV8aVBhZHxpUG9kLykpIHtcbiAgaWYgKHVhLm1hdGNoKC9TYWZhcmkvKSkge1xuICAgIG1hdGNoID0gdWEubWF0Y2goL1ZlcnNpb25cXC8oW1xcZC5dKykvKVxuICAgIGVudi5icm93c2VyID0ge1xuICAgICAgbmFtZTogJ1NhZmFyaScsXG4gICAgICBpc1NhZmFyaTogdHJ1ZSxcbiAgICAgIHZlcnNpb246IG1hdGNoICYmIG1hdGNoWzFdIHx8ICcnXG4gICAgfVxuICB9XG4gIGVsc2Uge1xuICAgIG1hdGNoID0gdWEubWF0Y2goL09TIChbXFxkXy5dKykgbGlrZSBNYWMgT1MgWC8pXG4gICAgZW52LmJyb3dzZXIgPSB7XG4gICAgICBuYW1lOiAnaU9TIFdlYnZpZXcnLFxuICAgICAgaXNXZWJ2aWV3OiB0cnVlLFxuICAgICAgdmVyc2lvbjogbWF0Y2ggJiYgbWF0Y2hbMV0ucmVwbGFjZSgvXy9nLCAnLicpIHx8ICcnXG4gICAgfVxuICB9XG59XG5lbHNlIHtcbiAgZW52LmJyb3dzZXIgPSB7XG4gICAgbmFtZTogJ3Vua25vd24nLFxuICAgIHZlcnNpb246ICcwLjAuMCdcbiAgfVxufVxuXG5pZiAobGliLnZlcnNpb24pIHtcbiAgZW52LmJyb3dzZXIudmVyc2lvbiA9IGxpYi52ZXJzaW9uKGVudi5icm93c2VyLnZlcnNpb24pXG59XG4iLCIvKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuY29uc3QgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nXG5cbi8qKlxuICogU3RyaWN0IG9iamVjdCB0eXBlIGNoZWNrLiBPbmx5IHJldHVybnMgdHJ1ZVxuICogZm9yIHBsYWluIEphdmFTY3JpcHQgb2JqZWN0cy5cbiAqXG4gKiBAcGFyYW0geyp9IG9ialxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuY29uc3QgT0JKRUNUX1NUUklORyA9ICdbb2JqZWN0IE9iamVjdF0nXG5leHBvcnQgZnVuY3Rpb24gaXNQbGFpbk9iamVjdCAob2JqKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT09IE9CSkVDVF9TVFJJTkdcbn1cblxuY29uc3QgQVJSQVlfU1RSSU5HID0gJ1tvYmplY3QgQXJyYXldJ1xuZXhwb3J0IGZ1bmN0aW9uIGlzQXJyYXkgKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09PSBBUlJBWV9TVFJJTkdcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJpbWl0aXZlICh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZydcbiAgICB8fCB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInXG4gICAgfHwgdHlwZW9mIHZhbHVlID09PSAnc3ltYm9sJ1xuICAgIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZiAodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCAmJiB2YWwgIT09IG51bGxcbn1cbiIsIi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHtcbiAgaXNBcnJheVxufSBmcm9tICcuL3R5cGUnXG4vKipcbiAqIE1peCBwcm9wZXJ0aWVzIGludG8gdGFyZ2V0IG9iamVjdC5cbiAqIHRoZSByaWdodGVzdCBvYmplY3QncyB2YWx1ZSBoYXMgdGhlIGhpZ2hlc3QgcHJpb3JpdHkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleHRlbmQgKHRvLCAuLi5hcmdzKSB7XG4gIGlmICghYXJncyB8fCBhcmdzLmxlbmd0aCA8PSAwKSB7XG4gICAgcmV0dXJuIHRvXG4gIH1cbiAgYXJncy5mb3JFYWNoKGZyb20gPT4ge1xuICAgIGlmICh0eXBlb2YgZnJvbSAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBmcm9tKSB7XG4gICAgICB0b1trZXldID0gZnJvbVtrZXldXG4gICAgfVxuICB9KVxuICByZXR1cm4gdG9cbn1cbi8qKlxuICogTWl4IHRydXRoeSBvciAnJyBwcm9wZXJ0eSB2YWx1ZXMgaW50byB0YXJnZXQgb2JqZWN0LlxuICogbW9zdGx5IGZvciBtZXJnaW5nIHN0eWxlcy4gKHRoYXQncyB3aHkgJycgaXMgZmFsc3kgYnV0IHN0aWxsIHNob3VsZCBiZSBjb3VudGVkIGluLilcbiAqIHRoZSByaWdodGVzdCBvYmplY3QncyB2YWx1ZSBoYXMgdGhlIGhpZ2hlc3QgcHJpb3JpdHkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleHRlbmRUcnV0aHkgKHRvLCAuLi5hcmdzKSB7XG4gIGlmICghYXJncyB8fCBhcmdzLmxlbmd0aCA8PSAwKSB7XG4gICAgcmV0dXJuIHRvXG4gIH1cbiAgYXJncy5mb3JFYWNoKGZyb20gPT4ge1xuICAgIGlmICh0eXBlb2YgZnJvbSAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBsZXQgaVxuICAgIGZvciAoY29uc3Qga2V5IGluIGZyb20pIHtcbiAgICAgIGlmICgoKGkgPSBmcm9tW2tleV0pIHx8IGkgPT09ICcnIHx8IGkgPT09IDApICYmIGkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRvW2tleV0gPSBpXG4gICAgICB9XG4gICAgfVxuICB9KVxuICByZXR1cm4gdG9cbn1cbi8qKlxuICogTWl4IHNwZWNpZmllZCBwcm9wZXJ0aWVzIGludG8gdGFyZ2V0IG9iamVjdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4dGVuZEtleXMgKHRvLCBmcm9tID0ge30sIGtleXMpIHtcbiAgKGtleXMgfHwgW10pLmZvckVhY2goa2V5ID0+IHtcbiAgICBmcm9tICYmICh0b1trZXldID0gZnJvbVtrZXldKVxuICB9KVxuICByZXR1cm4gdG9cbn1cbi8qKlxuICogRXh0cmFjdCBzcGVjaWZpZWQgcHJvcGVydGllcyBmcm9tIHNyYyB0byB0YXJnZXQgb2JqZWN0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdEtleXMgKHRvLCBmcm9tID0ge30sIGtleXMpIHtcbiAgaWYgKCFmcm9tKSB7XG4gICAgcmV0dXJuIHRvXG4gIH1cbiAgKGtleXMgfHwgW10pLmZvckVhY2goa2V5ID0+IHtcbiAgICBmcm9tICYmICh0b1trZXldID0gZnJvbVtrZXldKVxuICAgIGZyb20gJiYgKGRlbGV0ZSBmcm9tW2tleV0pXG4gIH0pXG4gIHJldHVybiB0b1xufVxuLyoqXG4gKiBTaW1wbGUgYmluZCwgZmFzdGVyIHRoYW4gbmF0aXZlXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjdHhcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICovXG5leHBvcnQgZnVuY3Rpb24gYmluZCAoZm4sIGN0eCkge1xuICByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICBjb25zdCBsID0gYXJndW1lbnRzLmxlbmd0aFxuICAgIHJldHVybiBsID8gbCA+IDEgPyBmbi5hcHBseShjdHgsIGFyZ3VtZW50cykgOiBmbi5jYWxsKGN0eCwgYSkgOiBmbi5jYWxsKGN0eClcbiAgfVxufVxuLyoqXG4gKiBPbmx5IGNhbGwgdGhlIGZ1bmMgdGhlIGxhc3QgdGltZSBiZWZvcmUgaXQncyBub3QgdGhhdCBmcmVxdWVudGx5IGNhbGxlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlYm91bmNlIChmdW5jLCB3YWl0KSB7XG4gIGxldCB0aW1lcklkXG4gIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgIGNsZWFyVGltZW91dCh0aW1lcklkKVxuICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIGxhdGVyICgpIHtcbiAgICAgIHRpbWVySWQgPSBudWxsXG4gICAgICBmdW5jLmFwcGx5KG51bGwsIGFyZ3MpXG4gICAgfSwgd2FpdClcbiAgfVxufVxuLyoqXG4gKiBPbmx5IGNhbGwgdGhlIGZ1bmMgdGhlIGZpcnN0IHRpbWUgYmVmb3JlIGEgc2VyaWVzIGZyZXF1ZW50bHkgZnVuY3Rpb24gY2FsbHMgaGFwcGVuLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVwcmVzcyAoZnVuYywgd2FpdCkge1xuICBsZXQgdGltZXJJZFxuXG4gIGZ1bmN0aW9uIGxhdGVyICgpIHtcbiAgICB0aW1lcklkID0gbnVsbFxuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aW1lcklkKSB7XG4gICAgICBmdW5jLmFwcGx5KClcbiAgICB9XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpXG4gICAgdGltZXJJZCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpXG4gIH1cbn1cbi8qKlxuICogT25seSBjYWxsIHRoZSBmdW5jIGV2ZXJ5IHRpbWUgYWZ0ZXIgYSB3YWl0IG1pbGxpc2Vjb25kcyBpZiBpdCdzIHRvbyBmcmVxdWVudGx5IGNhbGxlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRocm90dGxlIChmdW5jLCB3YWl0LCBjYWxsTGFzdFRpbWUpIHtcbiAgbGV0IGxhc3QgPSAwXG4gIGxldCBsYXN0VGltZXIgPSBudWxsXG4gIGNvbnN0IGxhc3RUaW1lRHVyYXRpb24gPSB3YWl0ICsgKHdhaXQgPiAyNSA/IHdhaXQgOiAyNSkgLy8gcGx1cyBoYWxmIHdhaXQgdGltZS5cbiAgcmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgY29uc3QgY29udGV4dCA9IHRoaXNcbiAgICBjb25zdCB0aW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKClcbiAgICBpZiAodGltZSAtIGxhc3QgPiB3YWl0KSB7XG4gICAgICBpZiAoY2FsbExhc3RUaW1lKSB7XG4gICAgICAgIGxhc3RUaW1lciAmJiBjbGVhclRpbWVvdXQobGFzdFRpbWVyKVxuICAgICAgICBsYXN0VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBsYXN0VGltZXIgPSBudWxsXG4gICAgICAgICAgZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKVxuICAgICAgICB9LCBsYXN0VGltZUR1cmF0aW9uKVxuICAgICAgfVxuICAgICAgZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKVxuICAgICAgbGFzdCA9IHRpbWVcbiAgICB9XG4gIH1cbn1cbi8vIGRpcmVjdGlvbjogJ2wnIHwgJ3InLCBkZWZhdWx0IGlzICdyJ1xuLy8gbnVtOiBob3cgbWFueSB0aW1lcyB0byBsb29wLCBzaG91bGQgYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyXG5leHBvcnQgZnVuY3Rpb24gbG9vcEFycmF5IChhcnIsIG51bSwgZGlyZWN0aW9uKSB7XG4gIGlmICghaXNBcnJheShhcnIpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgbGV0IGlzTGVmdCA9IChkaXJlY3Rpb24gKyAnJykudG9Mb3dlckNhc2UoKSA9PT0gJ2wnXG4gIGNvbnN0IGxlbiA9IGFyci5sZW5ndGhcbiAgbnVtID0gbnVtICUgbGVuXG4gIGlmIChudW0gPCAwKSB7XG4gICAgbnVtID0gLW51bVxuICAgIGlzTGVmdCA9ICFpc0xlZnRcbiAgfVxuICBpZiAobnVtID09PSAwKSB7XG4gICAgcmV0dXJuIGFyclxuICB9XG4gIGxldCBscCwgcnBcbiAgaWYgKGlzTGVmdCkge1xuICAgIGxwID0gYXJyLnNsaWNlKDAsIG51bSlcbiAgICBycCA9IGFyci5zbGljZShudW0pXG4gIH1cbiAgZWxzZSB7XG4gICAgbHAgPSBhcnIuc2xpY2UoMCwgbGVuIC0gbnVtKVxuICAgIHJwID0gYXJyLnNsaWNlKGxlbiAtIG51bSlcbiAgfVxuICByZXR1cm4gcnAuY29uY2F0KGxwKVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIGNhY2hlZCB2ZXJzaW9uIG9mIGEgcHVyZSBmdW5jdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhY2hlZCAoZm4pIHtcbiAgY29uc3QgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpXG4gIHJldHVybiBmdW5jdGlvbiBjYWNoZWRGbiAoc3RyKSB7XG4gICAgY29uc3QgaGl0ID0gY2FjaGVbc3RyXVxuICAgIHJldHVybiBoaXQgfHwgKGNhY2hlW3N0cl0gPSBmbihzdHIpKVxuICB9XG59XG4vKipcbiAqIENhbWVsaXplIGEgaHlwaGVuLWRlbG1pdGVkIHN0cmluZy5cbiAqL1xuY29uc3QgY2FtZWxpemVSRSA9IC8tKFxcdykvZ1xuZXhwb3J0IGNvbnN0IGNhbWVsaXplID0gY2FjaGVkKHN0ciA9PiB7XG4gIHJldHVybiBzdHIucmVwbGFjZShjYW1lbGl6ZVJFLCAoXywgYykgPT4gYy50b1VwcGVyQ2FzZSgpKVxufSlcbmV4cG9ydCBmdW5jdGlvbiBjYW1lbGl6ZUtleXMgKG9iaikge1xuICBjb25zdCByZXMgPSB7fVxuICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcbiAgICByZXNbY2FtZWxpemUoa2V5KV0gPSBvYmpba2V5XVxuICB9XG4gIHJldHVybiByZXNcbn1cbi8qKlxuICogQ2FwaXRhbGl6ZSBhIHN0cmluZy5cbiAqL1xuZXhwb3J0IGNvbnN0IGNhcGl0YWxpemUgPSBjYWNoZWQoc3RyID0+IHtcbiAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKVxufSlcbi8qKlxuICogSHlwaGVuYXRlIGEgY2FtZWxDYXNlIHN0cmluZy5cbiAqL1xuY29uc3QgaHlwaGVuYXRlUkUgPSAvKFteLV0pKFtBLVpdKS9nXG5leHBvcnQgY29uc3QgaHlwaGVuYXRlID0gY2FjaGVkKHN0ciA9PiB7XG4gIHJldHVybiBzdHIucmVwbGFjZShoeXBoZW5hdGVSRSwgJyQxLSQyJykucmVwbGFjZShoeXBoZW5hdGVSRSwgJyQxLSQyJykudG9Mb3dlckNhc2UoKVxufSlcbmV4cG9ydCBmdW5jdGlvbiBoeXBoZW5hdGVLZXlzIChvYmopIHtcbiAgY29uc3QgcmVzID0ge31cbiAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgcmVzW2h5cGhlbmF0ZShrZXkpXSA9IG9ialtrZXldXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuY29uc3QgdmVuZG9yc1JlZyA9IC93ZWJraXQtfG1vei18by18bXMtL1xuZXhwb3J0IGZ1bmN0aW9uIGh5cGhlbmF0ZVN0eWxlS2V5cyAob2JqKSB7XG4gIGNvbnN0IHJlcyA9IHt9XG4gIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xuICAgIGNvbnN0IGhrID0gaHlwaGVuYXRlKGtleSkucmVwbGFjZSh2ZW5kb3JzUmVnLCBmdW5jdGlvbiAoJDApIHtcbiAgICAgIHJldHVybiAnLScgKyAkMFxuICAgIH0pXG4gICAgcmVzW2hrXSA9IG9ialtrZXldXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNhbWVsVG9LZWJhYiAobmFtZSkge1xuICBpZiAoIW5hbWUpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuICByZXR1cm4gbmFtZS5yZXBsYWNlKC8oW0EtWl0pL2csIGZ1bmN0aW9uIChnLCBnMSkge1xuICAgIHJldHVybiBgLSR7ZzEudG9Mb3dlckNhc2UoKX1gXG4gIH0pXG59XG5leHBvcnQgZnVuY3Rpb24gYXBwZW5kQ3NzIChjc3MsIGNzc0lkLCByZXBsYWNlKSB7XG4gIGxldCBzdHlsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNzc0lkKVxuICBpZiAoc3R5bGUgJiYgcmVwbGFjZSkge1xuICAgIHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpXG4gICAgc3R5bGUgPSBudWxsXG4gIH1cbiAgaWYgKCFzdHlsZSkge1xuICAgIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKVxuICAgIHN0eWxlLnR5cGUgPSAndGV4dC9jc3MnXG4gICAgY3NzSWQgJiYgKHN0eWxlLmlkID0gY3NzSWQpXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXS5hcHBlbmRDaGlsZChzdHlsZSlcbiAgfVxuICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKVxufVxuZXhwb3J0IGZ1bmN0aW9uIG5leHRGcmFtZSAoY2FsbGJhY2spIHtcbiAgY29uc3QgcnVubmVyID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZVxuICAgIHx8IHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbiAgICB8fCB3aW5kb3cubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4gICAgfHwgKGNiID0+IHNldFRpbWVvdXQoY2IsIDE2KSlcbiAgcnVubmVyKGNhbGxiYWNrKVxufVxuZXhwb3J0IGZ1bmN0aW9uIHRvQ1NTVGV4dCAob2JqZWN0KSB7XG4gIGlmICghb2JqZWN0KSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgY29uc3Qgb2JqID0gaHlwaGVuYXRlU3R5bGVLZXlzKG9iamVjdClcbiAgbGV0IGNzc1RleHQgPSAnJ1xuICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcbiAgICBjc3NUZXh0ICs9IGAke2tleX06JHtvYmpba2V5XX07YFxuICB9XG4gIHJldHVybiBjc3NUZXh0XG59XG4iLCIvKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSAnLi4vdXRpbHMvZnVuYydcblxuLyoqXG4gKiB2aWV3cG9ydCBwcmlvcml0eTpcbiAqXG4gKiAxLiBtZXRhIHdlZXgtdmlld3BvcnQgKGRldmVsb3BlciBjdXN0b20pXG4gKiAyLiBzZXRWaWV3cG9ydChjb25maWcpIDo9IGNvbmZpZy53aWR0aCAocHJpdmF0ZSBjb2RlKSBAZGVwcmVjYXRlZFxuICogMy4gcHJvY2Vzcy5lbnYuVklFV1BPUlRfV0lEVEggKGJ1aWQgdGltZSlcbiAqXG4gKi9cbmxldCBpc0luaXRlZCA9IGZhbHNlXG5jb25zdCBERUZBVUxUX1ZJRVdQT1JUX1dJRFRIID0gNzUwXG5cbi8qKlxuICogZ2V0IHZpZXdwb3J0IHdpZHRoIGZyb20gd2VleC12aWV3cG9ydCBtZXRhLlxuICovXG5jb25zdCBlbnZWaWV3cG9ydFdpZHRoID0gcGFyc2VJbnQocHJvY2Vzcy5lbnYuVklFV1BPUlRfV0lEVEgpXG5sZXQgd2lkdGggPSAhaXNOYU4oZW52Vmlld3BvcnRXaWR0aCkgJiYgZW52Vmlld3BvcnRXaWR0aCA+IDBcbiAgPyBlbnZWaWV3cG9ydFdpZHRoXG4gIDogREVGQVVMVF9WSUVXUE9SVF9XSURUSFxuXG5sZXQgd3hWaWV3cG9ydE1ldGEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtZXRhW25hbWU9XCJ3ZWV4LXZpZXdwb3J0XCJdJylcbmNvbnN0IG1ldGFXaWR0aCA9IHd4Vmlld3BvcnRNZXRhICYmIHBhcnNlSW50KHd4Vmlld3BvcnRNZXRhLmdldEF0dHJpYnV0ZSgnY29udGVudCcpKVxuaWYgKG1ldGFXaWR0aCAmJiAhaXNOYU4obWV0YVdpZHRoKSAmJiBtZXRhV2lkdGggPiAwKSB7XG4gIHdpZHRoID0gbWV0YVdpZHRoXG59XG5cbmxldCBkcHIgPSAwXG5sZXQgc2NyZWVuV2lkdGggPSAwXG5sZXQgc2NyZWVuSGVpZ2h0ID0gMFxuXG5jb25zdCBpbmZvID0ge1xuICBkcHIsXG4gIHNjYWxlOiAwLFxuICByb290VmFsdWU6IDAsXG4gIHJlbTogMCxcbiAgZGV2aWNlV2lkdGg6IDAsXG4gIGRldmljZUhlaWdodDogMFxufVxuXG4vKipcbiAqIHNldCByb290IGZvbnQtc2l6ZSBmb3IgcmVtIHVuaXRzLiBJZiBhbHJlYWR5IGJlZW4gc2V0LCBqdXN0IHNraXAgdGhpcy5cbiAqL1xuZnVuY3Rpb24gc2V0Um9vdEZvbnQgKHdpZHRoLCB2aWV3cG9ydFdpZHRoLCBmb3JjZSkge1xuICBjb25zdCBkb2MgPSB3aW5kb3cuZG9jdW1lbnRcbiAgY29uc3QgcmVtID0gd2lkdGggKiA3NTAgLyB2aWV3cG9ydFdpZHRoIC8gMTBcbiAgaWYgKCFkb2MuZG9jdW1lbnRFbGVtZW50KSB7IHJldHVybiB9XG4gIGNvbnN0IHJvb3RGb250U2l6ZSA9IGRvYy5kb2N1bWVudEVsZW1lbnQuc3R5bGUuZm9udFNpemVcbiAgaWYgKCFyb290Rm9udFNpemUgfHwgZm9yY2UpIHtcbiAgICBkb2MuZG9jdW1lbnRFbGVtZW50LnN0eWxlLmZvbnRTaXplID0gcmVtICsgJ3B4J1xuICB9XG4gIGluZm8ucmVtID0gcmVtXG4gIGluZm8ucm9vdFZhbHVlID0gdmlld3BvcnRXaWR0aCAvIDEwXG59XG5cbmZ1bmN0aW9uIHNldE1ldGFWaWV3cG9ydCAod2lkdGgpIHtcbiAgaWYgKCF3eFZpZXdwb3J0TWV0YSkge1xuICAgIHd4Vmlld3BvcnRNZXRhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbWV0YScpXG4gICAgd3hWaWV3cG9ydE1ldGEuc2V0QXR0cmlidXRlKCduYW1lJywgJ3dlZXgtdmlld3BvcnQnKVxuICAgIGNvbnN0IGZpcnN0TWV0YSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ21ldGEnKVxuICAgIGNvbnN0IGhlYWQgPSBmaXJzdE1ldGEgJiYgZmlyc3RNZXRhLnBhcmVudEVsZW1lbnRcbiAgICAgIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jaGlsZHJlblswXVxuICAgIGZpcnN0TWV0YVxuICAgICAgPyBoZWFkLmluc2VydEJlZm9yZSh3eFZpZXdwb3J0TWV0YSwgZmlyc3RNZXRhKVxuICAgICAgOiBoZWFkLmFwcGVuZENoaWxkKHd4Vmlld3BvcnRNZXRhKVxuICB9XG4gIGVsc2Uge1xuICAgIGNvbnN0IG1ldGFXaWR0aCA9IHBhcnNlSW50KHd4Vmlld3BvcnRNZXRhLmdldEF0dHJpYnV0ZSgnY29udGVudCcpKVxuICAgIGlmIChtZXRhV2lkdGggPT09IHdpZHRoKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gIH1cbiAgd3hWaWV3cG9ydE1ldGEuc2V0QXR0cmlidXRlKCdjb250ZW50Jywgd2lkdGggKyAnJylcbn1cblxuLyoqXG4gKiBleHBvcnQgdmlld3BvcnQgaW5mby5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluaXQgKHZpZXdwb3J0V2lkdGggPSB3aWR0aCkge1xuICBpZiAoIWlzSW5pdGVkKSB7XG4gICAgaXNJbml0ZWQgPSB0cnVlXG5cbiAgICBjb25zdCBkb2MgPSB3aW5kb3cuZG9jdW1lbnRcbiAgICBpZiAoIWRvYykge1xuICAgICAgY29uc29sZS5lcnJvcignW3Z1ZS1yZW5kZXJdIHdpbmRvdy5kb2N1bWVudCBpcyB1bmRmaW5lZC4nKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGlmICghZG9jLmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgY29uc29sZS5lcnJvcignW3Z1ZS1yZW5kZXJdIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCBpcyB1bmRmaW5lZC4nKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgZHByID0gaW5mby5kcHIgPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpb1xuICAgIHNjcmVlbldpZHRoID0gZG9jLmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aFxuICAgIHNjcmVlbkhlaWdodCA9IGRvYy5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0XG5cbiAgICBjb25zdCByZXNldERldmljZUhlaWdodCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHNjcmVlbkhlaWdodCA9IGRvYy5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0XG4gICAgICBjb25zdCBlbnYgPSB3aW5kb3cud2VleCAmJiB3aW5kb3cud2VleC5jb25maWcuZW52XG4gICAgICBpbmZvLmRldmljZUhlaWdodCA9IGVudi5kZXZpY2VIZWlnaHQgPSBzY3JlZW5IZWlnaHQgKiBkcHJcbiAgICB9XG5cbiAgICAvLyBzZXQgcm9vdCBmb250IGZvciByZW0uXG4gICAgc2V0Um9vdEZvbnQoc2NyZWVuV2lkdGgsIHZpZXdwb3J0V2lkdGgpXG4gICAgc2V0TWV0YVZpZXdwb3J0KHZpZXdwb3J0V2lkdGgpXG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgcmVzZXREZXZpY2VIZWlnaHQpXG5cbiAgICAvKipcbiAgICAgKiB3aHkgbm90IHRvIHVzZSB3aW5kb3cuc2NyZWVuLndpZHRoIHRvIGdldCBzY3JlZW5XaWR0aCA/IEJlY2F1c2UgaW4gc29tZVxuICAgICAqIG9sZCB3ZWJraXQgYnJvd3NlciBvbiBhbmRyb2lkIHN5c3RlbSBpdCBnZXQgdGhlIGRldmljZSBwaXhlbCB3aWR0aCwgd2hpY2hcbiAgICAgKiBpcyB0aGUgc2NyZWVuV2lkdGggbXVsdGlwbHkgYnkgdGhlIGRldmljZSBwaXhlbCByYXRpby5cbiAgICAgKiBlLmcuIGlwNiAtPiBnZXQgMzc1IGZvciB2aXJ0dWFsIHNjcmVlbiB3aWR0aC5cbiAgICAgKi9cbiAgICBjb25zdCBzY2FsZSA9IHNjcmVlbldpZHRoIC8gdmlld3BvcnRXaWR0aFxuICAgIC8qKlxuICAgICAqIDEuIGlmIHNldCBpbml0aWFsL21heGltdW0vbWltaW11bS1zY2FsZSBzb21lIGhvdyB0aGUgcGFnZSB3aWxsIGhhdmUgYSBib3VuY2VcbiAgICAgKiBlZmZlY3Qgd2hlbiB1c2VyIGRyYWcgdGhlIHBhZ2UgdG93YXJkcyBob3Jpem9udGFsIGF4aXMuXG4gICAgICogMi4gRHVlIHRvIGNvbXBhdGliaWxpdHkgcmVhc29ucywgbm90IHRvIHVzZSB2aWV3cG9ydCBtZXRhIGFueW1vcmUuXG4gICAgICogMy4gdmlld3BvcnQgbWV0YSBzaG91bGQgYWx3YXlzIGJlOlxuICAgICAqICAgIDxtZXRhIG5hbWU9XCJ2aWV3cG9ydFwiXG4gICAgICogICAgICBjb250ZW50PVwid2lkdGg9ZGV2aWNlLXdpZHRoLFxuICAgICAqICAgICAgaW5pdGlhbC1zY2FsZT0xLFxuICAgICAqICAgICAgbWF4aW11bS1zY2FsZT0xLFxuICAgICAqICAgICAgdXNlci1zY2FsYWJsZT1ub1wiIC8+XG4gICAgICovXG4gICAgZXh0ZW5kKGluZm8sIHtcbiAgICAgIHNjYWxlLFxuICAgICAgcm9vdFZhbHVlOiB2aWV3cG9ydFdpZHRoIC8gMTAsXG4gICAgICBkZXZpY2VXaWR0aDogc2NyZWVuV2lkdGggKiBkcHIsXG4gICAgICBkZXZpY2VIZWlnaHQ6IHNjcmVlbkhlaWdodCAqIGRwclxuICAgIH0pXG4gIH1cblxuICByZXR1cm4gaW5mb1xufVxuXG4vKipcbiAqIHJlc2V0IHZpZXdwb3J0IHdpZHRoIGFuZCBzY2FsZS5cbiAqIEByZXR1cm4gbmV3IHNjYWxlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVzZXRWaWV3cG9ydCAodmlld3BvcnRXaWR0aCkge1xuICBzZXRSb290Rm9udChzY3JlZW5XaWR0aCwgdmlld3BvcnRXaWR0aCwgdHJ1ZSlcbiAgc2V0TWV0YVZpZXdwb3J0KHZpZXdwb3J0V2lkdGgpXG4gIGNvbnN0IG5ld1NjYWxlID0gc2NyZWVuV2lkdGggLyB2aWV3cG9ydFdpZHRoXG4gIGluZm8uc2NhbGUgPSBuZXdTY2FsZVxuICByZXR1cm4gbmV3U2NhbGVcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFZpZXdwb3J0SW5mbyAoKSB7XG4gIHJldHVybiBpbmZvXG59XG4iLCIvKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuZnVuY3Rpb24gZXh0ZW5kICh0bywgLi4uYXJncykge1xuICBpZiAoIWFyZ3MgfHwgYXJncy5sZW5ndGggPD0gMCkgeyByZXR1cm4gdG8gfVxuICBhcmdzLmZvckVhY2goZnJvbSA9PiB7XG4gICAgaWYgKHR5cGVvZiBmcm9tICE9PSAnb2JqZWN0JykgeyByZXR1cm4gfVxuICAgIGZvciAoY29uc3Qga2V5IGluIGZyb20pIHtcbiAgICAgIHRvW2tleV0gPSBmcm9tW2tleV1cbiAgICB9XG4gIH0pXG4gIHJldHVybiB0b1xufVxuXG4vLyBpZiBzdXBwb3J0IHBhc3NpdmUgZXZlbnQgbGlzdGVuZXJzLlxubGV0IF9zdXBwb3J0c1Bhc3NpdmUgPSBmYWxzZVxudHJ5IHtcbiAgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykuYWRkRXZlbnRMaXN0ZW5lcigndGVzdCcsIF8gPT4ge30sIHtcbiAgICBnZXQgcGFzc2l2ZSAoKSB7XG4gICAgICBfc3VwcG9ydHNQYXNzaXZlID0gdHJ1ZVxuICAgIH1cbiAgfSlcbn1cbmNhdGNoIChlKSB7XG4gIC8vIGRvIG5vdGhpbmcuXG59XG5leHBvcnQgZnVuY3Rpb24gc3VwcG9ydHNQYXNzaXZlICgpIHtcbiAgcmV0dXJuIF9zdXBwb3J0c1Bhc3NpdmVcbn1cblxuLyoqXG4gKiBDcmVhdGUgRXZlbnQuXG4gKiBAcGFyYW0ge0RPTVN0cmluZ30gdHlwZVxuICogQHBhcmFtIHtPYmplY3R9IHByb3BzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFdmVudCAodGFyZ2V0LCB0eXBlLCBwcm9wcykge1xuICBjb25zdCBldmVudCA9IG5ldyBFdmVudCh0eXBlLCB7IGJ1YmJsZXM6IGZhbHNlIH0pXG5cbiAgZXh0ZW5kKGV2ZW50LCBwcm9wcylcbiAgLy8gIHBoYW50b21qcyBkb24ndCBzdXBwb3J0IGN1c3RvbWVyIGV2ZW50XG4gIGlmICh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJ3BoYW50b21qcycpICE9PSAtMSkge1xuICAgIHJldHVybiBldmVudFxuICB9XG4gIHRyeSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV2ZW50LCAndGFyZ2V0Jywge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiB0YXJnZXRcbiAgICB9KVxuICB9XG4gIGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gZXh0ZW5kKHt9LCBldmVudCwgeyB0YXJnZXQ6IHRhcmdldCB9KVxuICB9XG4gIHJldHVybiBldmVudFxufVxuXG4vKipcbiAqIENyZWF0ZSBhIGJ1YmJhYmxlIEV2ZW50LlxuICogQHBhcmFtIHtET01TdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wc1xuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQnViYmxlc0V2ZW50ICh0YXJnZXQsIHR5cGUsIHByb3BzKSB7XG4gIGNvbnN0IGV2ZW50ID0gbmV3IEV2ZW50KHR5cGUsIHsgYnViYmxlczogdHJ1ZSB9KVxuICBleHRlbmQoZXZlbnQsIHByb3BzKVxuICAvLyAgcGhhbnRvbWpzIGRvbid0IHN1cHBvcnQgY3VzdG9tZXIgZXZlbnRcbiAgaWYgKHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkuaW5kZXhPZigncGhhbnRvbWpzJykgIT09IC0xKSB7XG4gICAgcmV0dXJuIGV2ZW50XG4gIH1cbiAgdHJ5IHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXZlbnQsICd0YXJnZXQnLCB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IHRhcmdldFxuICAgIH0pXG4gIH1cbiAgY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBleHRlbmQoe30sIGV2ZW50LCB7IHRhcmdldDogdGFyZ2V0IH0pXG4gIH1cbiAgcmV0dXJuIGV2ZW50XG59XG5cbi8qKlxuICogQ3JlYXRlIEN1c3RvbSBFdmVudC5cbiAqIEBwYXJhbSB7RE9NU3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUN1c3RvbUV2ZW50ICh0YXJnZXQsIHR5cGUsIHByb3BzKSB7XG4gIC8vIGNvbXBhdGliaWxpdHk6IGh0dHA6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPWN1c3RvbWV2ZW50XG4gIC8vIGNvbnN0IGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KHR5cGUpXG4gIGNvbnN0IGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0N1c3RvbUV2ZW50JylcbiAgZXZlbnQuaW5pdEN1c3RvbUV2ZW50KHR5cGUsIGZhbHNlLCB0cnVlLCB7fSlcbiAgLy8gZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAvLyBldmVudC5zdG9wUHJvcGFnYXRpb24oKVxuXG4gIGV4dGVuZChldmVudCwgcHJvcHMpXG5cbiAgLy8gZXZlbnQudGFyZ2V0IGlzIHJlYWRvbmx5XG4gIHRyeSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV2ZW50LCAndGFyZ2V0Jywge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiB0YXJnZXQgfHwgbnVsbFxuICAgIH0pXG4gIH1cbiAgY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBleHRlbmQoe30sIGV2ZW50LCB7IHRhcmdldDogdGFyZ2V0IHx8IG51bGwgfSlcbiAgfVxuXG4gIHJldHVybiBldmVudFxufVxuXG4vKipcbiAqIGRpc3BhdGNoIGEgZXZlbnQgb24gYSBIVE1MIGVsZW1lbnQuXG4gKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gZWxtXG4gKiBAcGFyYW0gIHtFdmVudH0gdHlwZSBldmVudCBuYW1lLlxuICogQHBhcmFtICB7T2JqZWN0fSBkYXRhIGV4dHJhIGRhdGEuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkaXNwYXRjaE5hdGl2ZUV2ZW50IChlbG0sIHR5cGUsIGRhdGEpIHtcbiAgZWxtLmRpc3BhdGNoRXZlbnQoY3JlYXRlRXZlbnQoZWxtLCB0eXBlLCBkYXRhKSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hcEZvcm1FdmVudHMgKGNvbnRleHQpIHtcbiAgY29uc3QgZXZlbnRNYXAgPSB7fVxuICA7WydpbnB1dCcsICdjaGFuZ2UnLCAnZm9jdXMnLCAnYmx1cicsICdyZXR1cm4nXS5mb3JFYWNoKHR5cGUgPT4ge1xuICAgIGV2ZW50TWFwW3R5cGVdID0gZXZlbnQgPT4ge1xuICAgICAgaWYgKGNvbnRleHQuJGVsKSB7XG4gICAgICAgIGV2ZW50LnZhbHVlID0gY29udGV4dC4kZWwudmFsdWVcbiAgICAgICAgLy8gZm9yIHRoZSBzYWtlIG9mIHYtbW9kZWwsIGEgaW5wdXQgZXZlbnQgbXVzdCBiZSBlbWl0dGVkLlxuICAgICAgICBpZiAodHlwZSA9PT0gJ2lucHV0Jykge1xuICAgICAgICAgIGNvbnRleHQuJGVtaXQodHlwZSwgZXZlbnQpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pXG4gIHJldHVybiBldmVudE1hcFxufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG1hcEZvcm1FdmVudHNcbn1cbiIsIi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgaHlwaGVuYXRlIH0gZnJvbSAnLi91dGlscydcblxuY29uc3Qgc2NhbGVTdHlsZXMgPSBbXG4gICd3aWR0aCcsXG4gICdoZWlnaHQnLFxuICAnbGVmdCcsXG4gICdyaWdodCcsXG4gICd0b3AnLFxuICAnYm90dG9tJyxcbiAgJ2JvcmRlcicsXG4gICdib3JkZXJSYWRpdXMnLFxuICAnYm9yZGVyV2lkdGgnLFxuICAnYm9yZGVyTGVmdCcsXG4gICdib3JkZXJSaWdodCcsXG4gICdib3JkZXJUb3AnLFxuICAnYm9yZGVyQm90dG9tJyxcbiAgJ2JvcmRlckxlZnRXaWR0aCcsXG4gICdib3JkZXJSaWdodFdpZHRoJyxcbiAgJ2JvcmRlclRvcFdpZHRoJyxcbiAgJ2JvcmRlckJvdHRvbVdpZHRoJyxcbiAgJ21hcmdpbicsXG4gICdtYXJnaW5MZWZ0JyxcbiAgJ21hcmdpblJpZ2h0JyxcbiAgJ21hcmdpblRvcCcsXG4gICdtYXJnaW5Cb3R0b20nLFxuICAncGFkZGluZycsXG4gICdwYWRkaW5nTGVmdCcsXG4gICdwYWRkaW5nUmlnaHQnLFxuICAncGFkZGluZ1RvcCcsXG4gICdwYWRkaW5nQm90dG9tJyxcbiAgJ2ZvbnRTaXplJyxcbiAgJ2xpbmVIZWlnaHQnLFxuICAndHJhbnNmb3JtJyxcbiAgJ3dlYmtpdFRyYW5zZm9ybScsXG4gICdXZWJraXRUcmFuc2Zvcm0nLFxuICAnbW96VHJhbnNmb3JtJyxcbiAgJ01velRyYW5zZm9ybScsXG4gICdpdGVtU2l6ZSdcbl1cblxuY29uc3QgdmVuZG9yUmVnID0gL3dlYmtpdHxtb3ovaVxuZnVuY3Rpb24gaHlwaGVuIChrZXkpIHtcbiAgcmV0dXJuIGh5cGhlbmF0ZShrZXkucmVwbGFjZSh2ZW5kb3JSZWcsIGZ1bmN0aW9uICgkMCkge1xuICAgIHJldHVybiBgLSR7JDAudG9Mb3dlckNhc2UoKX0tYFxuICB9KSlcbn1cblxuZnVuY3Rpb24gZ2V0QWxsU3R5bGVzICgpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHNjYWxlU3R5bGVzLnJlZHVjZShmdW5jdGlvbiAocHJlLCBrZXkpIHtcbiAgICBwcmVba2V5XSA9IDFcbiAgICBwcmVbaHlwaGVuKGtleSldID0gMVxuICAgIHJldHVybiBwcmVcbiAgfSwge30pKVxufVxuXG5jb25zdCBhbGxTdHlsZXMgPSBnZXRBbGxTdHlsZXMoKVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHNjcm9sbGFibGVUeXBlczogWydzY3JvbGxlcicsICdsaXN0JywgJ3dhdGVyZmFsbCddLFxuICBnZXN0dXJlRXZlbnRzOiBbXG4gICAgJ3BhbnN0YXJ0JyxcbiAgICAncGFubW92ZScsXG4gICAgJ3BhbmVuZCcsXG4gICAgJ3N3aXBlJyxcbiAgICAnbG9uZ3ByZXNzJyxcbiAgICAndGFwJ1xuICBdLFxuICAvLyB0aGVzZSBjb21wb25lbnRzIHNob3VsZCBub3QgYmluZCBldmVudHMgd2l0aCAubmF0aXZlLlxuICB3ZWV4QnVpbHRJbkNvbXBvbmVudHM6IFtcbiAgICAnZGl2JyxcbiAgICAnY29udGFpbmVyJyxcbiAgICAndGV4dCcsXG4gICAgJ2ltYWdlJyxcbiAgICAnaW1nJyxcbiAgICAnY2VsbCcsXG4gICAgJ2EnXG4gIF0sXG4gIGJpbmRpbmdTdHlsZU5hbWVzRm9yUHgyUmVtOiBhbGxTdHlsZXNcbn1cbiIsIi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgdGhyb3R0bGUsIGV4dGVuZCB9IGZyb20gJy4vZnVuYydcbmltcG9ydCB7IGRpc3BhdGNoTmF0aXZlRXZlbnQgfSBmcm9tICcuL2V2ZW50J1xuaW1wb3J0IGNvbmZpZyBmcm9tICcuLi9jb25maWcnXG5cbi8qKlxuICogd2hldGhlciBjdCBjb250YWlucyBlbC5cbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGNvbnRhaW5lclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gdGFyZ2V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb250YWlucyAoY29udGFpbmVyLCB0YXJnZXQsIGluY2x1ZGVTZWxmKSB7XG4gIGlmIChpbmNsdWRlU2VsZiAmJiBjb250YWluZXIgPT09IHRhcmdldCkge1xuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgcmV0dXJuIGNvbnRhaW5lci5jb250YWluc1xuICAgID8gY29udGFpbmVyLmNvbnRhaW5zKHRhcmdldCkgJiYgKGNvbnRhaW5lciAhPT0gdGFyZ2V0KVxuICAgIDogY29udGFpbmVyLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKHRhcmdldCkgJiAxNiAhPT0gMFxufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5zaWRlQSAoZWwpIHtcbiAgaWYgKHR5cGVvZiBlbC5faW5zaWRlQSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgcmV0dXJuIGVsLl9pbnNpZGVBXG4gIH1cbiAgbGV0IHBhcmVudCA9IGVsLnBhcmVudEVsZW1lbnRcbiAgY29uc3QgcGFyZW50cyA9IFtdXG4gIGNvbnN0IGNoZWNrUGFyZW50cyA9IGZ1bmN0aW9uIChpbnNpZGUpIHtcbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IHBhcmVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBwYXJlbnRzW2ldLl9pbnNpZGVBID0gaW5zaWRlXG4gICAgfVxuICB9XG4gIGNvbnN0IGNoZWNrID0gZnVuY3Rpb24gKGluc2lkZSkge1xuICAgIGVsLl9pbnNpZGVBID0gaW5zaWRlXG4gICAgY2hlY2tQYXJlbnRzKGluc2lkZSlcbiAgICByZXR1cm4gaW5zaWRlXG4gIH1cbiAgd2hpbGUgKHBhcmVudCAhPT0gZG9jdW1lbnQuYm9keSkge1xuICAgIGlmIChwYXJlbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnYScpIHtcbiAgICAgIHJldHVybiBjaGVjayh0cnVlKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIHBhcmVudC5faW5zaWRlQSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICByZXR1cm4gY2hlY2socGFyZW50Ll9pbnNpZGVBKVxuICAgIH1cbiAgICBwYXJlbnRzLnB1c2gocGFyZW50KVxuICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnRFbGVtZW50XG4gIH1cbiAgcmV0dXJuIGNoZWNrKGZhbHNlKVxufVxuXG4vKipcbiAqIGdldCBwYXJlbnQgc2Nyb2xsZXIgdkNvbXBvbmVudC5cbiAqIHJldHVybiBhIFZ1ZUNvbXBvbmVudCBvciBudWxsLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGFyZW50U2Nyb2xsZXIgKHZtKSB7XG4gIGlmICghdm0pIHJldHVybiBudWxsXG4gIGlmICh2bS5fcGFyZW50U2Nyb2xsZXIpIHtcbiAgICByZXR1cm4gdm0uX3BhcmVudFNjcm9sbGVyXG4gIH1cbiAgZnVuY3Rpb24gX2dldFBhcmVudFNjcm9sbGVyIChwYXJlbnQpIHtcbiAgICBpZiAoIXBhcmVudCkgeyByZXR1cm4gfVxuICAgIGlmIChjb25maWcuc2Nyb2xsYWJsZVR5cGVzLmluZGV4T2YocGFyZW50LndlZXhUeXBlKSA+IC0xKSB7XG4gICAgICB2bS5fcGFyZW50U2Nyb2xsZXIgPSBwYXJlbnRcbiAgICAgIHJldHVybiBwYXJlbnRcbiAgICB9XG4gICAgcmV0dXJuIF9nZXRQYXJlbnRTY3JvbGxlcihwYXJlbnQuJHBhcmVudClcbiAgfVxuICByZXR1cm4gX2dldFBhcmVudFNjcm9sbGVyKHZtLiRwYXJlbnQpXG59XG5cbi8qKlxuICogZ2V0IHNjcm9sbGVyJ3MgZWxlbWVudC5cbiAqIEBwYXJhbSB2bSB7SFRNTEVsZW1lbnQgfCBWdWVDT21wb25lbnR9IHZtIG9yIGVsZW1lbnQuXG4gKiByZXR1cm4gdGhlIGVsZW1lbnQgb3IgZG9jdW1lbnQuYm9keS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFBhcmVudFNjcm9sbGVyRWxlbWVudCAodm0pIHtcbiAgaWYgKCF2bSkgeyByZXR1cm4gbnVsbCB9XG4gIGNvbnN0IGVsID0gdm0gaW5zdGFuY2VvZiBIVE1MRWxlbWVudCA/IHZtIDogdm0uJGVsXG4gIGlmICghZWwgfHwgZWwubm9kZVR5cGUgIT09IDEpIHsgcmV0dXJuIH1cbiAgaWYgKHZtLl9wYXJlbnRTY3JvbGxlcikge1xuICAgIHJldHVybiB2bS5fcGFyZW50U2Nyb2xsZXJcbiAgfVxuICBmdW5jdGlvbiBfZ2V0UGFyZW50U2Nyb2xsZXIgKHBhcmVudCkge1xuICAgIGlmICghcGFyZW50KSB7IHJldHVybiB9XG4gICAgY29uc3QgdGFnTmFtZSA9IHBhcmVudC50YWdOYW1lLnRvTG93ZXJDYXNlKClcbiAgICBpZiAodGFnTmFtZSA9PT0gJ2JvZHknXG4gICAgICB8fCAodGFnTmFtZSA9PT0gJ21haW4nXG4gICAgICAmJiBjb25maWcuc2Nyb2xsYWJsZVR5cGVzLmluZGV4T2YocGFyZW50LmdldEF0dHJpYnV0ZSgnd2VleC10eXBlJykpID4gLTEpXG4gICAgKSB7XG4gICAgICB2bS5fcGFyZW50U2Nyb2xsZXIgPSBwYXJlbnRcbiAgICAgIHJldHVybiBwYXJlbnRcbiAgICB9XG4gICAgcmV0dXJuIF9nZXRQYXJlbnRTY3JvbGxlcihwYXJlbnQucGFyZW50RWxlbWVudClcbiAgfVxuICByZXR1cm4gX2dldFBhcmVudFNjcm9sbGVyKGVsKVxufVxuXG5mdW5jdGlvbiBob3Jpem9udGFsQmFsYW5jZSAocmVjdCwgY3RSZWN0KSB7XG4gIHJldHVybiByZWN0LmxlZnQgPCBjdFJlY3QucmlnaHQgJiYgcmVjdC5yaWdodCA+IGN0UmVjdC5sZWZ0XG59XG5cbmZ1bmN0aW9uIHZlcnRpY2FsQmFsYW5jZSAocmVjdCwgY3RSZWN0KSB7XG4gIHJldHVybiByZWN0LnRvcCA8IGN0UmVjdC5ib3R0b20gJiYgcmVjdC5ib3R0b20gPiBjdFJlY3QudG9wXG59XG5cbi8qKlxuICogcmV0dXJuIGEgZGF0YSBhcnJheSB3aXRoIHR3byBib29sZWFuIHZhbHVlLCB3aGljaCBhcmU6XG4gKiAxLiB2aXNpYmxlIGluIGN1cnJlbnQgY3QncyB2aWV3cG9ydC5cbiAqIDIuIHZpc2libGUgd2l0aCBvZmZzZXQgaW4gY3VycmVudCBjdCdzIHZpZXdwb3J0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gaGFzSW50ZXJzZWN0aW9uIChyZWN0LCBjdFJlY3QsIGRpciwgb2Zmc2V0KSB7XG4gIGRpciA9IGRpciB8fCAndXAnXG4gIGNvbnN0IGlzSG9yaXpvbnRhbCA9IGRpciA9PT0gJ2xlZnQnIHx8IGRpciA9PT0gJ3JpZ2h0J1xuICBjb25zdCBpc1ZlcnRpY2FsID0gZGlyID09PSAndXAnIHx8IGRpciA9PT0gJ2Rvd24nXG4gIGlmIChpc0hvcml6b250YWwgJiYgIXZlcnRpY2FsQmFsYW5jZShyZWN0LCBjdFJlY3QpKSB7XG4gICAgcmV0dXJuIFtmYWxzZSwgZmFsc2VdXG4gIH1cbiAgaWYgKGlzVmVydGljYWwgJiYgIWhvcml6b250YWxCYWxhbmNlKHJlY3QsIGN0UmVjdCkpIHtcbiAgICByZXR1cm4gW2ZhbHNlLCBmYWxzZV1cbiAgfVxuICBvZmZzZXQgPSBvZmZzZXQgPyBwYXJzZUludChvZmZzZXQpICogd2VleC5jb25maWcuZW52LnNjYWxlIDogMFxuICBzd2l0Y2ggKGRpcikge1xuICAgIGNhc2UgJ3VwJzpcbiAgICAgIHJldHVybiBbXG4gICAgICAgIHJlY3QudG9wIDwgY3RSZWN0LmJvdHRvbSAmJiByZWN0LmJvdHRvbSA+IGN0UmVjdC50b3AsXG4gICAgICAgIHJlY3QudG9wIDwgY3RSZWN0LmJvdHRvbSArIG9mZnNldCAmJiByZWN0LmJvdHRvbSA+IGN0UmVjdC50b3AgLSBvZmZzZXRcbiAgICAgIF1cbiAgICBjYXNlICdkb3duJzpcbiAgICAgIHJldHVybiBbXG4gICAgICAgIHJlY3QuYm90dG9tID4gY3RSZWN0LnRvcCAmJiByZWN0LnRvcCA8IGN0UmVjdC5ib3R0b20sXG4gICAgICAgIHJlY3QuYm90dG9tID4gY3RSZWN0LnRvcCAtIG9mZnNldCAmJiByZWN0LnRvcCA8IGN0UmVjdC5ib3R0b20gKyBvZmZzZXRcbiAgICAgIF1cbiAgICBjYXNlICdsZWZ0JzpcbiAgICAgIHJldHVybiBbXG4gICAgICAgIHJlY3QubGVmdCA8IGN0UmVjdC5yaWdodCAmJiByZWN0LnJpZ2h0ID4gY3RSZWN0LmxlZnQsXG4gICAgICAgIHJlY3QubGVmdCA8IGN0UmVjdC5yaWdodCArIG9mZnNldCAmJiByZWN0LnJpZ2h0ID4gY3RSZWN0LmxlZnQgLSBvZmZzZXRcbiAgICAgIF1cbiAgICBjYXNlICdyaWdodCc6XG4gICAgICByZXR1cm4gW1xuICAgICAgICByZWN0LnJpZ2h0ID4gY3RSZWN0LmxlZnQgJiYgcmVjdC5sZWZ0IDwgY3RSZWN0LnJpZ2h0LFxuICAgICAgICByZWN0LnJpZ2h0ID4gY3RSZWN0LmxlZnQgLSBvZmZzZXQgJiYgcmVjdC5sZWZ0IDwgY3RSZWN0LnJpZ2h0ICsgb2Zmc2V0XG4gICAgICBdXG4gIH1cbn1cblxuLyoqXG4gKiBpc0VsZW1lbnRWaXNpYmxlXG4gKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gIGVsICAgIGEgZG9tIGVsZW1lbnQuXG4gKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gIGNvbnRhaW5lciAgb3B0aW9uYWwsIHRoZSBjb250YWluZXIgb2YgdGhpcyBlbC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRWxlbWVudFZpc2libGUgKGVsLCBjb250YWluZXIsIGRpciwgb2Zmc2V0KSB7XG4gIGlmICghZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KSB7IHJldHVybiBmYWxzZSB9XG4gIGNvbnN0IGJvZHlSZWN0ID0ge1xuICAgIHRvcDogMCxcbiAgICBsZWZ0OiAwLFxuICAgIGJvdHRvbTogd2luZG93LmlubmVySGVpZ2h0LFxuICAgIHJpZ2h0OiB3aW5kb3cuaW5uZXJXaWR0aFxuICB9XG4gIGNvbnN0IGN0UmVjdCA9IChjb250YWluZXIgPT09IHdpbmRvdyB8fCBjb250YWluZXIgPT09IGRvY3VtZW50LmJvZHkpXG4gICAgPyBib2R5UmVjdCA6IGNvbnRhaW5lclxuICAgICAgPyBjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgOiBib2R5UmVjdFxuICByZXR1cm4gaGFzSW50ZXJzZWN0aW9uKGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLCBjdFJlY3QsIGRpciwgb2Zmc2V0KVxufVxuXG4vLyB0byB0cmlnZ2VyIHRoZSBhcHBlYXIvZGlzYXBwZWFyIGV2ZW50LlxuZnVuY3Rpb24gdHJpZ2dlckFwcGVhckV2ZW50IChlbG0sIGV2dCwgZGlyKSB7XG4gIGRpc3BhdGNoTmF0aXZlRXZlbnQoZWxtLCBldnQsIHtcbiAgICBkaXJlY3Rpb246IGRpclxuICB9KVxufVxuXG4vKipcbiAqIGdldCBhbGwgZXZlbnQgbGlzdGVuZXJzLiBpbmNsdWRpbmcgYm91bmQgaGFuZGxlcnMgaW4gYWxsIHBhcmVudCB2bm9kZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRFdmVudEhhbmRsZXJzIChjb250ZXh0KSB7XG4gIGxldCB2bm9kZSA9IGNvbnRleHQuJHZub2RlXG4gIGNvbnN0IGhhbmRsZXJzID0ge31cbiAgY29uc3QgYXR0YWNoZWRWbm9kZXMgPSBbXVxuICB3aGlsZSAodm5vZGUpIHtcbiAgICBhdHRhY2hlZFZub2Rlcy5wdXNoKHZub2RlKVxuICAgIHZub2RlID0gdm5vZGUucGFyZW50XG4gIH1cbiAgYXR0YWNoZWRWbm9kZXMuZm9yRWFjaChmdW5jdGlvbiAodm5vZGUpIHtcbiAgICBjb25zdCBwYXJlbnRMaXN0ZW5lcnMgPSB2bm9kZS5jb21wb25lbnRPcHRpb25zICYmIHZub2RlLmNvbXBvbmVudE9wdGlvbnMubGlzdGVuZXJzXG4gICAgY29uc3QgZGF0YU9uID0gdm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLm9uXG4gICAgZXh0ZW5kKGhhbmRsZXJzLCBwYXJlbnRMaXN0ZW5lcnMsIGRhdGFPbilcbiAgfSlcbiAgcmV0dXJuIGhhbmRsZXJzXG59XG5cbmZ1bmN0aW9uIGdldEFwcGVhck9mZnNldCAoZWwpIHtcbiAgcmV0dXJuIGVsICYmIGVsLmdldEF0dHJpYnV0ZSgnYXBwZWFyLW9mZnNldCcpXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVdhdGNoQXBwZWFyTGlzdCAoY29udGFpbmVyKSB7XG4gIGNvbnRhaW5lci5fd2F0Y2hBcHBlYXJMaXN0ID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoXG4gICAgY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJ1t3ZWV4LWFwcGVhcl0nKSlcbn1cblxuLyoqXG4gKiBpbmplY3QgcmVtb3ZlQ2hpbGQgZnVuY3Rpb24gdG8gd2F0Y2ggZGlzYXBwZWFyIGFuZCBvZmZzZXREaXNhcHBlYXIgZXZlbnRzLlxuICovXG5pZiAoIXdpbmRvdy5fcm1JbmplY3RlZCkge1xuICB3aW5kb3cuX3JtSW5qZWN0ZWQgPSB0cnVlXG4gIGNvbnN0IG5hdGl2ZVJlbW92ZSA9IEhUTUxFbGVtZW50LnByb3RvdHlwZS5yZW1vdmVDaGlsZFxuICBIVE1MRWxlbWVudC5wcm90b3R5cGUucmVtb3ZlQ2hpbGQgPSBmdW5jdGlvbiAoZWwpIHtcbiAgICBlbC5fdmlzaWJsZSAmJiB0cmlnZ2VyQXBwZWFyRXZlbnQoZWwsICdkaXNhcHBlYXInLCBudWxsKVxuICAgIGVsLl9vZmZzZXRWaXNpYmxlICYmIHRyaWdnZXJBcHBlYXJFdmVudChlbCwgJ29mZnNldERpc2FwcGVhcicsIG51bGwpXG4gICAgbmF0aXZlUmVtb3ZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgfVxufVxuXG4vKipcbiAqIFdhdGNoIGVsZW1lbnQncyB2aXNpYmlsaXR5IHRvIHRlbGwgd2hldGhlciBzaG91bGQgdHJpZ2dlciBhIGFwcGVhci9kaXNhcHBlYXJcbiAqIGV2ZW50IGluIHNjcm9sbCBoYW5kbGVyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gd2F0Y2hBcHBlYXIgKGNvbnRleHQsIGZpcmVOb3cpIHtcbiAgY29uc3QgZWwgPSBjb250ZXh0ICYmIGNvbnRleHQuJGVsXG4gIGlmICghZWwgfHwgZWwubm9kZVR5cGUgIT09IDEpIHsgcmV0dXJuIH1cblxuICBsZXQgaXNXaW5kb3cgPSBmYWxzZVxuICBjb25zdCBjb250YWluZXIgPSBnZXRQYXJlbnRTY3JvbGxlckVsZW1lbnQoY29udGV4dClcbiAgaWYgKCFjb250YWluZXIpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAoY29udGFpbmVyID09PSBkb2N1bWVudC5ib2R5KSB7XG4gICAgaXNXaW5kb3cgPSB0cnVlXG4gIH1cbiAgLyoqXG4gICAqIENvZGUgYmVsb3cgd2lsbCBvbmx5IGV4ZWMgb25jZSBmb3IgYmluZGluZyBzY3JvbGwgaGFuZGxlciBmb3IgcGFyZW50IGNvbnRhaW5lci5cbiAgICovXG4gIGxldCBzY3JvbGxIYW5kbGVyID0gY29udGFpbmVyLl9zY3JvbGxIYW5kbGVyXG4gIGlmICghc2Nyb2xsSGFuZGxlcikge1xuICAgIHNjcm9sbEhhbmRsZXIgPSBjb250YWluZXIuX3Njcm9sbEhhbmRsZXIgPSBldmVudCA9PiB7XG4gICAgICB1cGRhdGVXYXRjaEFwcGVhckxpc3QoY29udGFpbmVyKVxuICAgICAgLyoqXG4gICAgICAgKiBkZXRlY3Qgc2Nyb2xsaW5nIGRpcmVjdGlvbi5cbiAgICAgICAqIGRpcmVjdGlvbiBvbmx5IHN1cHBvcnQgdXAgJiBkb3duIHlldC5cbiAgICAgICAqIFRPRE86IGRpcmVjdGlvbiBzdXBwb3J0IGxlZnQgJiByaWdodC5cbiAgICAgICAqL1xuICAgICAgY29uc3Qgc2Nyb2xsVG9wID0gaXNXaW5kb3cgPyB3aW5kb3cucGFnZVlPZmZzZXQgOiBjb250YWluZXIuc2Nyb2xsVG9wXG4gICAgICBjb25zdCBwcmVUb3AgPSBjb250YWluZXIuX2xhc3RTY3JvbGxUb3BcbiAgICAgIGNvbnRhaW5lci5fbGFzdFNjcm9sbFRvcCA9IHNjcm9sbFRvcFxuICAgICAgY29uc3QgZGlyID0gKHNjcm9sbFRvcCA8IHByZVRvcFxuICAgICAgICA/ICdkb3duJyA6IHNjcm9sbFRvcCA+IHByZVRvcFxuICAgICAgICAgID8gJ3VwJyA6IGNvbnRhaW5lci5fcHJldkRpcmVjdGlvbikgfHwgbnVsbFxuICAgICAgY29udGFpbmVyLl9wcmV2RGlyZWN0aW9uID0gZGlyXG4gICAgICBjb25zdCB3YXRjaEFwcGVhckxpc3QgPSBjb250YWluZXIuX3dhdGNoQXBwZWFyTGlzdCB8fCBbXVxuICAgICAgY29uc3QgbGVuID0gd2F0Y2hBcHBlYXJMaXN0Lmxlbmd0aFxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBjb25zdCBlbCA9IHdhdGNoQXBwZWFyTGlzdFtpXVxuICAgICAgICBjb25zdCBhcHBlYXJPZmZzZXQgPSBnZXRBcHBlYXJPZmZzZXQoZWwpXG4gICAgICAgIGNvbnN0IHZpc2libGVEYXRhID0gaXNFbGVtZW50VmlzaWJsZShlbCwgY29udGFpbmVyLCBkaXIsIGFwcGVhck9mZnNldClcbiAgICAgICAgZGV0ZWN0QXBwZWFyKGVsLCB2aXNpYmxlRGF0YSwgZGlyKVxuICAgICAgfVxuICAgIH1cbiAgICBjb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhyb3R0bGUoc2Nyb2xsSGFuZGxlciwgMTAwLCB0cnVlKSlcbiAgfVxuICBpZiAoZmlyZU5vdykge1xuICAgIGNvbnRleHQuJG5leHRUaWNrKHNjcm9sbEhhbmRsZXIpXG4gIH1cbn1cblxuLyoqXG4gKiBkZWNpZGUgd2hldGhlciB0byB0cmlnZ2VyIGEgYXBwZWFyL2Rpc2FwcGVhciBldmVudC5cbiAqIEBwYXJhbSB7VnVlQ29tcG9uZW50fSBjb250ZXh0XG4gKiBAcGFyYW0ge2Jvb2xlYW59IHZpc2libGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRldGVjdEFwcGVhciAoZWwsIHZpc2libGVEYXRhLCBkaXIgPSBudWxsLCBhcHBlYXJPZmZzZXQpIHtcbiAgaWYgKCFlbCkgeyByZXR1cm4gfVxuICBjb25zdCBbdmlzaWJsZSwgb2Zmc2V0VmlzaWJsZV0gPSB2aXNpYmxlRGF0YVxuICAvKipcbiAgICogTm8gbWF0dGVyIGl0J3MgYmluZGluZyBhcHBlYXIvZGlzYXBwZWFyIG9yIGJvdGggb2YgdGhlbS4gQWx3YXlzXG4gICAqIHNob3VsZCB0ZXN0IGl0J3MgdmlzaWJpbGl0eSBhbmQgY2hhbmdlIHRoZSBlbC5fdmlzaWJsZS5cbiAgICogSWYgbmVpZ2hlciBoYXMgYmVlbiBib3VuZCwgdGhlbiBpZ25vcmUgaXQuXG4gICAqL1xuICAvKipcbiAgICogaWYgdGhlIGNvbXBvbmVudCBoYXNuJ3QgYXBwZWFyZWQgZm9yIG9uY2UgeWV0LCB0aGVuIGl0IHNob3VsZG4ndCB0cmlnZ2VyXG4gICAqIGEgZGlzYXBwZWFyIGV2ZW50IGF0IGFsbC5cbiAgICovXG4gIGlmIChlbC5fYXBwZWFyZWRPbmNlIHx8IHZpc2libGUpIHtcbiAgICBpZiAoZWwuX3Zpc2libGUgIT09IHZpc2libGUpIHtcbiAgICAgIGVsLl92aXNpYmxlID0gdmlzaWJsZVxuICAgICAgaWYgKHZpc2libGUgJiYgIWVsLl9hcHBlYXJlZE9uY2UpIHtcbiAgICAgICAgZWwuX2FwcGVhcmVkT25jZSA9IHRydWVcbiAgICAgIH1cbiAgICAgIGNvbnN0IGV2dE5hbWUgPSB2aXNpYmxlID8gJ2FwcGVhcicgOiAnZGlzYXBwZWFyJ1xuICAgICAgaWYgKGVsLmdldEF0dHJpYnV0ZShgZGF0YS1ldnQtJHtldnROYW1lfWApID09PSAnJykge1xuICAgICAgICB0cmlnZ2VyQXBwZWFyRXZlbnQoZWwsIGV2dE5hbWUsIGRpcilcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKGVsLl9vZmZzZXRBcHBlYXJlZE9uY2UgfHwgb2Zmc2V0VmlzaWJsZSkge1xuICAgIGlmIChlbC5fb2Zmc2V0VmlzaWJsZSAhPT0gb2Zmc2V0VmlzaWJsZSkge1xuICAgICAgZWwuX29mZnNldFZpc2libGUgPSBvZmZzZXRWaXNpYmxlXG4gICAgICBpZiAob2Zmc2V0VmlzaWJsZSAmJiAhZWwuX29mZnNldEFwcGVhcmVkT25jZSkge1xuICAgICAgICBlbC5fb2Zmc2V0QXBwZWFyZWRPbmNlID0gdHJ1ZVxuICAgICAgfVxuICAgICAgY29uc3QgZXZ0ID0gb2Zmc2V0VmlzaWJsZSA/IFsnb2Zmc2V0LWFwcGVhcicsICdvZmZzZXRBcHBlYXInXSA6IFsnb2Zmc2V0LWRpc2FwcGVhcicsICdvZmZzZXREaXNhcHBlYXInXVxuICAgICAgaWYgKGVsLmdldEF0dHJpYnV0ZShgZGF0YS1ldnQtJHtldnRbMF19YCkgPT09ICcnKSB7XG4gICAgICAgIHRyaWdnZXJBcHBlYXJFdmVudChlbCwgZXZ0WzFdLCBkaXIpXG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCIvKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgaXNFbGVtZW50VmlzaWJsZSB9IGZyb20gJy4vY29tcG9uZW50J1xuaW1wb3J0IHsgZGlzcGF0Y2hOYXRpdmVFdmVudCB9IGZyb20gJy4vZXZlbnQnXG5pbXBvcnQgeyB0aHJvdHRsZSB9IGZyb20gJy4vZnVuYydcblxuY29uc3QgbGF6eWxvYWRBdHRyID0gJ2RhdGEtaW1nLXNyYydcbmNvbnN0IHBsYWNlaG9sZGVyQXR0ciA9ICdwbGFjZWhvbGRlcidcblxuZnVuY3Rpb24gcHJlTG9hZEltZyAoc3JjLFxuICBsb2FkQ2FsbGJhY2ssXG4gIGVycm9yQ2FsbGJhY2spIHtcbiAgY29uc3QgaW1nID0gbmV3IEltYWdlKClcbiAgaW1nLm9ubG9hZCA9IGxvYWRDYWxsYmFjayA/IGxvYWRDYWxsYmFjay5iaW5kKGltZykgOiBudWxsXG4gIGltZy5vbmVycm9yID0gZXJyb3JDYWxsYmFjayA/IGVycm9yQ2FsbGJhY2suYmluZChpbWcpIDogbnVsbFxuICBpbWcuc3JjID0gc3JjXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBseVNyYyAoaXRlbSwgc3JjLCBwbGFjZWhvbGRlclNyYykge1xuICBpZiAoIXNyYykgeyByZXR1cm4gfVxuICBmdW5jdGlvbiBmaW5hbGxDYiAoKSB7XG4gICAgZGVsZXRlIGl0ZW0uX3NyY19sb2FkaW5nXG4gIH1cblxuICBpZiAod2luZG93Ll9wcm9jZXNzSW1nU3JjKSB7XG4gICAgc3JjID0gd2luZG93Ll9wcm9jZXNzSW1nU3JjKHNyYywgaXRlbSlcbiAgICBpZiAocGxhY2Vob2xkZXJTcmMpIHtcbiAgICAgIHBsYWNlaG9sZGVyU3JjID0gd2luZG93Ll9wcm9jZXNzSW1nU3JjKHBsYWNlaG9sZGVyU3JjLCBpdGVtKVxuICAgIH1cbiAgfVxuXG4gIGlmIChpdGVtLl9zcmNfbG9hZGluZyA9PT0gc3JjKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKipcbiAgICogMS4gYXBwbHkgc3JjIGltbWVkaWF0ZWx5IGluIGNhc2UgamF2c2NyaXB0IGJsb2NrcyB0aGUgaW1hZ2UgbG9hZGluZ1xuICAgKiAgYmVmb3JlIG5leHQgdGljay5cbiAgICovXG4gIGl0ZW0uc3R5bGUuYmFja2dyb3VuZEltYWdlID0gYHVybCgke3NyYyB8fCAnJ30pYFxuICBpdGVtLnJlbW92ZUF0dHJpYnV0ZShsYXp5bG9hZEF0dHIpXG4gIC8qKlxuICAgKiAyLiB0aGVuIGxvYWQgdGhlIGltZyBzcmMgd2l0aCBJbWFnZSBjb25zdHJ1Y3RvciAoYnV0IHdvdWxkIG5vdCBwb3N0XG4gICAqICBhIHJlcXVlc3QgYWdhaW4pLCBqdXN0IHRvIHRyaWdnZXIgdGhlIGxvYWQgZXZlbnQuXG4gICAqL1xuICBpdGVtLl9zcmNfbG9hZGluZyA9IHNyY1xuICBwcmVMb2FkSW1nKHNyYywgZnVuY3Rpb24gKGV2dCkge1xuICAgIGl0ZW0uc3R5bGUuYmFja2dyb3VuZEltYWdlID0gYHVybCgke3NyYyB8fCAnJ30pYFxuICAgIGNvbnN0IHsgd2lkdGg6IG5hdHVyYWxXaWR0aCwgaGVpZ2h0OiBuYXR1cmFsSGVpZ2h0IH0gPSB0aGlzXG4gICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIHNpemU6IHsgbmF0dXJhbFdpZHRoLCBuYXR1cmFsSGVpZ2h0IH1cbiAgICB9XG4gICAgZGlzcGF0Y2hOYXRpdmVFdmVudChpdGVtLCAnbG9hZCcsIHBhcmFtcylcbiAgICBmaW5hbGxDYigpXG4gIH0sIGZ1bmN0aW9uIChldnQpIHtcbiAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIHNpemU6IHsgbmF0dXJhbFdpZHRoOiAwLCBuYXR1cmFsSGVpZ2h0OiAwIH1cbiAgICB9XG4gICAgZGlzcGF0Y2hOYXRpdmVFdmVudChpdGVtLCAnbG9hZCcsIHBhcmFtcylcbiAgICBpZiAocGxhY2Vob2xkZXJTcmMpIHtcbiAgICAgIHByZUxvYWRJbWcocGxhY2Vob2xkZXJTcmMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXRlbS5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgPSBgdXJsKCR7cGxhY2Vob2xkZXJTcmMgfHwgJyd9KWBcbiAgICAgIH0pXG4gICAgfVxuICAgIGZpbmFsbENiKClcbiAgfSlcbn1cblxuZnVuY3Rpb24gZ2V0Q3RTY3JvbGxlciAoZWwpIHtcbiAgaWYgKCFlbCkgeyByZXR1cm4gfVxuICBsZXQgc2Nyb2xsZXIgPSBlbC5fcHRTY3JvbGxlclxuICBpZiAoIXNjcm9sbGVyKSB7XG4gICAgbGV0IHB0ID0gZWwucGFyZW50RWxlbWVudFxuICAgIHdoaWxlIChwdCAmJiBwdCAhPT0gZG9jdW1lbnQuYm9keSkge1xuICAgICAgaWYgKChwdC5jbGFzc05hbWUgKyAnJyB8fCAnJykubWF0Y2goL3dlZXgtbGlzdHx3ZWV4LXNjcm9sbGVyfHdlZXgtd2F0ZXJmYWxsLykpIHtcbiAgICAgICAgc2Nyb2xsZXIgPSBwdFxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgcHQgPSBwdC5wYXJlbnRFbGVtZW50XG4gICAgfVxuICAgIHNjcm9sbGVyID0gcHRcbiAgICBlbC5fcHRTY3JvbGxlciA9IHB0XG4gIH1cbiAgcmV0dXJuIHNjcm9sbGVyXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaXJlTGF6eWxvYWQgKGVsLCBpZ25vcmVWaXNpYmlsaXR5KSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGVsKSkge1xuICAgIHJldHVybiBlbC5mb3JFYWNoKGN0ID0+IGZpcmVMYXp5bG9hZChjdCkpXG4gIH1cbiAgZWwgPSBlbCB8fCBkb2N1bWVudC5ib2R5XG4gIGlmICghZWwpIHsgcmV0dXJuIH1cbiAgbGV0IGltZ3MgPSAoZWwgfHwgZG9jdW1lbnQuYm9keSkucXVlcnlTZWxlY3RvckFsbChgWyR7bGF6eWxvYWRBdHRyfV1gKVxuICBpZiAoZWwuZ2V0QXR0cmlidXRlKGxhenlsb2FkQXR0cikpIHsgaW1ncyA9IFtlbF0gfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGltZ3MubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBpbWcgPSBpbWdzW2ldXG4gICAgaWYgKHR5cGVvZiBpZ25vcmVWaXNpYmlsaXR5ID09PSAnYm9vbGVhbicgJiYgaWdub3JlVmlzaWJpbGl0eSkge1xuICAgICAgYXBwbHlTcmMoaW1nLCBpbWcuZ2V0QXR0cmlidXRlKGxhenlsb2FkQXR0ciksIGltZy5nZXRBdHRyaWJ1dGUocGxhY2Vob2xkZXJBdHRyKSlcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNFbGVtZW50VmlzaWJsZShpbWcsIGdldEN0U2Nyb2xsZXIoZWwpKVswXSkge1xuICAgICAgYXBwbHlTcmMoaW1nLCBpbWcuZ2V0QXR0cmlidXRlKGxhenlsb2FkQXR0ciksIGltZy5nZXRBdHRyaWJ1dGUocGxhY2Vob2xkZXJBdHRyKSlcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBjYWNoZSBhIHRocm90dGxlIGxhenlsb2FkIGZ1bmN0aW9uIGZvciBldmVyeSBjb250YWluZXIgZWxlbWVudFxuICogb25jZSBmb3IgZGlmZmVyZW50IHdhaXQgdGltZXMgc2VwYXJhdGUuXG4gKiAgIHRoZSBhcmNoaXRlY3R1cmUgb2YgdGhpcyBjYWNoZTpcbiAqICAgICAgY2FjaGU6IHtcbiAqICAgICAgICBlbC5pZDoge1xuICogICAgICAgICAgd2FpdDogdGhyb3R0bGVkRnVuY3Rpb24gKCkgeyAuLi4gfVxuICogICAgICAgIH1cbiAqICAgICAgfVxuICovXG5jb25zdCBjYWNoZSA9IHt9XG5sZXQgX3VpZCA9IDFcbmV4cG9ydCBmdW5jdGlvbiBnZXRUaHJvdHRsZUxhenlsb2FkICh3YWl0ID0gMTYsIGVsID0gZG9jdW1lbnQuYm9keSkge1xuICBsZXQgaWQgPSArKGVsICYmIGVsLmRhdGFzZXQudGhyb3R0bGVJZClcbiAgaWYgKGlzTmFOKGlkKSB8fCBpZCA8PSAwKSB7XG4gICAgaWQgPSBfdWlkKytcbiAgICBlbCAmJiBlbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGhyb3R0bGUtaWQnLCBpZCArICcnKVxuICB9XG5cbiAgIWNhY2hlW2lkXSAmJiAoY2FjaGVbaWRdID0ge30pXG4gIGNvbnN0IHRocm90dGxlZCA9IGNhY2hlW2lkXVt3YWl0XSB8fFxuICAgIChjYWNoZVtpZF1bd2FpdF0gPSB0aHJvdHRsZShcbiAgICAgIGZpcmVMYXp5bG9hZC5iaW5kKHRoaXMsIGVsKSxcbiAgICAgIHBhcnNlRmxvYXQod2FpdCksXG4gICAgICAvLyB0cnVlIGZvciBjYWxsTGFzdFRpbWUuXG4gICAgICAvLyB0byB0cmlnZ2VyIG9uY2UgbW9yZSB0aW1lIGFmdGVyIHRoZSBsYXN0IHRocm90dGxlZCBmdW5jdGlvbiBjYWxsZWQgd2l0aCBhIGxpdHRsZSBtb3JlIGRlbGF5LlxuICAgICAgdHJ1ZSlcbiAgICApXG4gIHJldHVybiB0aHJvdHRsZWRcbn1cbiIsIi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgY29uZmlnIGZyb20gJy4uL2NvbmZpZydcbmltcG9ydCB7IGNhbWVsaXplIH0gZnJvbSAnLi9mdW5jJ1xuY29uc3QgeyBiaW5kaW5nU3R5bGVOYW1lc0ZvclB4MlJlbSB9ID0gY29uZmlnXG5cbi8vIHdoZXRoZXIgdG8gc3VwcG9ydCB1c2luZyAwLjVweCB0byBwYWludCAxcHggd2lkdGggYm9yZGVyLlxubGV0IF9zdXBwb3J0SGFpcmxpbmVzXG5leHBvcnQgZnVuY3Rpb24gc3VwcG9ydEhhaXJsaW5lcyAoKSB7XG4gIGlmICh0eXBlb2YgX3N1cHBvcnRIYWlybGluZXMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgY29uc3QgZHByID0gd2luZG93LmRldmljZVBpeGVsUmF0aW9cbiAgICBpZiAoZHByICYmIGRwciA+PSAyICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgY29uc3QgZG9jRWxtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XG4gICAgICBjb25zdCB0ZXN0RWxtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICAgIGNvbnN0IGZha2VCb2R5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYm9keScpXG4gICAgICBjb25zdCBiZWZvcmVOb2RlID0gZG9jRWxtLmZpcnN0RWxlbWVudENoaWxkIHx8IGRvY0VsbS5maXJzdENoaWxkXG4gICAgICB0ZXN0RWxtLnN0eWxlLmJvcmRlciA9ICcwLjVweCBzb2xpZCB0cmFuc3BhcmVudCdcbiAgICAgIGZha2VCb2R5LmFwcGVuZENoaWxkKHRlc3RFbG0pXG4gICAgICBkb2NFbG0uaW5zZXJ0QmVmb3JlKGZha2VCb2R5LCBiZWZvcmVOb2RlKVxuICAgICAgX3N1cHBvcnRIYWlybGluZXMgPSB0ZXN0RWxtLm9mZnNldEhlaWdodCA9PT0gMVxuICAgICAgZG9jRWxtLnJlbW92ZUNoaWxkKGZha2VCb2R5KVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIF9zdXBwb3J0SGFpcmxpbmVzID0gZmFsc2VcbiAgICB9XG4gIH1cbiAgcmV0dXJuIF9zdXBwb3J0SGFpcmxpbmVzXG59XG5cbmxldCBzdXBwb3J0ID0gbnVsbFxuXG5leHBvcnQgZnVuY3Rpb24gc3VwcG9ydFN0aWNreSAoKSB7XG4gIGlmIChzdXBwb3J0ICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIHN1cHBvcnRcbiAgfVxuICBjb25zdCBlbGVtZW50ID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gIGNvbnN0IGVsZW1lbnRTdHlsZSA9IGVsZW1lbnQuc3R5bGVcbiAgZWxlbWVudFN0eWxlLmNzc1RleHQgPSAncG9zaXRpb246LXdlYmtpdC1zdGlja3k7cG9zaXRpb246c3RpY2t5OydcbiAgc3VwcG9ydCA9IGVsZW1lbnRTdHlsZS5wb3NpdGlvbi5pbmRleE9mKCdzdGlja3knKSAhPT0gLTFcbiAgcmV0dXJuIHN1cHBvcnRcbn1cblxuLyoqXG4gKiBnZXQgdHJhbnNmb3JtT2JqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRUcmFuc2Zvcm1PYmogKGVsbSkge1xuICBsZXQgc3R5bGVPYmogPSB7fVxuICBpZiAoIWVsbSkgeyByZXR1cm4gc3R5bGVPYmogfVxuICBjb25zdCB0cmFuc2Zvcm1TdHIgPSBlbG0uc3R5bGUud2Via2l0VHJhbnNmb3JtXG4gICAgfHwgZWxtLnN0eWxlLm1velRyYW5zZm9ybVxuICAgIHx8IGVsbS5zdHlsZS50cmFuc2Zvcm1cbiAgaWYgKHRyYW5zZm9ybVN0ciAmJiB0cmFuc2Zvcm1TdHIubWF0Y2goLyg/OiAqKD86dHJhbnNsYXRlfHJvdGF0ZXxzY2FsZSlbXihdKlxcKFteKF0rXFwpKSsvaSkpIHtcbiAgICBzdHlsZU9iaiA9IHRyYW5zZm9ybVN0ci50cmltKCkucmVwbGFjZSgvLCArL2csICcsJykuc3BsaXQoJyAnKS5yZWR1Y2UoZnVuY3Rpb24gKHByZSwgc3RyKSB7XG4gICAgICBbJ3RyYW5zbGF0ZScsICdzY2FsZScsICdyb3RhdGUnXS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIGlmIChuZXcgUmVnRXhwKG5hbWUsICdpJykudGVzdChzdHIpKSB7XG4gICAgICAgICAgcHJlW25hbWVdID0gc3RyXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICByZXR1cm4gcHJlXG4gICAgfSwge30pXG4gIH1cbiAgcmV0dXJuIHN0eWxlT2JqXG59XG5cbi8qKlxuICogdHJhbnNsYXRlIGEgdHJhbnNmb3JtIHN0cmluZyBmcm9tIGEgdHJhbnNmb3JtT2JqLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VHJhbnNmb3JtU3RyIChvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikucmVkdWNlKGZ1bmN0aW9uIChwcmUsIGtleSkge1xuICAgIHJldHVybiBwcmUgKyBvYmpba2V5XSArICcgJ1xuICB9LCAnJylcbn1cblxuLyoqXG4gKiBhZGQgdHJhbnNmb3JtIHN0eWxlIHRvIGVsZW1lbnQuXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbG1cbiAqIEBwYXJhbSB7b2JqZWN0fSBzdHlsZTogdHJhbnNmb3JtIG9iamVjdCwgZm9ybWF0IGlzIGxpa2UgdGhpczpcbiAqICAge1xuICogICAgIHRyYW5zbGF0ZTogJ3RyYW5zbGF0ZTNkKDJweCwgMnB4LCAycHgpJyxcbiAqICAgICBzY2FsZTogJ3NjYWxlKDAuMiknLFxuICogICAgIHJvdGF0ZTogJ3JvdGF0ZSgzMGRlZyknXG4gKiAgIH1cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gcmVwbGFjZTogd2hldGhlciB0byByZXBsYWNlIGFsbCB0cmFuc2Zvcm0gcHJvcGVydGllcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZFRyYW5zZm9ybSAoZWxtLCBzdHlsZSwgcmVwbGFjZSkge1xuICBpZiAoIXN0eWxlKSB7IHJldHVybiB9XG4gIGxldCBzdHlsZU9iaiA9IHt9XG4gIGlmICghcmVwbGFjZSkge1xuICAgIHN0eWxlT2JqID0gZ2V0VHJhbnNmb3JtT2JqKGVsbSlcbiAgfVxuICBmb3IgKGNvbnN0IGtleSBpbiBzdHlsZSkge1xuICAgIGNvbnN0IHZhbCA9IHN0eWxlW2tleV1cbiAgICBpZiAodmFsKSB7XG4gICAgICBzdHlsZU9ialtrZXldID0gdmFsXG4gICAgfVxuICB9XG4gIGNvbnN0IHJlc1N0ciA9IGdldFRyYW5zZm9ybVN0cihzdHlsZU9iailcbiAgZWxtLnN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IHJlc1N0clxuICBlbG0uc3R5bGUubW96VHJhbnNmb3JtID0gcmVzU3RyXG4gIGVsbS5zdHlsZS50cmFuc2Zvcm0gPSByZXNTdHJcbn1cblxuLyoqXG4gKiBjb3B5IGEgdHJhbnNmb3JtIGJlaGF2aW91ciBmcm9tIG9uZSBlbGVtZW50IHRvIGFub3RoZXIuXG4gKiBrZXkgY291bGQgYmU6ICd0cmFuc2xhdGUnIHwgJ3NjYWxlJyB8ICdyb3RhdGUnXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb3B5VHJhbnNmb3JtIChmcm9tLCB0bywga2V5KSB7XG4gIGxldCBzdHJcbiAgaWYgKCFrZXkpIHtcbiAgICBzdHIgPSBmcm9tLnN0eWxlLndlYmtpdFRyYW5zZm9ybVxuICAgICAgfHwgZnJvbS5zdHlsZS5tb3pUcmFuc2Zvcm1cbiAgICAgIHx8IGZyb20uc3R5bGUudHJhbnNmb3JtXG4gIH1cbiAgZWxzZSB7XG4gICAgY29uc3QgZnJvbU9iaiA9IGdldFRyYW5zZm9ybU9iaihmcm9tKVxuICAgIGlmICghZnJvbU9ialtrZXldKSB7IHJldHVybiB9XG4gICAgY29uc3QgdG9PYmogPSBnZXRUcmFuc2Zvcm1PYmoodG8pXG4gICAgdG9PYmpba2V5XSA9IGZyb21PYmpba2V5XVxuICAgIHN0ciA9IGdldFRyYW5zZm9ybVN0cih0b09iailcbiAgfVxuICB0by5zdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSBzdHJcbiAgdG8uc3R5bGUubW96VHJhbnNmb3JtID0gc3RyXG4gIHRvLnN0eWxlLnRyYW5zZm9ybSA9IHN0clxufVxuXG4vKipcbiAqIGdldCBjb2xvcidzIHIsIGcsIGIgdmFsdWUuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3Igc3VwcG9ydCBhbGwga2luZHMgb2YgdmFsdWUgb2YgY29sb3IuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRSZ2IgKGNvbG9yKSB7XG4gIGNvbnN0IGhheFJlZyA9IC8jKFtcXGRhLWZBLUZdezJ9KShbXFxkYS1mQS1GXXsyfSkoW1xcZGEtZkEtRl17Mn0pL1xuICBjb25zdCByZ2JSZWcgPSAvcmdiXFwoKFxcZCspLFxccyooXFxkKyksXFxzKihcXGQrKVxcKS9cbiAgY29uc3Qgc3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKVxuICBjb25zdCBib2R5ID0gZG9jdW1lbnQuYm9keVxuICBzcGFuLnN0eWxlLmNzc1RleHQgPSBgY29sb3I6ICR7Y29sb3J9OyB3aWR0aDogMHB4OyBoZWlnaHQ6IDBweDtgXG4gIGJvZHkgJiYgYm9keS5hcHBlbmRDaGlsZChzcGFuKVxuICBjb2xvciA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHNwYW4pLmNvbG9yICsgJydcbiAgYm9keSAmJiBib2R5LnJlbW92ZUNoaWxkKHNwYW4pXG5cbiAgbGV0IG1hdGNoXG4gIG1hdGNoID0gY29sb3IubWF0Y2goaGF4UmVnKVxuICBpZiAobWF0Y2gpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcjogcGFyc2VJbnQobWF0Y2hbMV0sIDE2KSxcbiAgICAgIGc6IHBhcnNlSW50KG1hdGNoWzJdLCAxNiksXG4gICAgICBiOiBwYXJzZUludChtYXRjaFszXSwgMTYpXG4gICAgfVxuICB9XG4gIG1hdGNoID0gY29sb3IubWF0Y2gocmdiUmVnKVxuICBpZiAobWF0Y2gpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcjogcGFyc2VJbnQobWF0Y2hbMV0pLFxuICAgICAgZzogcGFyc2VJbnQobWF0Y2hbMl0pLFxuICAgICAgYjogcGFyc2VJbnQobWF0Y2hbM10pXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogZ2V0IHN0eWxlIHNoZWV0IHdpdGggb3duZXIgbm9kZSdzIGlkXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgb3duZXIgbm9kZSBpZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFN0eWxlU2hlZXRCeUlkIChpZCkge1xuICBpZiAoIWlkKSB7IHJldHVybiB9XG4gIGNvbnN0IHN0eWxlU2hlZXRzID0gZG9jdW1lbnQuc3R5bGVTaGVldHNcbiAgY29uc3QgbGVuID0gc3R5bGVTaGVldHMubGVuZ3RoXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBjb25zdCBzdHlsZVNoZWV0ID0gc3R5bGVTaGVldHNbaV1cbiAgICBpZiAoc3R5bGVTaGVldC5vd25lck5vZGUuaWQgPT09IGlkKSB7XG4gICAgICByZXR1cm4gc3R5bGVTaGVldFxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRDaGlsZHJlblRvdGFsV2lkdGggKGNoaWxkcmVuKSB7XG4gIGNvbnN0IGxlbiA9IGNoaWxkcmVuLmxlbmd0aFxuICBsZXQgdG90YWwgPSAwXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICB0b3RhbCArPSBjaGlsZHJlbltpXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aFxuICB9XG4gIHJldHVybiB0b3RhbFxufVxuLyoqXG4gKiBnZXQgdG90YWwgY29udGVudCB3aWR0aCBvZiB0aGUgZWxlbWVudC5cbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsbVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmFuZ2VXaWR0aCAoZWxtKSB7XG4gIGNvbnN0IGNoaWxkcmVuID0gZWxtLmNoaWxkcmVuXG4gIGlmICghY2hpbGRyZW4pIHtcbiAgICByZXR1cm4gZWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoXG4gIH1cbiAgaWYgKCFSYW5nZSkge1xuICAgIHJldHVybiBnZXRDaGlsZHJlblRvdGFsV2lkdGgoY2hpbGRyZW4pXG4gIH1cbiAgY29uc3QgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpXG4gIGlmICghcmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKSB7XG4gICAgcmV0dXJuIGdldENoaWxkcmVuVG90YWxXaWR0aChjaGlsZHJlbilcbiAgfVxuICByYW5nZS5zZWxlY3ROb2RlQ29udGVudHMoZWxtKVxuICByZXR1cm4gcmFuZ2UuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGhcbn1cblxuLyoqXG4gKiBweDJyZW0gYW5kIGNhbWVsaXplIGtleXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHlsZU9iamVjdDJyZW0gKHN0eWxlLCByb290VmFsdWUpIHtcbiAgY29uc3Qgb2JqID0ge31cbiAgZm9yIChjb25zdCBrIGluIHN0eWxlKSB7XG4gICAgY29uc3QgY2FtSyA9IGNhbWVsaXplKGspXG4gICAgaWYgKGJpbmRpbmdTdHlsZU5hbWVzRm9yUHgyUmVtLmluZGV4T2YoY2FtSykgPiAtMSkge1xuICAgICAgb2JqW2NhbUtdID0gcHgycmVtKHN0eWxlW2tdICsgJycsIHJvb3RWYWx1ZSlcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBvYmpbY2FtS10gPSBzdHlsZVtrXVxuICAgIH1cbiAgfVxuICByZXR1cm4gb2JqXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBweDJyZW0gKHB4LCByb290VmFsdWUpIHtcbiAgcmV0dXJuIHB4LnJlcGxhY2UoLyhbKy1dP1xcZCsoPzouXFxkKik/KShbcHx3XXgpL2csIGZ1bmN0aW9uICgkMCwgJDEsICQyKSB7XG4gICAgaWYgKCQyID09PSAnd3gnKSB7IC8vICd3eCcgLT4gcHhcbiAgICAgIHJldHVybiAkMSArICdweCdcbiAgICB9XG4gICAgZWxzZSB7ICAvLyAncHgnIC0+IHJlbVxuICAgICAgY29uc3QgcHhWYWwgPSBwYXJzZUZsb2F0KCQxKVxuICAgICAgY29uc3Qgc2lnbiA9IHB4VmFsID4gMFxuICAgICAgICA/IDEgOiBweFZhbCA8IDAgP1xuICAgICAgICAgIC0xIDogMFxuICAgICAgaWYgKE1hdGguYWJzKHB4VmFsKSA8PSAxKSB7XG4gICAgICAgIHJldHVybiBzdXBwb3J0SGFpcmxpbmVzKClcbiAgICAgICAgICA/IGAke3NpZ24gKiAwLjV9cHhgXG4gICAgICAgICAgOiBgJHtzaWduICogMX1weGBcbiAgICAgIH1cbiAgICAgIHJldHVybiBweFZhbFxuICAgICAgICAvIChyb290VmFsdWUgfHwgd2luZG93LndlZXguY29uZmlnLmVudi5yZW0pXG4gICAgICAgICsgJ3JlbSdcbiAgICB9XG4gIH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW0ycHggKHJlbSwgcm9vdFZhbHVlKSB7XG4gIHJldHVybiByZW0ucmVwbGFjZSgvKFsrLV0/XFxkKyg/Oi5cXGQqKT8pcmVtL2csIGZ1bmN0aW9uICgkMCwgJDEpIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdCgkMSlcbiAgICAgICogKHJvb3RWYWx1ZSB8fCB3aW5kb3cud2VleC5jb25maWcuZW52LnJlbSlcbiAgICAgICsgJ3B4J1xuICB9KVxufVxuIiwiLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5leHBvcnQgKiBmcm9tICcuL2Z1bmMnXG5leHBvcnQgKiBmcm9tICcuL2V2ZW50J1xuZXhwb3J0ICogZnJvbSAnLi9jb21wb25lbnQnXG5leHBvcnQgKiBmcm9tICcuL2xhenlsb2FkJ1xuZXhwb3J0ICogZnJvbSAnLi9zdHlsZSdcbmV4cG9ydCAqIGZyb20gJy4vdHlwZSdcbiIsIi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0ICcuLi9saWIvZW52ZCdcblxuaW1wb3J0IHsgaW5pdCBhcyBpbml0Vmlld3BvcnQgfSBmcm9tICcuL3ZpZXdwb3J0J1xuaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSAnLi4vdXRpbHMnXG5cbi8qKlxuICogZ2V0IFdYRW52aXJvbm1lbnQgaW5mby5cbiAqIEBwYXJhbSAge29iamVjdH0gdmlld3BvcnRJbmZvOiBpbmZvIGFib3V0IHZpZXdwb3J0LlxuICogQHBhcmFtICB7b2JqZWN0fSBlbnZJbmZvOiBpbmZvIHBhcnNlZCBmcm9tIGxpYi5lbnYuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbml0RW52ICh2aWV3cG9ydEluZm8sIGVudkluZm8pIHtcbiAgY29uc3QgYnJvd3Nlck5hbWUgPSBlbnZJbmZvLmJyb3dzZXIgPyBlbnZJbmZvLmJyb3dzZXIubmFtZSA6IG5hdmlnYXRvci5hcHBOYW1lXG4gIGNvbnN0IGJyb3dzZXJWZXJzaW9uID0gZW52SW5mby5icm93c2VyID8gZW52SW5mby5icm93c2VyLnZlcnNpb24udmFsIDogbnVsbFxuICBsZXQgb3NOYW1lID0gZW52SW5mby5vcy5uYW1lXG4gIGlmIChvc05hbWUubWF0Y2goLyhpUGhvbmV8aVBhZHxpUG9kKS9pKSkge1xuICAgIG9zTmFtZSA9ICdpT1MnXG4gIH1cbiAgZWxzZSBpZiAob3NOYW1lLm1hdGNoKC9BbmRyb2lkL2kpKSB7XG4gICAgb3NOYW1lID0gJ2FuZHJvaWQnXG4gIH1cbiAgY29uc3Qgb3NWZXJzaW9uID0gZW52SW5mby5vcy52ZXJzaW9uLnZhbFxuICBjb25zdCBlbnYgPSB7XG4gICAgcGxhdGZvcm06ICdXZWInLFxuICAgIHdlZXhWZXJzaW9uOiAncHJvY2Vzcy5lbnYuV0VFWF9WRVJTSU9OJyxcbiAgICB1c2VyQWdlbnQ6IG5hdmlnYXRvci51c2VyQWdlbnQsXG4gICAgYXBwTmFtZTogYnJvd3Nlck5hbWUsXG4gICAgYXBwVmVyc2lvbjogYnJvd3NlclZlcnNpb24sXG4gICAgb3NOYW1lLFxuICAgIG9zVmVyc2lvbixcbiAgICBkZXZpY2VNb2RlbDogZW52SW5mby5vcy5uYW1lIHx8IG51bGxcbiAgfVxuICAvKipcbiAgICogdmlld3BvcnRJbmZvOiBzY2FsZSwgZGV2aWNlV2lkdGgsIGRldmljZUhlaWdodC4gZHByXG4gICAqL1xuICByZXR1cm4gZXh0ZW5kKHZpZXdwb3J0SW5mbywgZW52KVxufVxuXG4vLyBjb25zdCB2aWV3cG9ydEluZm8gPSBpbml0Vmlld3BvcnQoKVxuXG4vLyA3NTAgYnkgZGVmYXVsdCBjdXJyZW50bHlcbi8vIGNvbnN0IHNjYWxlID0gdmlld3BvcnRJbmZvLnNjYWxlXG5cbi8vIGNvbnN0IHVuaXRzID0ge1xuLy8gICBSRU06IDEyICogc2NhbGUsXG4vLyAgIFZXOiB2aWV3cG9ydEluZm8uZGV2aWNlV2lkdGggLyAxMDAsXG4vLyAgIFZIOiB2aWV3cG9ydEluZm8uZGV2aWNlSGVpZ2h0IC8gMTAwLFxuLy8gICBWTUlOOiBNYXRoLm1pbih2aWV3cG9ydEluZm8uZGV2aWNlV2lkdGgsIHZpZXdwb3J0SW5mby5kZXZpY2VIZWlnaHQpIC8gMTAwLFxuLy8gICBWTUFYOiBNYXRoLm1heCh2aWV3cG9ydEluZm8uZGV2aWNlV2lkdGgsIHZpZXdwb3J0SW5mby5kZXZpY2VIZWlnaHQpIC8gMTAwLFxuLy8gICBDTTogOTYgLyAyLjU0ICogc2NhbGUsXG4vLyAgIE1NOiA5NiAvIDI1LjQgKiBzY2FsZSxcbi8vICAgUTogOTYgLyAyNS40IC8gNCAqIHNjYWxlLFxuLy8gICBJTjogOTYgKiBzY2FsZSxcbi8vICAgUFQ6IDk2IC8gNzIgKiBzY2FsZSxcbi8vICAgUEM6IDk2IC8gNiAqIHNjYWxlLFxuLy8gICBQWDogc2NhbGVcbi8vIH1cblxuLy8gT2JqZWN0LmZyZWV6ZSh1bml0cylcbi8vIE9iamVjdC5mcmVlemUoZW52KVxuXG4vLyB3aW5kb3cuQ1NTX1VOSVQgPSB1bml0c1xud2luZG93LldYRW52aXJvbm1lbnQgPSBpbml0RW52KGluaXRWaWV3cG9ydCgpLCB3aW5kb3cubGliLmVudilcbiIsIi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyogZ2xvYmFsIFZ1ZSAqL1xuXG5pbXBvcnQgJy4vd3gtZW52J1xuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAnLi4vdXRpbHMnXG5cbmNvbnN0IHdlZXhNb2R1bGVzID0ge31cbmNvbnN0IF9yb290cyA9IFtdXG5cbmNvbnN0IHdlZXggPSB7XG4gIF9fdnVlX186IG51bGwsXG4gIHV0aWxzLFxuICAvLyB1bml0czogd2luZG93LkNTU19VTklULFxuICBjb25maWc6IHtcbiAgICBlbnY6IHdpbmRvdy5XWEVudmlyb25tZW50LFxuICAgIGJ1bmRsZVVybDogbG9jYXRpb24uaHJlZlxuICB9LFxuXG4gIF9jb21wb25lbnRzOiB7fSxcbiAgX21vZHVsZXM6IHdlZXhNb2R1bGVzLFxuXG4gIF9tZXRhOiB7XG4gICAgbW91bnRlZDoge30sXG4gICAgdXBkYXRlZDoge30sXG4gICAgZGVzdHJveWVkOiB7fSxcbiAgICByZXF1aXJlZE1vZHVsZXM6IHt9LFxuICAgIGFwaUNhbGxlZDoge30sXG4gICAgcGVyZjoge31cbiAgfSxcblxuICBkb2N1bWVudDoge1xuICAgIGJvZHk6IHt9XG4gIH0sXG5cbiAgcmVxdWlyZU1vZHVsZSAobW9kdWxlTmFtZSkge1xuICAgIGNvbnN0IG1ldGFNb2QgPSB3ZWV4Ll9tZXRhLnJlcXVpcmVkTW9kdWxlc1xuICAgIGlmICghbWV0YU1vZFttb2R1bGVOYW1lXSkge1xuICAgICAgbWV0YU1vZFttb2R1bGVOYW1lXSA9IDBcbiAgICB9XG4gICAgbWV0YU1vZFttb2R1bGVOYW1lXSsrXG4gICAgcmV0dXJuIHdlZXhNb2R1bGVzW21vZHVsZU5hbWVdXG4gIH0sXG5cbiAgcmVnaXN0ZXJNb2R1bGUgKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5yZWdpc3RlckFwaU1vZHVsZSguLi5hcmdzKVxuICB9LFxuXG4gIHN1cHBvcnQgKGZlYXR1cmUgPSAnJykge1xuICAgIGNvbnN0IG1hdGNoID0gKGZlYXR1cmUgKyAnJykubWF0Y2goL0AoY29tcG9uZW50fG1vZHVsZSlcXC8oXFx3KykoLlxcdyspPy8pXG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICBjb25zdCB0eXBlID0gbWF0Y2hbMV1cbiAgICAgIGNvbnN0IG1vZCA9IG1hdGNoWzJdXG4gICAgICBsZXQgbWV0aG9kID0gbWF0Y2hbM11cbiAgICAgIG1ldGhvZCA9IG1ldGhvZCAmJiBtZXRob2QucmVwbGFjZSgvXlxcLi8sICcnKVxuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgJ2NvbXBvbmVudCc6XG4gICAgICAgICAgcmV0dXJuIHR5cGVvZiB0aGlzLl9jb21wb25lbnRzW21vZF0gIT09ICd1bmRlZmluZWQnXG4gICAgICAgIGNhc2UgJ21vZHVsZSc6XG4gICAgICAgICAgY29uc3QgbW9kdWxlID0gd2VleE1vZHVsZXNbbW9kXVxuICAgICAgICAgIHJldHVybiBtb2R1bGUgJiYgbWV0aG9kID8gISFtb2R1bGVbbWV0aG9kXSA6ICEhbW9kdWxlXG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgY29uc29sZS53YXJuKGBbdnVlLXJlbmRlcl0gaW52YWxpZCBhcmd1bWVudCBmb3Igd2VleC5zdXBwb3J0OiAke2ZlYXR1cmV9YClcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIG5ldyB2dWUgaW5zdGFuY2UgaW4gdGhpcyB3ZWV4IGluc3RhbmNlLiBQdXQgaXRzIHJvb3QgZWxlbWVudCBpbnRvIHdlZXguZG9jdW1lbnQuYm9keS5jaGlsZHJlbiwgc29cbiAgICogdGhhdCB1c2VyIGNhbiB1c2Ugd2VleC5kb2N1bWVudC5ib2R5IHRvIHdhbGsgdGhyb3VnaCBhbGwgZG9tIHN0cnVjdHVyZXMgaW4gYWxsIHZ1ZSBpbnN0YW5jZXMgaW4gdGhlIHBhZ2UuXG4gICAqL1xuICByZWdpc3RlclZ1ZUluc3RhbmNlIChpbnN0YW5jZSkge1xuICAgIGlmICghaW5zdGFuY2UgaW5zdGFuY2VvZiBWdWUpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBbdnVlLXJlbmRlcl0gcmVnaXN0ZXJWdWVJbnN0YW5jZTogaW52YWxpZCBpbnN0YW5jZSwgbm90IGEgdnVlIGluc3RhbmNlLmApXG4gICAgICB9XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgY29uc3Qgcm9vdCA9IGluc3RhbmNlLiRyb290XG4gICAgaWYgKCFyb290IHx8ICFyb290LiRlbCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYFt2dWUtcmVuZGVyXSByZWdpc3RlclZ1ZUluc3RhbmNlOiBpbnN0YW5jZSBoYXMgbm8gcm9vdC5gKVxuICAgICAgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHRoaXMuZG9jdW1lbnQuYm9keS5jaGlsZHJlbi5wdXNoKHJvb3QuJGVsKVxuICB9LFxuXG4gIC8vIEBkZXByZWNhdGVkXG4gIHJlcXVpcmUgKC4uLmFyZ3MpIHtcbiAgICBjb25zb2xlLmxvZyhgW1Z1ZSBSZW5kZXJdIFwid2VleC5yZXF1aXJlXCIgaXMgZGVwcmVjYXRlZCwgcGxlYXNlIHVzZSBcIndlZXgucmVxdWlyZU1vZHVsZVwiIGluc3RlYWQuYClcbiAgICByZXR1cm4gdGhpcy5yZXF1aXJlTW9kdWxlKC4uLmFyZ3MpXG4gIH0sXG5cbiAgLy8gQGRlcHJlY2F0ZWRcbiAgLy8gVE9ETzogcmVuYW1lIHRvIHJlZ2lzdGVyTW9kdWxlXG4gIHJlZ2lzdGVyQXBpTW9kdWxlIChuYW1lLCBtb2R1bGUsIG1ldGEpIHtcbiAgICBpZiAoIXdlZXhNb2R1bGVzW25hbWVdKSB7XG4gICAgICB3ZWV4TW9kdWxlc1tuYW1lXSA9IHt9XG4gICAgfVxuICAgIGlmICghIW1ldGEgJiYgbWV0YS5yZWdpc3RlclR5cGUgPT09ICdhc3NpZ25tZW50Jykge1xuICAgICAgd2VleE1vZHVsZXNbbmFtZV0gPSBtb2R1bGVcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiBtb2R1bGUpIHtcbiAgICAgICAgaWYgKG1vZHVsZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgd2VleE1vZHVsZXNbbmFtZV1ba2V5XSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhbGxlZCA9IHdlZXguX21ldGEuYXBpQ2FsbGVkXG4gICAgICAgICAgICBpZiAoIWNhbGxlZFtuYW1lXSkge1xuICAgICAgICAgICAgICBjYWxsZWRbbmFtZV0gPSB7fVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgY2FsbGVkTW9kID0gY2FsbGVkW25hbWVdXG4gICAgICAgICAgICBpZiAoIWNhbGxlZE1vZFtrZXldKSB7XG4gICAgICAgICAgICAgIGNhbGxlZE1vZFtrZXldID0gMFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FsbGVkTW9kW2tleV0rK1xuICAgICAgICAgICAgcmV0dXJuIG1vZHVsZVtrZXldLmFwcGx5KHdlZXgsIGFyZ3VtZW50cylcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgcmVnaXN0ZXJDb21wb25lbnQgKG5hbWUsIGNvbXBvbmVudCkge1xuICAgIGlmICghdGhpcy5fX3Z1ZV9fKSB7XG4gICAgICByZXR1cm4gY29uc29sZS5sb2coJ1tWdWUgUmVuZGVyXSBWdWUgaXMgbm90IGZvdW5kLiBQbGVhc2UgaW1wb3J0IFZ1ZS5qcyBiZWZvcmUgcmVnaXN0ZXIgYSBjb21wb25lbnQuJylcbiAgICB9XG4gICAgdGhpcy5fY29tcG9uZW50c1tuYW1lXSA9IDBcbiAgICBpZiAoY29tcG9uZW50Ll9jc3MpIHtcbiAgICAgIGNvbnN0IGNzcyA9IGNvbXBvbmVudC5fY3NzLnJlcGxhY2UoL1xcYlsrLV0/W1xcZC5dK3JlbTs/XFxiL2csIGZ1bmN0aW9uIChtKSB7XG4gICAgICAgIHJldHVybiBwYXJzZUZsb2F0KG0pICogNzUgKiB3ZWV4LmNvbmZpZy5lbnYuc2NhbGUgKyAncHgnXG4gICAgICB9KVxuICAgICAgdXRpbHMuYXBwZW5kQ3NzKGNzcywgYHdlZXgtY21wLSR7bmFtZX1gKVxuICAgICAgZGVsZXRlIGNvbXBvbmVudC5fY3NzXG4gICAgfVxuICAgIHRoaXMuX192dWVfXy5jb21wb25lbnQobmFtZSwgY29tcG9uZW50KVxuICB9LFxuXG4gIC8vIEBkZXByZWNhdGVkXG4gIGdldFJvb3QgKCkge30sXG5cbiAgLy8gQGRlcHJlY2F0ZWRcbiAgc2VuZGVyOiB7XG4gICAgcGVyZm9ybUNhbGxiYWNrIChjYWxsYmFjaywgZGF0YSwga2VlcEFsaXZlKSB7XG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhkYXRhKVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gIH0sXG5cbiAgLy8gQGRlcHJlY2F0ZWRcbiAgaW5zdGFsbCAobW9kdWxlKSB7XG4gICAgbW9kdWxlLmluaXQodGhpcylcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkod2VleC5kb2N1bWVudC5ib2R5LCAnY2hpbGRyZW4nLCB7XG4gIGdldCAoKSB7IHJldHVybiBfcm9vdHMgfVxufSlcblxuOyBbJ29uJywgJ29uY2UnLCAnb2ZmJywgJ2VtaXQnXS5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgd2VleFttZXRob2RdID0gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICBpZiAoIXRoaXMuX3Z1ZSkge1xuICAgICAgdGhpcy5fdnVlID0gbmV3IHRoaXMuX192dWVfXygpXG4gICAgfVxuICAgIHJldHVybiB0aGlzLl92dWVbYCQke21ldGhvZH1gXSguLi5hcmdzKVxuICB9XG59KVxuXG5leHBvcnQgZGVmYXVsdCB3ZWV4XG4iLCIvKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7XG4gIC8vIGNhbWVsaXplS2V5cyxcbiAgLy8gaHlwaGVuYXRlS2V5cyxcbiAgZXh0ZW5kLFxuICBleHRlbmRUcnV0aHlcbiAgLy8gdHJpbUNvbW1lbnQsXG4gIC8vIG5vcm1hbGl6ZVN0eWxlLFxuICAvLyBhdXRvUHJlZml4LFxuICAvLyBpc0FycmF5LFxuICAvLyBnZXRQYXJlbnRTY3JvbGxlcixcbiAgLy8gc3VwcG9ydFN0aWNreSxcbiAgLy8gYXBwZW5kQ3NzXG59IGZyb20gJy4uL3V0aWxzJ1xuXG5mdW5jdGlvbiBnZXRJbmxpbmVTdHlsZSAodm5vZGUpIHtcbiAgY29uc3QgZGF0YSA9IHZub2RlLmRhdGEgfHwge31cbiAgcmV0dXJuIGV4dGVuZFRydXRoeSh7fSwgZGF0YS5zdGF0aWNTdHlsZSwgZGF0YS5zdHlsZSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RDb21wb25lbnRTdHlsZSAoY29udGV4dCkge1xuICByZXR1cm4gZ2V0Q29tcG9uZW50SW5saW5lU3R5bGUoY29udGV4dClcbiAgLy8gcmV0dXJuIGdldENvbXBvbmVudFN0eWxlKGNvbnRleHQsIHRydWUpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb21wb25lbnRJbmxpbmVTdHlsZSAoY29udGV4dCkge1xuICBsZXQgdm5vZGUgPSBjb250ZXh0ICYmIGNvbnRleHQuJHZub2RlXG4gIGlmICghdm5vZGUpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICAgIHJldHVybiBjb25zb2xlLmVycm9yKCdbdnVlLXJlbmRlcl0gZ2V0Q29tcG9uZW50U3R5bGUgZmFpbGVkOiBubyAkdm5vZGUgaW4gY29udGV4dC4nKVxuICAgIH1cbiAgICByZXR1cm4ge31cbiAgfVxuICBjb25zdCBzdHlsZSA9IHt9XG4gIHdoaWxlICh2bm9kZSkge1xuICAgIGV4dGVuZChzdHlsZSwgZ2V0SW5saW5lU3R5bGUodm5vZGUpKVxuICAgIHZub2RlID0gdm5vZGUucGFyZW50XG4gIH1cbiAgcmV0dXJuIHN0eWxlXG59XG5cbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICB0cmFuc2Zvcm0gKHN0eWxlKSB7XG4gICAgY29uc3QgbGluZXMgPSBzdHlsZS5saW5lc1xuICAgIGlmIChsaW5lcyA+IDApIHtcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHN0eWxlLCB7XG4gICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgICAgdGV4dE92ZXJmbG93OiAnZWxsaXBzaXMnLFxuICAgICAgICBXZWJraXRMaW5lQ2xhbXA6IGxpbmVzXG4gICAgICB9KVxuICAgIH1cbiAgICByZXR1cm4gc3R5bGVcbiAgfVxufVxuIiwiY29uc3QgdGFnTWFwID0ge1xuICB0ZXh0OiByZXF1aXJlKCcuL3RleHQnKVxufVxuXG5leHBvcnRzLmdldFRyYW5zZm9ybWVyID0gZnVuY3Rpb24gKHRhZykge1xuICByZXR1cm4gdGFnTWFwW3RhZ11cbn1cbiIsImNvbnN0IHsgZ2V0Q29tcGlsZXIgfSA9IHJlcXVpcmUoJy4vY29tcGlsZXInKVxuY29uc3QgeyBnZXRUcmFuc2Zvcm1lciB9ID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1lcicpXG5cbmV4cG9ydHMuZ2V0Q29tcGlsZXIgPSBnZXRDb21waWxlclxuZXhwb3J0cy5nZXRUcmFuc2Zvcm1lciA9IGdldFRyYW5zZm9ybWVyXG4iLCIvKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IGdldFRyYW5zZm9ybWVyIH0gZnJvbSAnd3h2LXRyYW5zZm9ybWVyJ1xuaW1wb3J0IHtcbiAgaXNBcnJheSxcbiAgaXNEZWYsXG4gIGlzUHJpbWl0aXZlLFxuICBkaXNwYXRjaE5hdGl2ZUV2ZW50XG59IGZyb20gJy4uL3V0aWxzJ1xuaW1wb3J0IGNvbmZpZyBmcm9tICcuLi9jb25maWcnXG5cbmNvbnN0IHtcbiAgd2VleEJ1aWx0SW5Db21wb25lbnRzXG59ID0gY29uZmlnXG5cbmNvbnN0IGFwcGVhckV2ZW50c01hcCA9IHtcbiAgYXBwZWFyOiAnYXBwZWFyJyxcbiAgZGlzYXBwZWFyOiAnZGlzYXBwZWFyJyxcbiAgb2Zmc2V0QXBwZWFyOiAnb2Zmc2V0LWFwcGVhcicsXG4gIG9mZnNldERpc2FwcGVhcjogJ29mZnNldC1kaXNhcHBlYXInXG59XG5cbi8qKlxuICogcmVtb3ZlIHRleHQgbm9kZXMgaW4gdGhlIG5vZGVzIGFycmF5LlxuICogQHBhcmFtICB7QXJyYXl9IG5vZGVzXG4gKiBAcmV0dXJuIHtBcnJheX0gbm9kZXMgd2l0aG91dCB0ZXh0IG5vZGVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJpbVRleHRWTm9kZXMgKHZub2Rlcykge1xuICBpZiAoaXNBcnJheSh2bm9kZXMpKSB7XG4gICAgcmV0dXJuIHZub2Rlcy5maWx0ZXIodm5vZGUgPT4gISF2bm9kZS50YWcpXG4gIH1cbiAgcmV0dXJuIHZub2Rlc1xufVxuXG4vKipcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBtZXRob2QgdG8gdHJhbnNmb3JtIGFyZ3MgcGFzc2VkIHRvIGNyZWF0ZUVsZW1lbnRcbiAqIGZvciByZW5kZXIgZnVuY3Rpb24uXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbi8vIHNob3VsZCBzaGFyZSB3aXRoIHByZWNvbXBpbGVyLlxuY29uc3QgbWV0YU1hcCA9IHtcbiAgZmlndXJlOiBbJ2ltZycsICdpbWFnZScsICdmaWd1cmUnXSxcbiAgcDogWyd0ZXh0JywgJ3AnXSxcbiAgZGl2OiBbJ2NvbnRhaW5lcicsICdkaXYnXSxcbiAgc2VjdGlvbjogWydjZWxsJ11cbn1cblxuY29uc3QgY2hlY2tNYXAgPSBPYmplY3Qua2V5cyhtZXRhTWFwKS5yZWR1Y2UoZnVuY3Rpb24gKHByZSwgdGFyZ2V0VGFnKSB7XG4gIGNvbnN0IHRhZ0FyciA9IG1ldGFNYXBbdGFyZ2V0VGFnXVxuICB0YWdBcnIuZm9yRWFjaChmdW5jdGlvbiAoZnJvbVRhZykge1xuICAgIHByZVtmcm9tVGFnXSA9IHRhcmdldFRhZ1xuICB9KVxuICByZXR1cm4gcHJlXG59LCB7fSlcblxuY29uc3QgX3N0ZFRhZ01hcCA9IHtcbiAgcDogJ3RleHQnLFxuICBmaWd1cmU6ICdpbWFnZScsXG4gIHNlY3Rpb246ICdjZWxsJ1xufVxuZnVuY3Rpb24gZ2V0U3RkVGFnICh0YWcpIHtcbiAgY29uc3Qgc3RkVGFnID0gX3N0ZFRhZ01hcFt0YWddXG4gIHJldHVybiBzdGRUYWcgfHwgdGFnXG59XG5cbmNvbnN0IHByZWNvbXBpbGVkQ2xhc3NNYXAgPSB7XG4gIGRpdjoge1xuICAgICd3ZWV4LWN0JzogdHJ1ZSxcbiAgICAnd2VleC1kaXYnOiB0cnVlXG4gIH0sXG4gIGltYWdlOiB7XG4gICAgJ3dlZXgtZWwnOiB0cnVlLFxuICAgICd3ZWV4LWltYWdlJzogdHJ1ZVxuICB9LFxuICB0ZXh0OiB7XG4gICAgJ3dlZXgtZWwnOiB0cnVlLFxuICAgICd3ZWV4LXRleHQnOiB0cnVlXG4gIH0sXG4gIGNlbGw6IHtcbiAgICAnd2VleC1jdCc6IHRydWUsXG4gICAgJ3dlZXgtY2VsbCc6IHRydWVcbiAgfSxcbiAgYToge1xuICAgICd3ZWV4LWN0JzogdHJ1ZSxcbiAgICAnd2VleC1hJzogdHJ1ZVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzUHJlY29tcGlsZWQgKHRhZykge1xuICByZXR1cm4gY29uZmlnLndlZXhCdWlsdEluQ29tcG9uZW50cy5pbmRleE9mKHRhZykgPiAtMVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtUmVuZGVyIChjdHgsIGgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChcbiAgICB0YWcsXG4gICAgZGF0YSxcbiAgICBjaGlsZHJlbixcbiAgICBub3JtYWxpemF0aW9uVHlwZSxcbiAgICBhbHdheXNOb3JtYWxpemVcbiAgKSB7XG4gICAgaWYgKGlzQXJyYXkoZGF0YSkgfHwgaXNQcmltaXRpdmUoZGF0YSkpIHtcbiAgICAgIG5vcm1hbGl6YXRpb25UeXBlID0gY2hpbGRyZW5cbiAgICAgIGNoaWxkcmVuID0gZGF0YVxuICAgICAgZGF0YSA9IHt9XG4gICAgfVxuICAgIGlmICghaXNEZWYoZGF0YSkpIHtcbiAgICAgIGRhdGEgPSB7fVxuICAgIH1cbiAgICBpZiAoaXNEZWYoZGF0YS5pcykpIHtcbiAgICAgIHRhZyA9IGRhdGEuaXNcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB0YWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICBkYXRhID0gdHJhbnNmb3JtRGF0YSh0aGlzLCBkYXRhLCB0YWcpXG4gICAgICB0YWcgPSB0cmFuc2Zvcm1UYWcodGhpcywgdGFnKVxuICAgIH1cbiAgICBlbHNlIHsgIC8vIGRpcmVjdCBjb21wb25lbnQgb3B0aW9ucyAvIGNvbnN0cnVjdG9yXG4gICAgICBkYXRhID0gdHJhbnNmb3JtRGF0YSh0aGlzLCBkYXRhLCB1bmRlZmluZWQpXG4gICAgfVxuICAgIHJldHVybiBoLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgdGFnLFxuICAgICAgZGF0YSxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgbm9ybWFsaXphdGlvblR5cGUsXG4gICAgICBhbHdheXNOb3JtYWxpemVcbiAgICApXG4gIH0uYmluZChjdHgpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1UYWcgKGN0eCwgdGFnKSB7XG4gIGNvbnN0IGVsZW1lbnRUYWcgPSBjaGVja01hcFt0YWddXG4gIHJldHVybiBlbGVtZW50VGFnIHx8IHRhZ1xufVxuXG4vKipcbiAqIFRlbGwgd2hldGhlciBhIGVsZW1lbnQgaXMgY29udGFpbmVkIGluIGEgZWxlbWVudCB3aG8gaGFzXG4gKiBhIGF0dHJpYnV0ZSAnYnViYmxlJz10cnVlLlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxcbiAqL1xuLy8gZnVuY3Rpb24gaW5CdWJibGUgKGVsKSB7XG4vLyAgIGlmICh0eXBlb2YgZWwuX2luQnViYmxlID09PSAnYm9vbGVhbicpIHtcbi8vICAgICByZXR1cm4gZWwuX2luQnViYmxlXG4vLyAgIH1cbi8vICAgY29uc3QgcGFyZW50cyA9IFtdXG4vLyAgIGxldCBwYXJlbnQgPSBlbC5wYXJlbnRFbGVtZW50XG4vLyAgIGxldCBpbkJ1YmJsZVxuLy8gICB3aGlsZSAocGFyZW50ICYmIHBhcmVudCAhPT0gZG9jdW1lbnQuYm9keSkge1xuLy8gICAgIGlmICh0eXBlb2YgcGFyZW50Ll9pbkJ1YmJsZSA9PT0gJ2Jvb2xlYW4nKSB7XG4vLyAgICAgICBpbkJ1YmJsZSA9IHBhcmVudC5faW5CdWJibGVcbi8vICAgICAgIGJyZWFrXG4vLyAgICAgfVxuLy8gICAgIGNvbnN0IGF0dHIgPSBwYXJlbnQuZ2V0QXR0cmlidXRlKCdidWJibGUnKVxuLy8gICAgIGlmIChhdHRyICE9PSAnJykge1xuLy8gICAgICAgaW5CdWJibGUgPSBhdHRyID09PSB0cnVlIHx8IGF0dHIgPT09ICd0cnVlJ1xuLy8gICAgICAgYnJlYWtcbi8vICAgICB9XG4vLyAgICAgcGFyZW50cy5wdXNoKHBhcmVudClcbi8vICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50RWxlbWVudFxuLy8gICB9XG4vLyAgIGVsLl9pbkJ1YmJsZSA9IGluQnViYmxlXG4vLyAgIGZvciAobGV0IGkgPSAwLCBsID0gcGFyZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbi8vICAgICBwYXJlbnRzW2ldLl9pbkJ1YmJsZSA9IGluQnViYmxlXG4vLyAgIH1cbi8vICAgcmV0dXJuIGluQnViYmxlXG4vLyB9XG5cbmZ1bmN0aW9uIGJpbmRFdmVudHMgKGN0eCwgZXZ0cywgYXR0cnMsIHRhZywgYXBwZWFyQXR0YWNoZWQpIHtcbiAgZm9yIChjb25zdCBrZXkgaW4gZXZ0cykge1xuICAgIGNvbnN0IGFwcGVhckV2dE5hbWUgPSBhcHBlYXJFdmVudHNNYXBba2V5XVxuICAgIGlmIChhcHBlYXJFdnROYW1lKSB7XG4gICAgICBhdHRyc1tgZGF0YS1ldnQtJHthcHBlYXJFdnROYW1lfWBdID0gJydcbiAgICAgIGlmICghYXBwZWFyQXR0YWNoZWQudmFsdWUpIHtcbiAgICAgICAgYXBwZWFyQXR0YWNoZWQudmFsdWUgPSB0cnVlXG4gICAgICAgIGF0dHJzWyd3ZWV4LWFwcGVhciddID0gJydcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBhdHRyc1tgZGF0YS1ldnQtJHtrZXl9YF0gPSAnJ1xuICAgICAgaWYgKGtleSAhPT0gJ2NsaWNrJykge1xuICAgICAgICAvLyBzaG91bGQgc3RvcCBwcm9wYWdhdGlvbiBieSBkZWZhdWx0LlxuICAgICAgICAvLyBUT0RPOiBzaG91bGQgdGVzdCBpbkJ1YmJsZSBmaXJzdC5cbiAgICAgICAgY29uc3QgaGFuZGxlciA9IGV2dHNba2V5XVxuICAgICAgICBpZiAoaXNBcnJheShldnRzW2tleV0pKSB7XG4gICAgICAgICAgaGFuZGxlci51bnNoaWZ0KGN0eC4kc3RvcFByb3BhZ2F0aW9uKVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGV2dHNba2V5XSA9IFtjdHguJHN0b3BQcm9wYWdhdGlvbiwgaGFuZGxlcl1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoZXZ0cy5jbGljaykge1xuICAgIGV2dHMud2VleCR0YXAgPSBldnRzLmNsaWNrXG4gICAgZXZ0cy5jbGljayA9IGN0eC4kc3RvcE91dGVyQVxuICB9XG4gIGlmIChldnRzLnNjcm9sbCkge1xuICAgIGV2dHMud2VleCRzY3JvbGwgPSBldnRzLnNjcm9sbFxuICAgIGRlbGV0ZSBldnRzLnNjcm9sbFxuICB9XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybU9uIChjdHgsIGRhdGEsIHRhZykge1xuICBsZXQgeyBvbiwgbmF0aXZlT24gfSA9IGRhdGFcbiAgaWYgKHdlZXhCdWlsdEluQ29tcG9uZW50cy5pbmRleE9mKHRhZykgPiAtMSkge1xuICAgIC8qKlxuICAgICAqIGZvciBkaXYsIGltYWdlLCB0ZXh0LCBjZWxsLCBhLCAuLi5cbiAgICAgKiB1c2VyIHNob3VsZCBiaW5kIGFsbCBldmVudHMgd2l0aG91dCAubmF0aXZlLlxuICAgICAqL1xuICAgIG5hdGl2ZU9uID0gbnVsbFxuICAgIGRlbGV0ZSBkYXRhLm5hdGl2ZU9uXG4gIH1cbiAgaWYgKGlzRGVmKHdlZXguX2NvbXBvbmVudHNbdGFnXSkpIHtcbiAgICAvKipcbiAgICAgKiBmb3Igc2xpZGVyLCBsaXN0LCAuLi5cbiAgICAgKiB1c2VyIHNob3VsZCBiaW5kIGV2ZW50cyB3aXRob3V0IC5uYXRpdmUuXG4gICAgICogaW4gb3VyIGV2ZW50cyBoYW5kbGluZywgYWxsIGV2ZW50cyBzaG91bGQgdHJhbnNmZXIgdG9cbiAgICAgKiAubmF0aXZlIGJpbmRpbmcuXG4gICAgICovXG4gICAgZGVsZXRlIGRhdGEubmF0aXZlT25cbiAgICBuYXRpdmVPbiA9IG51bGxcbiAgICBpZiAob24pIHtcbiAgICAgIG5hdGl2ZU9uID0gZGF0YS5uYXRpdmVPbiA9IG9uXG4gICAgfVxuICAgIG9uID0gbnVsbFxuICAgIGRlbGV0ZSBkYXRhLm9uXG4gIH1cblxuICBsZXQgYXR0cnMgPSBkYXRhLmF0dHJzXG4gIGlmICghYXR0cnMpIHtcbiAgICBhdHRycyA9IGRhdGEuYXR0cnMgPSB7fVxuICB9XG5cbiAgY29uc3QgYXBwZWFyQXR0YWNoZWQgPSB7XG4gICAgdmFsdWU6IGZhbHNlXG4gIH1cbiAgaWYgKG9uKSB7XG4gICAgYmluZEV2ZW50cyhjdHgsIG9uLCBhdHRycywgdGFnLCBhcHBlYXJBdHRhY2hlZClcbiAgfVxuICBpZiAobmF0aXZlT24pIHtcbiAgICBiaW5kRXZlbnRzKGN0eCwgbmF0aXZlT24sIGF0dHJzLCB0YWcsIGFwcGVhckF0dGFjaGVkKVxuICB9XG5cbiAgLyoqXG4gICAqIGJpbmRpbmcgYSB3ZWV4JHRhcCB0byA8YT4gZWxlbWVudCB0byBzdG9wIHByb3BhZ2F0aW9uIGlmIHRoZXJlXG4gICAqIGlzIG5vIGJ1YmJsZXM9dHJ1ZSBmbGFnIHNob3dpbmcgb24gcGFyZW50cy5cbiAgICovXG4gIGlmICh0YWcgPT09ICdhJykge1xuICAgIGlmICghb24pIHtcbiAgICAgIG9uID0gZGF0YS5vbiA9IHt9XG4gICAgfVxuICAgIC8vIGlmICghY2hlY2tCdWJibGUoZWwpKSB7XG4gICAgbGV0IGV2dCA9IG9uWyd3ZWV4JHRhcCddXG4gICAgaWYgKCFldnQpIHtcbiAgICAgIG9uWyd3ZWV4JHRhcCddID0gY3R4LiRzdG9wUHJvcGFnYXRpb25cbiAgICB9XG4gICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShldnQpKSB7XG4gICAgICBldnQudW5zaGlmdChjdHguJHN0b3BQcm9wYWdhdGlvbilcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBldnQgPSBbY3R4LiRzdG9wUHJvcGFnYXRpb24sIGV2dF1cbiAgICB9XG4gICAgLy8gfVxuICB9XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybUNsYXNzIChkYXRhLCB0YWcpIHtcbiAgbGV0IHsgY2xhc3M6IGNsYXNzRGF0YSB9ID0gZGF0YVxuICBjb25zdCB0YWdDbGFzc09iaiA9IHByZWNvbXBpbGVkQ2xhc3NNYXBbdGFnXVxuICBpZiAoIWNsYXNzRGF0YSkge1xuICAgIGNsYXNzRGF0YSA9IGRhdGEuY2xhc3MgPSBbXVxuICB9XG4gIGlmIChjbGFzc0RhdGEgJiYgaXNBcnJheShjbGFzc0RhdGEpKSB7XG4gICAgZGF0YS5jbGFzcyA9IGNsYXNzRGF0YS5jb25jYXQoT2JqZWN0LmtleXModGFnQ2xhc3NPYmopKVxuICB9XG4gIGVsc2UgaWYgKHR5cGVvZiBjbGFzc0RhdGEgPT09ICdvYmplY3QnKSB7XG4gICAgT2JqZWN0LmFzc2lnbihjbGFzc0RhdGEsIHRhZ0NsYXNzT2JqKVxuICB9XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybVN0eWxlIChjdHgsIGRhdGEsIHRhZykge1xuICBjb25zdCB7IHN0eWxlIH0gPSBkYXRhXG4gIGlmICghc3R5bGUpIHsgcmV0dXJuIH1cbiAgY29uc3QgdHJhbnNmb3JtZXIgPSBnZXRUcmFuc2Zvcm1lcihnZXRTdGRUYWcodGFnKSlcbiAgaWYgKHRyYW5zZm9ybWVyKSB7XG4gICAgZGF0YS5zdHlsZSA9IGN0eC5fcHgycmVtKHRyYW5zZm9ybWVyLnRyYW5zZm9ybShzdHlsZSksIDc1KVxuICB9XG4gIGVsc2Uge1xuICAgIGRhdGEuc3R5bGUgPSBjdHguX3B4MnJlbShzdHlsZSwgNzUpXG4gIH1cbn1cblxuLyoqXG4gKiB0cmFuc2Zvcm1BdHRyczpcbiAqICAtIGFkZCB3ZWV4LXR5cGUgYXR0cnMgZm9yIHByZWNvbXBpbGVkVGFncy5cbiAqICAtIGltYWdlLnJlc2l6ZTogdHJhbnNmb3JtIHRvIGRpcmVjdGl2ZSB3ZWV4LXJlc2l6ZS5cbiAqL1xuZnVuY3Rpb24gdHJhbnNmb3JtQXR0cnMgKGRhdGEsIHRhZykge1xuICBsZXQgeyBhdHRycywgZGlyZWN0aXZlcyB9ID0gZGF0YVxuICBpZiAoIWF0dHJzKSB7XG4gICAgYXR0cnMgPSBkYXRhLmF0dHJzID0ge31cbiAgfVxuICBhdHRyc1snd2VleC10eXBlJ10gPSB0YWdcbiAgaWYgKHRhZyA9PT0gJ2ltYWdlJykge1xuICAgIGNvbnN0IHsgc3JjLCByZXNpemUgfSA9IGF0dHJzXG4gICAgaWYgKHNyYykge1xuICAgICAgYXR0cnNbJ2RhdGEtaW1nLXNyYyddID0gc3JjXG4gICAgfVxuICAgIGlmIChyZXNpemUpIHtcbiAgICAgIGlmICghZGlyZWN0aXZlcykge1xuICAgICAgICBkaXJlY3RpdmVzID0gZGF0YS5kaXJlY3RpdmVzID0gW11cbiAgICAgIH1cbiAgICAgIGRpcmVjdGl2ZXMucHVzaCh7XG4gICAgICAgIG5hbWU6ICd3ZWV4LXJlc2l6ZScsXG4gICAgICAgIHZhbHVlOiBhdHRycy5yZXNpemVcbiAgICAgIH0pXG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhIChjdHgsIGRhdGEsIHRhZykge1xuICBpZiAoaXNBcnJheShkYXRhKSkge1xuICAgIC8vIHBhcmFtZXRlciBkYXRhIGlzIG9tbWl0ZWQuXG4gICAgcmV0dXJuIGRhdGFcbiAgfVxuICBjb25zdCBpc1AgPSBpc1ByZWNvbXBpbGVkKHRhZylcbiAgLy8gY2xhc3NcbiAgaXNQICYmIHRyYW5zZm9ybUNsYXNzKGRhdGEsIHRhZylcbiAgLy8gc3R5bGVcbiAgdHJhbnNmb3JtU3R5bGUoY3R4LCBkYXRhLCB0YWcpXG4gIC8vIGF0dHJzXG4gIGlzUCAmJiB0cmFuc2Zvcm1BdHRycyhkYXRhLCB0YWcpXG4gIC8vIG9uXG4gIHRyYW5zZm9ybU9uKGN0eCwgZGF0YSwgdGFnKVxuICByZXR1cm4gZGF0YVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFwTmF0aXZlRXZlbnRzIChjdHgsIG1hcCkge1xuICBjb25zdCBldmVudE1hcCA9IHt9XG4gIGZvciAoY29uc3Qgb3JpZ0V2ZW50IGluIG1hcCkge1xuICAgIGV2ZW50TWFwW29yaWdFdmVudF0gPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICBjb25zdCBlbCA9IGV2dC50YXJnZXRcbiAgICAgIGRpc3BhdGNoTmF0aXZlRXZlbnQoZWwsIG1hcFtvcmlnRXZlbnRdKVxuICAgIH1cbiAgfVxuICByZXR1cm4gZXZlbnRNYXBcbn1cbiIsIi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuZXhwb3J0ICogZnJvbSAnLi9zdHlsZSdcbmV4cG9ydCAqIGZyb20gJy4vbm9kZSdcbiIsIi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHtcbiAgZ2V0VGhyb3R0bGVMYXp5bG9hZCxcbiAgd2F0Y2hBcHBlYXIsXG4gIGRlYm91bmNlXG59IGZyb20gJy4uL3V0aWxzJ1xuXG5pbXBvcnQgY29uZmlnIGZyb20gJy4uL2NvbmZpZydcbmNvbnN0IHNjcm9sbGFibGVUeXBlcyA9IGNvbmZpZy5zY3JvbGxhYmxlVHlwZXNcblxubGV0IGxhenlsb2FkV2F0Y2hlZCA9IGZhbHNlXG5mdW5jdGlvbiB3YXRjaExhenlsb2FkICgpIHtcbiAgbGF6eWxvYWRXYXRjaGVkID0gdHJ1ZVxuICA7IFtcbiAgICAnc2Nyb2xsJyxcbiAgICAvLyAndHJhbnNpdGlvbmVuZCcsXG4gICAgLy8gJ3dlYmtpdFRyYW5zaXRpb25FbmQnLFxuICAgIC8vICdhbmltYXRpb25lbmQnLFxuICAgIC8vICd3ZWJraXRBbmltYXRpb25FbmQnLFxuICAgICdyZXNpemUnXG4gIF0uZm9yRWFjaChldnQgPT4ge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKGV2dCwgZ2V0VGhyb3R0bGVMYXp5bG9hZCgyNSwgZG9jdW1lbnQuYm9keSkpXG4gIH0pXG4gIC8qKlxuICAgKiBJbiBjYXNlIHRoZSB1c2VycyB1c2UgdGhlIGJvZHkncyBvdmVyZmxvdyB0byBzY3JvbGwuIFRoZW4gdGhlIHNjcm9sbFxuICAgKiBldmVudCB3b3VsZCBub3QgYmUgdHJpZ2dlcmVkIG9uIHRoZSB3aW5kb3cgb2JqZWN0IGJ1dCBvbiB0aGUgYm9keS5cbiAgICovXG4gIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgZ2V0VGhyb3R0bGVMYXp5bG9hZCgyNSwgZG9jdW1lbnQuYm9keSkpXG59XG5cbmxldCBpZENudCA9IDBcbmxldCBhcHBlYXJXYXRjaGVkID0gZmFsc2VcblxuLyoqXG4gKiBkdXJpbmcgdXBkYXRpbmcsIHRoZSBhcHBlYXIgd2F0Y2hlciBiaW5kaW5nIG9uIHRoZSBhcHBlYXJXYXRjaGVkIGNvbnRleHRcbiAqIHNob3VsZCBiZSB0cmlnZ2VyZWQgd2l0aGluIGEgZGVib3VuY2VkIHdyYXBwZXIuXG4gKiBJZiB0aGUgdXBkYXRpbmcgaW50ZXJ2YWwgaXMgc2hvcnRlciB0aGVuIDUwIG1zLCB0aGVuIHRoZSBhcHBlYXIgZXZlbnRzIHdpbGxcbiAqIGlnbm9yZSB0aGUgY2hhbmdlIGluIHRoZSBwcmV2aW91cyA1MCBtcyBkdWUgdG8gdGhlIGRlYm91bmNlIHdyYXBwZXIuXG4gKi9cbmNvbnN0IGRlYm91bmNlZFdhdGNoQXBwZWFyID0gZGVib3VuY2UoZnVuY3Rpb24gKCkge1xuICB3YXRjaEFwcGVhcihhcHBlYXJXYXRjaGVkLCB0cnVlKVxufSwgNTApXG5cbi8qKlxuICogaWYgaXQncyBhIHNjcm9sbGFibGUgdGFnLCB0aGVuIHdhdGNoIGFwcGVhciBldmVudHMgZm9yIGl0LlxuICovXG5mdW5jdGlvbiB3YXRjaEFwcGVhckZvclNjcm9sbGFibGVzICh0YWdOYW1lLCBjb250ZXh0KSB7XG4gIC8vIHdoZW4gdGhpcyBpcyBhIHNjcm9sbGVyL2xpc3Qvd2F0ZXJmYWxsXG4gIGlmIChzY3JvbGxhYmxlVHlwZXMuaW5kZXhPZih0YWdOYW1lKSA+IC0xKSB7XG4gICAgY29uc3Qgc2QgPSBjb250ZXh0LnNjcm9sbERpcmVjdGlvblxuICAgIGlmICghc2QgfHwgc2QgIT09ICdob3Jpem9udGFsJykge1xuICAgICAgYXBwZWFyV2F0Y2hlZCA9IGNvbnRleHRcbiAgICAgIHdhdGNoQXBwZWFyKGNvbnRleHQsIHRydWUpXG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgYmVmb3JlQ3JlYXRlICgpIHtcbiAgICBpZiAoIWxhenlsb2FkV2F0Y2hlZCkge1xuICAgICAgd2F0Y2hMYXp5bG9hZCgpXG4gICAgfVxuICB9LFxuXG4gIHVwZGF0ZWQgKCkge1xuICAgIGNvbnN0IGVsID0gdGhpcy4kZWxcbiAgICBpZiAoIWVsIHx8IGVsLm5vZGVUeXBlICE9PSAxKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgaWYgKHRoaXMuX3Jvb3RJZCkge1xuICAgICAgaWYgKGVsLmNsYXNzTmFtZS5pbmRleE9mKCd3ZWV4LXJvb3QnKSA8PSAtMSkge1xuICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKCd3ZWV4LXJvb3QnKVxuICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKCd3ZWV4LWN0JylcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdkYXRhLXd4LXJvb3QtaWQnLCB0aGlzLl9yb290SWQpXG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgdGFnTmFtZSA9IHRoaXMuJG9wdGlvbnMgJiYgdGhpcy4kb3B0aW9ucy5fY29tcG9uZW50VGFnXG4gICAgY29uc3QgbWV0YVVwID0gd2VleC5fbWV0YS51cGRhdGVkXG4gICAgaWYgKCFtZXRhVXBbdGFnTmFtZV0pIHtcbiAgICAgIG1ldGFVcFt0YWdOYW1lXSA9IDBcbiAgICB9XG4gICAgbWV0YVVwW3RhZ05hbWVdKytcbiAgICAvLyB3aWxsIGNoZWNrIGFwcGVhcmluZyB3aGVuIG5vIG90aGVyIGNoYW5nZXMgaW4gbGF0ZXN0IDUwbXMuXG4gICAgZGVib3VuY2VkV2F0Y2hBcHBlYXIoKVxuICAgIC8qKlxuICAgICAqIHNpbmNlIHRoZSB1cGRhdGluZyBvZiBjb21wb25lbnQgbWF5IGFmZmVjdCB0aGUgbGF5b3V0LCB0aGUgbGF6eWxvYWRpbmcgc2hvdWxkXG4gICAgICogYmUgZmlyZWQuXG4gICAgICovXG4gICAgdGhpcy5fZmlyZUxhenlsb2FkKClcbiAgfSxcblxuICBtb3VudGVkICgpIHtcbiAgICBjb25zdCB0YWdOYW1lID0gdGhpcy4kb3B0aW9ucyAmJiB0aGlzLiRvcHRpb25zLl9jb21wb25lbnRUYWdcbiAgICBjb25zdCBlbCA9IHRoaXMuJGVsXG4gICAgaWYgKCFlbCB8fCBlbC5ub2RlVHlwZSAhPT0gMSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGlmICh0eXBlb2Ygd2VleC5fY29tcG9uZW50c1t0YWdOYW1lXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHdlZXguX2NvbXBvbmVudHNbdGFnTmFtZV0rK1xuICAgIH1cbiAgICBjb25zdCBtZXRhTXQgPSB3ZWV4Ll9tZXRhLm1vdW50ZWRcbiAgICBpZiAoIW1ldGFNdFt0YWdOYW1lXSkge1xuICAgICAgbWV0YU10W3RhZ05hbWVdID0gMFxuICAgIH1cbiAgICBtZXRhTXRbdGFnTmFtZV0rK1xuXG4gICAgd2F0Y2hBcHBlYXJGb3JTY3JvbGxhYmxlcyh0YWdOYW1lLCB0aGlzKVxuXG4gICAgLy8gd2hlbiB0aGlzIGlzIHRoZSByb290IGVsZW1lbnQgb2YgVnVlIGluc3RhbmNlLlxuICAgIGlmICh0aGlzID09PSB0aGlzLiRyb290KSB7XG4gICAgICBjb25zdCByb290SWQgPSBgd3gtcm9vdC0ke2lkQ250Kyt9YFxuICAgICAgaWYgKCF3ZWV4Ll9yb290KSB7XG4gICAgICAgIHdlZXguX3Jvb3QgPSB7fVxuICAgICAgfVxuICAgICAgd2VleC5fcm9vdFtyb290SWRdID0gdGhpc1xuICAgICAgdGhpcy5fcm9vdElkID0gcm9vdElkXG4gICAgICBpZiAoZWwubm9kZVR5cGUgIT09IDEpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBlbC5jbGFzc0xpc3QuYWRkKCd3ZWV4LXJvb3QnKVxuICAgICAgZWwuY2xhc3NMaXN0LmFkZCgnd2VleC1jdCcpXG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtd3gtcm9vdC1pZCcsIHJvb3RJZClcblxuICAgICAgLyoqXG4gICAgICAgKiB0aGVyZSdzIG5vIHNjcm9sbGFibGUgY29tcG9uZW50IGluIHRoaXMgcGFnZS4gVGhhdCBpcyB0byBzYXksXG4gICAgICAgKiB0aGUgcGFnZSBpcyB1c2luZyBib2R5IHNjcm9sbGluZyBpbnN0ZWFkIG9mIHNjcm9sbGFiZSBjb21wb25lbnRzLlxuICAgICAgICogVGhlbiB0aGUgYXBwZWFyIHdhdGNoZXIgc2hvdWxkIGJlIGF0dGFjaGVkIG9uIHRoZSBib2R5LlxuICAgICAgICovXG4gICAgICBpZiAoIWFwcGVhcldhdGNoZWQpIHtcbiAgICAgICAgYXBwZWFyV2F0Y2hlZCA9IHRoaXNcbiAgICAgICAgd2F0Y2hBcHBlYXIodGhpcywgdHJ1ZSlcbiAgICAgIH1cblxuICAgICAgdGhpcy5fZmlyZUxhenlsb2FkKGVsKVxuICAgIH1cblxuICAgIC8vIGdpdmUgd2FybmluZyBmb3Igbm90IHVzaW5nICRwcm9jZXNzU3R5bGUgaW4gdnVlLWxvYWRlciBjb25maWcuXG4gICAgLy8gaWYgKCF3YXJuZWQgJiYgIXdpbmRvdy5fc3R5bGVfcHJvY2Vzc2luZ19hZGRlZCkge1xuICAgIC8vICAgd2FyblByb2Nlc3NTdHlsZSgpXG4gICAgLy8gfVxuICB9LFxuXG4gIGRlc3Ryb3llZCAoKSB7XG4gICAgY29uc3QgZWwgPSB0aGlzLiRlbFxuICAgIGlmICghZWwgfHwgZWwubm9kZVR5cGUgIT09IDEpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICAvKipcbiAgICAgKiBpZiB0aGUgZGVzdHJveWVkIGVsZW1lbnQgaXMgYWJvdmUgYW5vdGhlciBwYW5lbCB3aXRoIGltYWdlcyBpbnNpZGUsIGFuZCB0aGUgaW1hZ2VzXG4gICAgICogbW92ZWQgaW50byB0aGUgdmlld3BvcnQsIHRoZW4gdGhlIGxhenlsb2FkaW5nIHNob3VsZCBiZSB0cmlnZ2VyZWQuXG4gICAgICovXG4gICAgaWYgKHRoaXMuX3Jvb3RJZCkge1xuICAgICAgZGVsZXRlIHdlZXguX3Jvb3RbdGhpcy5fcm9vdElkXVxuICAgICAgZGVsZXRlIHRoaXMuX3Jvb3RJZFxuICAgIH1cbiAgICBjb25zdCB0YWdOYW1lID0gdGhpcy4kb3B0aW9ucyAmJiB0aGlzLiRvcHRpb25zLl9jb21wb25lbnRUYWdcbiAgICBpZiAodHlwZW9mIHdlZXguX2NvbXBvbmVudHNbdGFnTmFtZV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB3ZWV4Ll9jb21wb25lbnRzW3RhZ05hbWVdLS1cbiAgICB9XG4gICAgY29uc3QgbWV0YURzID0gd2VleC5fbWV0YS5kZXN0cm95ZWRcbiAgICBpZiAoIW1ldGFEc1t0YWdOYW1lXSkge1xuICAgICAgbWV0YURzW3RhZ05hbWVdID0gMFxuICAgIH1cbiAgICBtZXRhRHNbdGFnTmFtZV0rK1xuICAgIHRoaXMuX2ZpcmVMYXp5bG9hZCgpXG4gIH0sXG5cbiAgbWV0aG9kczoge1xuICAgIF9maXJlTGF6eWxvYWQgKGVsKSB7XG4gICAgICBnZXRUaHJvdHRsZUxhenlsb2FkKDI1LCBlbCB8fCBkb2N1bWVudC5ib2R5KSgpXG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBpbnNpZGVBIH0gZnJvbSAnLi4vdXRpbHMnXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbWV0aG9kczoge1xuICAgIC8vIGRlcHJlY2F0ZWQuXG4gICAgJHN0b3BPdXR0ZXJBIChlKSB7XG4gICAgICByZXR1cm4gdGhpcy4kc3RvcE91dGVyQShlKVxuICAgIH0sXG5cbiAgICAkc3RvcE91dGVyQSAoZSkge1xuICAgICAgaWYgKGUgJiYgZS5wcmV2ZW50RGVmYXVsdCAmJiBlLnRhcmdldCkge1xuICAgICAgICBpZiAoaW5zaWRlQShlLnRhcmdldCkpIHtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAkc3RvcFByb3BhZ2F0aW9uIChlKSB7XG4gICAgICBpZiAoZSAmJiBlLnN0b3BQcm9wYWdhdGlvbikge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpXG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCIvKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgZ2V0VHJhbnNmb3JtZXIgfSBmcm9tICd3eHYtdHJhbnNmb3JtZXInXG5pbXBvcnQgeyBpc0FycmF5LCBpc1BsYWluT2JqZWN0IH0gZnJvbSAnLi4vdXRpbHMnXG5pbXBvcnQgY29uZmlnIGZyb20gJy4uL2NvbmZpZydcbmNvbnN0IHsgYmluZGluZ1N0eWxlTmFtZXNGb3JQeDJSZW0gfSA9IGNvbmZpZ1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG1ldGhvZHM6IHtcbiAgICBfcHgycmVtICh2YWx1ZSwgcm9vdFZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gKHZhbHVlICsgJycpLnJlcGxhY2UoL1srLV0/XFxkKyg/Oi5cXGQqKT9bcHddeC9naSwgZnVuY3Rpb24gKCQwKSB7XG4gICAgICAgICAgcmV0dXJuIHdlZXgudXRpbHMucHgycmVtKCQwLCByb290VmFsdWUpXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gd2VleC51dGlscy5weDJyZW0odmFsdWUgKyAnJywgcm9vdFZhbHVlKVxuICAgICAgfVxuICAgICAgaWYgKGlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgICAgIGZvciAoY29uc3QgayBpbiB2YWx1ZSkge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHZhbHVlLmhhc093blByb3BlcnR5KGspXG4gICAgICAgICAgICAmJiBiaW5kaW5nU3R5bGVOYW1lc0ZvclB4MlJlbS5pbmRleE9mKGspID4gLTFcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHZhbHVlW2tdID0gd2VleC51dGlscy5weDJyZW0odmFsdWVba10gKyAnJywgcm9vdFZhbHVlKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWVcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIHRoaXMuX3B4MnJlbSh2YWx1ZVtpXSwgcm9vdFZhbHVlKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBfcHJvY2Vzc0V4Y2x1c2l2ZVN0eWxlIChzdHlsZU9iaiwgcm9vdFZhbHVlLCB0YWdOYW1lKSB7XG4gICAgICBjb25zdCB0cmFuc2Zvcm1lciA9IGdldFRyYW5zZm9ybWVyKHRhZ05hbWUpXG4gICAgICByZXR1cm4gdGhpcy5fcHgycmVtKFxuICAgICAgICB0cmFuc2Zvcm1lci50cmFuc2Zvcm0oc3R5bGVPYmopLFxuICAgICAgICByb290VmFsdWVcbiAgICAgIClcbiAgICB9LFxuXG4gICAgX2dldFBhcmVudFJlY3QgKCkge1xuICAgICAgY29uc3QgZWwgPSB0aGlzLiRlbFxuICAgICAgY29uc3QgcGFyZW50ID0gZWwgJiYgZWwucGFyZW50RWxlbWVudFxuICAgICAgcmV0dXJuIHBhcmVudCAmJiBwYXJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICB9XG4gIH1cbn1cbiIsIi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vLyBpbnB1dCBhbmQgdGV4dGFyZSBoYXMgc29tZSBjb21tb24gYXBpIGFuZCBldmVudFxuaW1wb3J0IHsgZXh0ZW5kLCBkaXNwYXRjaE5hdGl2ZUV2ZW50IH0gZnJvbSAnLi4vdXRpbHMnXG5cbmNvbnN0IGZpbmRFbnRlcktleVR5cGUgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIGNvbnN0IGtleXMgPSBbJ2RlZmF1bHQnLCAnZ28nLCAnbmV4dCcsICdzZWFyY2gnLCAnc2VuZCddXG4gIGlmIChrZXlzLmluZGV4T2Yoa2V5KSA+IC0xKSB7XG4gICAgcmV0dXJuIGtleVxuICB9XG4gIHJldHVybiAnZG9uZSdcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBtZXRob2RzOiB7XG4gICAgZm9jdXMgKCkge1xuICAgICAgdGhpcy4kZWwgJiYgdGhpcy4kZWwuZm9jdXMoKVxuICAgIH0sXG4gICAgYmx1ciAoKSB7XG4gICAgICB0aGlzLiRlbCAmJiB0aGlzLiRlbC5ibHVyKClcbiAgICB9LFxuXG4gICAgc2V0U2VsZWN0aW9uUmFuZ2UgKHN0YXJ0LCBlbmQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMuJGVsLnNldFNlbGVjdGlvblJhbmdlKHN0YXJ0LCBlbmQpXG4gICAgICB9XG4gICAgICBjYXRjaCAoZSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oYFt2dWUtcmVuZGVyXSBzZXRTZWxlY3Rpb25SYW5nZSBpcyBub3Qgc3VwcG9ydGVkLmApXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZ2V0U2VsZWN0aW9uUmFuZ2UgKGNhbGxiYWNrKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBzZWxlY3Rpb24gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKClcbiAgICAgICAgY29uc3Qgc3RyID0gc2VsZWN0aW9uLnRvU3RyaW5nKClcbiAgICAgICAgY29uc3Qgc2VsZWN0aW9uU3RhcnQgPSB0aGlzLiRlbC52YWx1ZS5pbmRleE9mKHN0cilcbiAgICAgICAgY29uc3Qgc2VsZWN0aW9uRW5kID0gc2VsZWN0aW9uU3RhcnQgPT09IC0xID8gc2VsZWN0aW9uU3RhcnQgOiBzZWxlY3Rpb25TdGFydCArIHN0ci5sZW5ndGhcbiAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soe1xuICAgICAgICAgIHNlbGVjdGlvblN0YXJ0LFxuICAgICAgICAgIHNlbGVjdGlvbkVuZFxuICAgICAgICB9KVxuICAgICAgfVxuICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2sobmV3IEVycm9yKCdbdnVlLXJlbmRlcl0gZ2V0U2VsZWN0aW9uIGlzIG5vdCBzdXBwb3J0ZWQuJykpXG4gICAgICB9XG4gICAgfSxcblxuICAgIGdldEVkaXRTZWxlY3Rpb25SYW5nZSAoY2FsbGJhY2spIHtcbiAgICAgIHRoaXMuZ2V0U2VsZWN0aW9uUmFuZ2UoY2FsbGJhY2spXG4gICAgfSxcblxuICAgIC8vIHN1cHBvcnQgZW50ZXIga2V5IGV2ZW50XG4gICAgY3JlYXRlS2V5Ym9hcmRFdmVudCAoZXZlbnRzKSB7XG4gICAgICBjb25zdCBjdXN0b21LZXlUeXBlID0gdGhpcy5yZXR1cm5LZXlUeXBlXG4gICAgICBpZiAoY3VzdG9tS2V5VHlwZSkge1xuICAgICAgICBjb25zdCBrZXlib2FyZEV2ZW50cyA9IHtcbiAgICAgICAgICAna2V5dXAnOiBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvZGUgPSBldi5rZXlDb2RlXG4gICAgICAgICAgICBsZXQga2V5ID0gZXYua2V5XG4gICAgICAgICAgICBpZiAoY29kZSA9PT0gMTMpIHtcbiAgICAgICAgICAgICAgaWYgKCFrZXkgfHwga2V5LnRvTG93ZXJDYXNlKCkgPT09ICd0YWInKSB7XG4gICAgICAgICAgICAgICAga2V5ID0gJ25leHQnXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZGlzcGF0Y2hOYXRpdmVFdmVudChldi50YXJnZXQsICdyZXR1cm4nLCB7XG4gICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgIHJldHVybktleVR5cGU6IGZpbmRFbnRlcktleVR5cGUoY3VzdG9tS2V5VHlwZSksXG4gICAgICAgICAgICAgICAgdmFsdWU6IGV2LnRhcmdldC52YWx1ZVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBldmVudHMgPSBleHRlbmQoZXZlbnRzLCBrZXlib2FyZEV2ZW50cylcbiAgICAgIH1cbiAgICAgIHJldHVybiBldmVudHNcbiAgICB9XG4gIH1cbn1cbiIsIi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHtcbiAgZ2V0UGFyZW50U2Nyb2xsZXJcbn0gZnJvbSAnLi4vdXRpbHMnXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZGVzdHJveWVkICgpIHtcbiAgICBpZiAoIXRoaXMuX3N0aWNreUFkZGVkKSB7IHJldHVybiB9XG4gICAgY29uc3Qgc2Nyb2xsZXIgPSBnZXRQYXJlbnRTY3JvbGxlcih0aGlzKVxuICAgIGlmICghc2Nyb2xsZXIpIHsgcmV0dXJuIH1cbiAgICBkZWxldGUgc2Nyb2xsZXIuX3N0aWNreUNoaWxkcmVuW3RoaXMuX3VpZF1cbiAgfSxcblxuICBtZXRob2RzOiB7XG4gICAgX2FkZFN0aWNreSAoKSB7XG4gICAgICBjb25zdCBlbCA9IHRoaXMuJGVsXG4gICAgICBpZiAoIWVsIHx8IGVsLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFt2dWUtcmVuZGVyXSAkZWwgZG9lc24ndCBleGlzdCB0byBhZGQgc3RpY2t5LmApXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBlbC5jbGFzc0xpc3QuYWRkKCdzdGlja3knKVxuICAgICAgaWYgKCF0aGlzLl9wbGFjZWhvbGRlcikge1xuICAgICAgICB0aGlzLl9wbGFjZWhvbGRlciA9IGVsLmNsb25lTm9kZSh0cnVlKVxuICAgICAgfVxuICAgICAgdGhpcy5fcGxhY2Vob2xkZXIuc3R5bGUuZGlzcGxheSA9ICdibG9jaydcbiAgICAgIHRoaXMuX3BsYWNlaG9sZGVyLnN0eWxlLndpZHRoID0gdGhpcy4kZWwub2Zmc2V0V2lkdGggKyAncHgnXG4gICAgICB0aGlzLl9wbGFjZWhvbGRlci5zdHlsZS5oZWlnaHQgPSB0aGlzLiRlbC5vZmZzZXRIZWlnaHQgKyAncHgnXG4gICAgICBlbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLl9wbGFjZWhvbGRlciwgdGhpcy4kZWwpXG4gICAgfSxcblxuICAgIF9yZW1vdmVTdGlja3kgKCkge1xuICAgICAgY29uc3QgZWwgPSB0aGlzLiRlbFxuICAgICAgaWYgKCFlbCB8fCBlbC5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGBbdnVlLXJlbmRlcl0gJGVsIGRvZXNuJ3QgZXhpc3QgdG8gcmVtb3ZlIHN0aWNreS5gKVxuICAgICAgICB9XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgnc3RpY2t5JylcbiAgICAgIGlmICh0aGlzLl9wbGFjZWhvbGRlcikge1xuICAgICAgICB0aGlzLl9wbGFjZWhvbGRlci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuX3BsYWNlaG9sZGVyKVxuICAgICAgfVxuICAgICAgdGhpcy5fcGxhY2Vob2xkZXIgPSBudWxsXG4gICAgfVxuICB9XG59XG4iLCIvKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCBiYXNlIGZyb20gJy4vYmFzZSdcbmltcG9ydCBldmVudCBmcm9tICcuL2V2ZW50J1xuaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnXG5pbXBvcnQgaW5wdXRDb21tb24gZnJvbSAnLi9pbnB1dC1jb21tb24nXG5pbXBvcnQgc3RpY2t5IGZyb20gJy4vc3RpY2t5J1xuXG5leHBvcnQge1xuICBiYXNlLFxuICBldmVudCxcbiAgc3R5bGUsXG4gIGlucHV0Q29tbW9uLFxuICBzdGlja3lcbn1cbiIsIi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHdlZXggZnJvbSAnLi9pbnN0YW5jZSdcbmltcG9ydCAqIGFzIGNvcmUgZnJvbSAnLi4vY29yZSdcblxuaW1wb3J0IHsgaW5wdXRDb21tb24gfSBmcm9tICcuLi9taXhpbnMnXG5cbndpbmRvdy5nbG9iYWwgPSB3aW5kb3dcbndpbmRvdy53ZWV4ID0gd2VleFxuXG53ZWV4Ll9zdHlsZU1hcCA9IHt9XG5cbjsgWydnZXRDb21wb25lbnRJbmxpbmVTdHlsZScsXG4gICdleHRyYWN0Q29tcG9uZW50U3R5bGUnLFxuICAnbWFwTmF0aXZlRXZlbnRzJyxcbiAgJ3RyaW1UZXh0Vk5vZGVzJ11cbiAgLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZCkge1xuICAgIHdlZXhbbWV0aG9kXSA9IGNvcmVbbWV0aG9kXS5iaW5kKHdlZXgpXG4gIH0pXG5cbndlZXgubWl4aW5zID0ge1xuICBpbnB1dENvbW1vblxufVxuIiwiLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQge1xuICB0cmFuc2Zvcm1SZW5kZXJcbn0gZnJvbSAnLi4vY29yZS9ub2RlJ1xuaW1wb3J0IHsgaXNEZWYgfSBmcm9tICcuLi91dGlscydcblxubGV0IF9pbml0ZWQgPSBmYWxzZVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGluaXQgKHdlZXgpIHtcbiAgICBpZiAoX2luaXRlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIF9pbml0ZWQgPSB0cnVlXG4gICAgY29uc3QgVnVlID0gd2VleC5fX3Z1ZV9fXG4gICAgY29uc3QgX3JlbmRlciA9IFZ1ZS5wcm90b3R5cGUuX3JlbmRlclxuICAgIFZ1ZS5wcm90b3R5cGUuX3JlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCB3ZWV4UmVuZGVyID0gdGhpcy5fd2VleFJlbmRlclxuICAgICAgY29uc3QgdGFnID0gdGhpcy4kb3B0aW9ucyAmJiB0aGlzLiRvcHRpb25zLl9jb21wb25lbnRUYWdcbiAgICAgIGlmIChcbiAgICAgICAgIXdlZXhSZW5kZXJcbiAgICAgICAgJiYgIWlzRGVmKHdlZXguX2NvbXBvbmVudHNbdGFnXSlcbiAgICAgICkge1xuICAgICAgICBjb25zdCBvcmlnUmVuZGVyID0gdGhpcy4kb3B0aW9ucy5yZW5kZXJcbiAgICAgICAgd2VleFJlbmRlciA9IHRoaXMuX3dlZXhSZW5kZXIgPSBmdW5jdGlvbiAoaCwgLi4uYXJncykge1xuICAgICAgICAgIHJldHVybiBvcmlnUmVuZGVyLmNhbGwodGhpcywgdHJhbnNmb3JtUmVuZGVyKHRoaXMsIGgpLCAuLi5hcmdzKVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuJG9wdGlvbnMucmVuZGVyID0gd2VleFJlbmRlclxuICAgICAgfVxuICAgICAgcmV0dXJuIF9yZW5kZXIuY2FsbCh0aGlzKVxuICAgIH1cbiAgfVxufVxuIiwiLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgJy4uL3N0eWxlcy9yZXNldC5jc3MnXG5pbXBvcnQgJy4uL3N0eWxlcy9iYXNlLmNzcydcblxuaW1wb3J0ICdjb3JlLWpzL2ZuL2FycmF5L2Zyb20nXG5pbXBvcnQgJ2NvcmUtanMvZm4vb2JqZWN0L2Fzc2lnbidcbmltcG9ydCAnY29yZS1qcy9mbi9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZidcbmltcG9ydCAnY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nJ1xuaW1wb3J0ICdjb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcidcbmltcG9ydCAnY29yZS1qcy9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnXG5pbXBvcnQgJ2NvcmUtanMvbW9kdWxlcy9lczYucHJvbWlzZSdcblxuaW1wb3J0ICcuLi9saWIvZ2VzdHVyZSdcbmltcG9ydCAnLi9nbG9iYWwnXG5pbXBvcnQgcmVuZGVyRnVuY3Rpb25QbHVnaW4gZnJvbSAnLi9yZW5kZXItZnVuY3Rpb24nXG5cbmlmIChnbG9iYWwuVnVlKSB7XG4gIHNldFZ1ZShnbG9iYWwuVnVlKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0VnVlICh2dWUpIHtcbiAgaWYgKCF2dWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1tWdWUgUmVuZGVyXSBWdWUgbm90IGZvdW5kLiBQbGVhc2UgbWFrZSBzdXJlIHZ1ZSAyLnggcnVudGltZSBpcyBpbXBvcnRlZC4nKVxuICB9XG4gIGlmIChnbG9iYWwud2VleC5fX3Z1ZV9fKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgZ2xvYmFsLndlZXguX192dWVfXyA9IHZ1ZVxuICB3ZWV4Lmluc3RhbGwocmVuZGVyRnVuY3Rpb25QbHVnaW4pXG4gIGNvbnNvbGUubG9nKGBbVnVlIFJlbmRlcl0gaW5zdGFsbCBWdWUgJHt2dWUudmVyc2lvbn0uYClcbn1cblxuZXhwb3J0IGRlZmF1bHQgd2VleFxuIiwiLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgd2VleCBmcm9tICcuL3dlZXgnXG5pbXBvcnQgeyBzZXRWdWUgfSBmcm9tICcuL3dlZXgnXG5pbXBvcnQgeyBiYXNlLCBldmVudCwgc3R5bGUsIHN0aWNreSB9IGZyb20gJy4vbWl4aW5zJ1xuXG4vKipcbiAqIGluaXQgd2VleC5cbiAqIEBwYXJhbSAge1Z1ZSQyfSBWdWU6IFZ1ZSBDb25zdHJ1Y3Rvci5cbiAqIEBwYXJhbSAge29iamVjdH0gb3B0aW9uczogZXh0ZW5kIHdlZXggcGx1Z2lucy5cbiAqICAgICAgICAgLSBjb21wb25lbnRzLlxuICogICAgICAgICAtIG1vZHVsZXMuXG4gKi9cbmxldCBfaW5pdGVkID0gZmFsc2VcbmZ1bmN0aW9uIGluaXQgKFZ1ZS8qLCBvcHRpb25zID0ge30qLykge1xuICBpZiAoX2luaXRlZCkgeyByZXR1cm4gfVxuICBfaW5pdGVkID0gdHJ1ZVxuXG4gIHNldFZ1ZShWdWUpXG5cbiAgVnVlLnByb3RvdHlwZS4kZ2V0Q29uZmlnID0gKCkgPT4ge1xuICAgIGNvbnNvbGUud2FybignW1Z1ZSBSZW5kZXJdIFwidGhpcy4kZ2V0Q29uZmlnXCIgaXMgZGVwcmVjYXRlZCwgcGxlYXNlIHVzZSBcIndlZXguY29uZmlnXCIgaW5zdGVhZC4nKVxuICAgIHJldHVybiB3ZWV4LmNvbmZpZ1xuICB9XG5cbiAgY29uc3QgaHRtbFJlZ2V4ID0gL15odG1sOi9pXG4gIFZ1ZS5jb25maWcuaXNSZXNlcnZlZFRhZyA9IHRhZyA9PiBodG1sUmVnZXgudGVzdCh0YWcpXG4gIFZ1ZS5jb25maWcucGFyc2VQbGF0Zm9ybVRhZ05hbWUgPSB0YWcgPT4gdGFnLnJlcGxhY2UoaHRtbFJlZ2V4LCAnJylcblxuICBmdW5jdGlvbiBpc1dlZXhUYWcgKHRhZykge1xuICAgIHJldHVybiB0eXBlb2Ygd2VleC5fY29tcG9uZW50c1t0YWddICE9PSAndW5kZWZpbmVkJ1xuICB9XG4gIGNvbnN0IG9sZEdldFRhZ05hbWVzcGFjZSA9IFZ1ZS5jb25maWcuZ2V0VGFnTmFtZXNwYWNlXG4gIFZ1ZS5jb25maWcuZ2V0VGFnTmFtZXNwYWNlID0gZnVuY3Rpb24gKHRhZykge1xuICAgIGlmIChpc1dlZXhUYWcodGFnKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHJldHVybiBvbGRHZXRUYWdOYW1lc3BhY2UodGFnKVxuICB9XG5cbiAgVnVlLm1peGluKGJhc2UpXG4gIFZ1ZS5taXhpbihldmVudClcbiAgVnVlLm1peGluKHN0eWxlKVxuICBWdWUubWl4aW4oc3RpY2t5KVxufVxuXG4vLyBhdXRvIGluaXQgaW4gZGlzdCBtb2RlLlxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5WdWUpIHtcbiAgaW5pdCh3aW5kb3cuVnVlKVxufVxuXG53ZWV4LmluaXQgPSBpbml0XG5cbmV4cG9ydCBkZWZhdWx0IHdlZXhcbiIsIi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKipcbiAqIEBmaWxlT3ZlcnZpZXcgSW5wdXQgY29tcG9uZW50LlxuICogU3VwcG9ydCB2LW1vZGVsIG9ubHkgaWYgdnVlIHZlcnNpb24gaXMgbGFyZ2VyIHRoYW4gMi4yLjBcbiAqL1xuaW1wb3J0IHsgZ2V0Q29tcG9uZW50SW5saW5lU3R5bGUgfSBmcm9tICcuLi8uLi9jb3JlJ1xuXG5sZXQgbWFwRm9ybUV2ZW50cywgYXBwZW5kQ3NzXG5cbmNvbnN0IElEX1BSRUZJWF9QTEFDRUhPTERFUl9DT0xPUiA9ICd3aXB0X3BsY18nXG5jb25zdCBJRF9QUkVGSVhfSU5QVVQgPSAnd2lwdF8nXG5sZXQgaWRDb3VudCA9IDBcblxuZnVuY3Rpb24gc2V0UGxhY2Vob2xkZXJDb2xvciAoaW5wdXRWbSwgcGxhY2Vob2xkZXJDb2xvcikge1xuICBpZiAoIXBsYWNlaG9sZGVyQ29sb3IpIHtcbiAgICByZXR1cm5cbiAgfVxuICBjb25zdCB2ZW5kb3JzID0gW1xuICAgICc6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXInLFxuICAgICc6LW1vei1wbGFjZWhvbGRlcicsXG4gICAgJzo6LW1vei1wbGFjZWhvbGRlcicsXG4gICAgJzotbXMtaW5wdXQtcGxhY2Vob2xkZXInLFxuICAgICc6cGxhY2Vob2xkZXItc2hvd24nXG4gIF1cbiAgY29uc3QgaWQgPSBpbnB1dFZtLl9pZFxuICBhcHBlbmRDc3MoXG4gICAgdmVuZG9ycy5tYXAoZnVuY3Rpb24gKHZlbmRvciwgaWR4KSB7XG4gICAgICByZXR1cm4gYCMke0lEX1BSRUZJWF9JTlBVVH0ke2lkfSR7dmVuZG9yc1tpZHhdfXtjb2xvcjoke3BsYWNlaG9sZGVyQ29sb3J9O31gXG4gICAgfSkuam9pbignJyksXG4gICAgYCR7SURfUFJFRklYX1BMQUNFSE9MREVSX0NPTE9SfSR7aWR9YCxcbiAgICB0cnVlKVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzU3R5bGUgKHZtKSB7XG4gIGNvbnN0IHN0eWxlcyA9IGdldENvbXBvbmVudElubGluZVN0eWxlKHZtKVxuICBjb25zdCBwaENvbG9yID0gc3R5bGVzLnBsYWNlaG9sZGVyQ29sb3IgfHwgc3R5bGVzWydwbGFjZWhvbGRlci1jb2xvciddXG4gIGlmIChwaENvbG9yKSB7XG4gICAgc2V0UGxhY2Vob2xkZXJDb2xvcih2bSwgcGhDb2xvcilcbiAgfVxuICByZXR1cm4gc3R5bGVzXG59XG5cbmZ1bmN0aW9uIGdldElucHV0ICh3ZWV4KSB7XG4gIGNvbnN0IHsgaW5wdXRDb21tb24gfSA9IHdlZXgubWl4aW5zXG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnd2VleC1pbnB1dCcsXG4gICAgbWl4aW5zOiBbaW5wdXRDb21tb25dLFxuICAgIHByb3BzOiB7XG4gICAgICB0eXBlOiB7XG4gICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgZGVmYXVsdDogJ3RleHQnLFxuICAgICAgICB2YWxpZGF0b3IgKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICdlbWFpbCcsICdudW1iZXInLCAncGFzc3dvcmQnLCAnc2VhcmNoJywgJ3RlbCcsICd0ZXh0JywgJ3VybCcsICdkYXRlJyxcbiAgICAgICAgICAgICdkYXRldGltZScsICd0aW1lJ1xuICAgICAgICAgICAgLy8gdW5zdXBwb3J0ZWQgdHlwZTpcbiAgICAgICAgICAgIC8vIGJ1dHRvbiwgY2hlY2tib3gsIGNvbG9yLCBmaWxlLCBoaWRkZW4sIGltYWdlLFxuICAgICAgICAgICAgLy8gbW9udGgsIHJhZGlvLCByYW5nZSwgcmVzZXQsIHN1Ym1pdCwgd2VlayxcbiAgICAgICAgICBdLmluZGV4T2YodmFsdWUpICE9PSAtMVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdmFsdWU6IFN0cmluZyxcbiAgICAgIHBsYWNlaG9sZGVyOiBTdHJpbmcsXG4gICAgICBkaXNhYmxlZDoge1xuICAgICAgICB0eXBlOiBbU3RyaW5nLCBCb29sZWFuXSxcbiAgICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICAgIH0sXG4gICAgICBhdXRvZm9jdXM6IHtcbiAgICAgICAgdHlwZTogW1N0cmluZywgQm9vbGVhbl0sXG4gICAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgbWF4bGVuZ3RoOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgICAgcmV0dXJuS2V5VHlwZTogU3RyaW5nXG4gICAgfSxcblxuICAgIHJlbmRlciAoY3JlYXRlRWxlbWVudCkge1xuICAgICAgaWYgKCF0aGlzLl9pZCkge1xuICAgICAgICB0aGlzLl9pZCA9IGlkQ291bnQrK1xuICAgICAgfVxuICAgICAgY29uc3QgZXZlbnRzID0gbWFwRm9ybUV2ZW50cyh0aGlzKVxuICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoJ2h0bWw6aW5wdXQnLCB7XG4gICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgJ3dlZXgtdHlwZSc6ICdpbnB1dCcsXG4gICAgICAgICAgaWQ6IGAke0lEX1BSRUZJWF9JTlBVVH0ke3RoaXMuX2lkfWAsXG4gICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxuICAgICAgICAgIHZhbHVlOiB0aGlzLnZhbHVlLFxuICAgICAgICAgIGRpc2FibGVkOiAodGhpcy5kaXNhYmxlZCAhPT0gJ2ZhbHNlJyAmJiB0aGlzLmRpc2FibGVkICE9PSBmYWxzZSksXG4gICAgICAgICAgYXV0b2ZvY3VzOiAodGhpcy5hdXRvZm9jdXMgIT09ICdmYWxzZScgJiYgdGhpcy5hdXRvZm9jdXMgIT09IGZhbHNlKSxcbiAgICAgICAgICBwbGFjZWhvbGRlcjogdGhpcy5wbGFjZWhvbGRlcixcbiAgICAgICAgICBtYXhsZW5ndGg6IHRoaXMubWF4bGVuZ3RoLFxuICAgICAgICAgICdyZXR1cm5LZXlUeXBlJzogdGhpcy5yZXR1cm5LZXlUeXBlXG4gICAgICAgIH0sXG4gICAgICAgIGRvbVByb3BzOiB7XG4gICAgICAgICAgdmFsdWU6IHRoaXMudmFsdWVcbiAgICAgICAgfSxcbiAgICAgICAgb246IHRoaXMuY3JlYXRlS2V5Ym9hcmRFdmVudChldmVudHMpLFxuICAgICAgICBzdGF0aWNDbGFzczogJ3dlZXgtaW5wdXQgd2VleC1lbCcsXG4gICAgICAgIHN0YXRpY1N0eWxlOiBwcm9jZXNzU3R5bGUodGhpcylcbiAgICAgIH0pXG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaW5pdCAod2VleCkge1xuICAgIG1hcEZvcm1FdmVudHMgPSB3ZWV4LnV0aWxzLm1hcEZvcm1FdmVudHNcbiAgICBhcHBlbmRDc3MgPSB3ZWV4LnV0aWxzLmFwcGVuZENzc1xuXG4gICAgd2VleC5yZWdpc3RlckNvbXBvbmVudCgnaW5wdXQnLCBnZXRJbnB1dCh3ZWV4KSlcbiAgfVxufVxuIiwiLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgJy4vc3R5bGUuY3NzJ1xuXG5mdW5jdGlvbiBnZXRTd2l0Y2ggKHdlZXgpIHtcbiAgY29uc3QgeyBleHRyYWN0Q29tcG9uZW50U3R5bGUgfSA9IHdlZXhcbiAgY29uc3QgeyBkaXNwYXRjaE5hdGl2ZUV2ZW50IH0gPSB3ZWV4LnV0aWxzXG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnd2VleC1zd2l0Y2gnLFxuICAgIHByb3BzOiB7XG4gICAgICBjaGVja2VkOiB7XG4gICAgICAgIHR5cGU6IFtCb29sZWFuLCBTdHJpbmddLFxuICAgICAgICBkZWZhdWx0OiBmYWxzZVxuICAgICAgfSxcbiAgICAgIGRpc2FibGVkOiB7XG4gICAgICAgIHR5cGU6IFtCb29sZWFuLCBTdHJpbmddLFxuICAgICAgICBkZWZhdWx0OiBmYWxzZVxuICAgICAgfSxcbiAgICAgIC8vIEJvcmRlciBjb2xvciAgd2hlbiB0aGUgc3dpdGNoIGlzIHR1cm5lZCBvZmZcbiAgICAgIHRpbnRDb2xvcjogU3RyaW5nLFxuICAgICAgLy8gQmFja2dyb3VuZCBjb2xvciB3aGVuIHRoZSBzd2l0Y2ggaXMgdHVybmVkIG9uLlxuICAgICAgb25UaW50Q29sb3I6IFN0cmluZyxcbiAgICAgIC8vIENvbG9yIG9mIHRoZSBmb3JlZ3JvdW5kIHN3aXRjaCBncmlwLlxuICAgICAgdGh1bWJUaW50Q29sb3I6IFN0cmluZ1xuICAgIH0sXG4gICAgZGF0YSAoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpc0NoZWNrZWQ6ICh0aGlzLmNoZWNrZWQgIT09ICdmYWxzZScgJiYgdGhpcy5jaGVja2VkICE9PSBmYWxzZSksXG4gICAgICAgIGlzRGlzYWJsZWQ6ICh0aGlzLmRpc2FibGVkICE9PSAnZmFsc2UnICYmIHRoaXMuZGlzYWJsZWQgIT09IGZhbHNlKVxuICAgICAgfVxuICAgIH0sXG4gICAgY29tcHV0ZWQ6IHtcbiAgICAgIHdyYXBwZXJDbGFzcyAoKSB7XG4gICAgICAgIGNvbnN0IGNsYXNzQXJyYXkgPSBbJ3dlZXgtZWwnLCAnd2VleC1zd2l0Y2gnXVxuICAgICAgICB0aGlzLmlzQ2hlY2tlZCAmJiBjbGFzc0FycmF5LnB1c2goJ3dlZXgtc3dpdGNoLWNoZWNrZWQnKVxuICAgICAgICB0aGlzLmlzRGlzYWJsZWQgJiYgY2xhc3NBcnJheS5wdXNoKCd3ZWV4LXN3aXRjaC1kaXNhYmxlZCcpXG4gICAgICAgIHJldHVybiBjbGFzc0FycmF5LmpvaW4oJyAnKVxuICAgICAgfSxcbiAgICAgIG1lcmdlU3R5bGUgKCkge1xuICAgICAgICBjb25zdCBzdHlsZSA9IGV4dHJhY3RDb21wb25lbnRTdHlsZSh0aGlzKVxuICAgICAgICBjb25zdCB7IHRpbnRDb2xvciwgb25UaW50Q29sb3IsIGlzQ2hlY2tlZCwgaXNEaXNhYmxlZCB9ID0gdGhpc1xuXG4gICAgICAgIGlmICghaXNDaGVja2VkICYmIHRpbnRDb2xvcikge1xuICAgICAgICAgIE9iamVjdC5hc3NpZ24oc3R5bGUsIHtcbiAgICAgICAgICAgIGJvcmRlckNvbG9yOiB0aW50Q29sb3IsXG4gICAgICAgICAgICBib3hTaGFkb3c6IGAke3RpbnRDb2xvcn0gMCAwIDAgMCBpbnNldGBcbiAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzQ2hlY2tlZCAmJiBvblRpbnRDb2xvcikge1xuICAgICAgICAgIE9iamVjdC5hc3NpZ24oc3R5bGUsIHtcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogb25UaW50Q29sb3IsXG4gICAgICAgICAgICBjb2xvcjogb25UaW50Q29sb3IsXG4gICAgICAgICAgICBib3JkZXJDb2xvcjogb25UaW50Q29sb3IsXG4gICAgICAgICAgICBib3hTaGFkb3c6IGAke29uVGludENvbG9yfSAwIDAgMCAwLjUzMzMzM3JlbSBpbnNldGBcbiAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgaXNEaXNhYmxlZCAmJiBPYmplY3QuYXNzaWduKHN0eWxlLCB7XG4gICAgICAgICAgb3BhY2l0eTogMC4zXG4gICAgICAgIH0pXG5cbiAgICAgICAgcmV0dXJuIHN0eWxlXG4gICAgICB9LFxuICAgICAgc21hbGxTdHlsZSAoKSB7XG4gICAgICAgIGNvbnN0IHsgdGh1bWJUaW50Q29sb3IgfSA9IHRoaXNcbiAgICAgICAgbGV0IHNtYWxsU3R5bGUgPSB7fVxuXG4gICAgICAgIGlmICh0aHVtYlRpbnRDb2xvcikge1xuICAgICAgICAgIHNtYWxsU3R5bGUgPSB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiB0aHVtYlRpbnRDb2xvclxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc21hbGxTdHlsZVxuICAgICAgfVxuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgICAgdG9nZ2xlICgpIHtcbiAgICAgICAgLy8gVE9ETzogaGFuZGxlIHRoZSBldmVudHNcbiAgICAgICAgaWYgKCF0aGlzLmlzRGlzYWJsZWQpIHtcbiAgICAgICAgICB0aGlzLmlzQ2hlY2tlZCA9ICF0aGlzLmlzQ2hlY2tlZFxuICAgICAgICAgIGRpc3BhdGNoTmF0aXZlRXZlbnQodGhpcy4kZWwsICdjaGFuZ2UnLCB7IHZhbHVlOiB0aGlzLmlzQ2hlY2tlZCB9KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIG1vdW50ZWQgKCkge1xuICAgICAgY29uc3QgZWwgPSB0aGlzLiRlbFxuICAgICAgaWYgKGVsICYmIGVsLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgIGlmICghdGhpcy5fcmVtb3ZlQ2xpY2tIYW5kbGVyKSB7XG4gICAgICAgICAgY29uc3QgaGFuZGxlciA9IGV2dCA9PiB7XG4gICAgICAgICAgICB0aGlzLnRvZ2dsZSgpXG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuX3JlbW92ZUNsaWNrSGFuZGxlciA9IGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIuYmluZChlbCwgJ3dlZXgkdGFwJywgaGFuZGxlcilcbiAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCd3ZWV4JHRhcCcsIGhhbmRsZXIpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYmVmb3JlRGVzdHJveSAoKSB7XG4gICAgICBjb25zdCBybSA9IHRoaXMuX3JlbW92ZUNsaWNrSGFuZGxlclxuICAgICAgaWYgKHJtKSB7XG4gICAgICAgIHJtKClcbiAgICAgICAgZGVsZXRlIHRoaXMuX3JlbW92ZUNsaWNrSGFuZGxlclxuICAgICAgfVxuICAgIH0sXG5cbiAgICByZW5kZXIgKGNyZWF0ZUVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50KCdzcGFuJywge1xuICAgICAgICBhdHRyczogeyAnd2VleC10eXBlJzogJ3N3aXRjaCcgfSxcbiAgICAgICAgc3RhdGljQ2xhc3M6IHRoaXMud3JhcHBlckNsYXNzLFxuICAgICAgICBzdGF0aWNTdHlsZTogdGhpcy5tZXJnZVN0eWxlXG4gICAgICB9LCBbY3JlYXRlRWxlbWVudCgnc21hbGwnLCB7XG4gICAgICAgIHN0YXRpY0NsYXNzOiAnd2VleC1zd2l0Y2gtaW5uZXInLFxuICAgICAgICBzdGF0aWNTdHlsZTogdGhpcy5zbWFsbFN0eWxlXG4gICAgICB9KV0pXG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaW5pdCAod2VleCkge1xuICAgIHdlZXgucmVnaXN0ZXJDb21wb25lbnQoJ3N3aXRjaCcsIGdldFN3aXRjaCh3ZWV4KSlcbiAgfVxufVxuIiwiLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmNvbnN0IERFRkFVTFRfT0ZGU0VUX0FDQ1VSQUNZID0gMTBcbmNvbnN0IERFRkFVTFRfTE9BRE1PUkVfT0ZGU0VUID0gMFxuXG5mdW5jdGlvbiBnZXRUaHJvdHRsZWRTY3JvbGwgKGNvbnRleHQpIHtcbiAgY29uc3Qgc2NhbGUgPSB3ZWV4LmNvbmZpZy5lbnYuc2NhbGVcbiAgaWYgKCFjb250ZXh0Ll90aHJvdHRsZVNjcm9sbCkge1xuICAgIGNvbnN0IHdyYXBwZXIgPSBjb250ZXh0LiRyZWZzLndyYXBwZXJcbiAgICBjb25zdCBpbm5lciA9IGNvbnRleHQuJHJlZnMuaW5uZXJcbiAgICBsZXQgcHJlT2Zmc2V0ID0gKGNvbnRleHQuc2Nyb2xsRGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCdcbiAgICAgID8gd3JhcHBlci5zY3JvbGxMZWZ0XG4gICAgICA6IHdyYXBwZXIuc2Nyb2xsVG9wKVxuICAgICAgfHwgMFxuICAgIGNvbnRleHQuX3Rocm90dGxlU2Nyb2xsID0gd2VleC51dGlscy50aHJvdHRsZShmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICBjb25zdCBvZmZzZXQgPSBjb250ZXh0LnNjcm9sbERpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnXG4gICAgICAgID8gd3JhcHBlci5zY3JvbGxMZWZ0XG4gICAgICAgIDogd3JhcHBlci5zY3JvbGxUb3BcbiAgICAgIGNvbnN0IGluZGVudCA9IHBhcnNlSW50KGNvbnRleHQub2Zmc2V0QWNjdXJhY3kpICogc2NhbGVcbiAgICAgIGZ1bmN0aW9uIHRyaWdnZXJTY3JvbGwgKCkge1xuICAgICAgICBjb25zdCByZWN0ID0gaW5uZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICAgICAgY29uc3QgZXZ0T2JqID0ge1xuICAgICAgICAgIGNvbnRlbnRTaXplOiB7IHdpZHRoOiByZWN0LndpZHRoLCBoZWlnaHQ6IHJlY3QuaGVpZ2h0IH0sXG4gICAgICAgICAgY29udGVudE9mZnNldDoge1xuICAgICAgICAgICAgeDogd3JhcHBlci5zY3JvbGxMZWZ0LFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBwb3NpdGl2ZSBkaXJlY2l0b24gZm9yIHktYXhpcyBpcyBkb3duLlxuICAgICAgICAgICAgICogc28gc2hvdWxkIHVzZSBuZWdhdGl2ZSBvcGVyYXRpb24gb24gc2Nyb2xsVG9wLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqICAoMCwwKS0tLS0tLS0tLS0tLS0tLT4geFxuICAgICAgICAgICAgICogICAgICAgfFxuICAgICAgICAgICAgICogICAgICAgfFxuICAgICAgICAgICAgICogICAgICAgfFxuICAgICAgICAgICAgICogICAgICAgfFxuICAgICAgICAgICAgICogICAgICAgdiB5XG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB5OiAtd3JhcHBlci5zY3JvbGxUb3BcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbnRleHQuJGVsKSB7XG4gICAgICAgICAgd2VleC51dGlscy5kaXNwYXRjaE5hdGl2ZUV2ZW50KGNvbnRleHQuJGVsLCAnd2VleCRzY3JvbGwnLCBldnRPYmopXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChNYXRoLmFicyhvZmZzZXQgLSBwcmVPZmZzZXQpID49IGluZGVudCkge1xuICAgICAgICB0cmlnZ2VyU2Nyb2xsKClcbiAgICAgICAgcHJlT2Zmc2V0ID0gb2Zmc2V0XG4gICAgICB9XG4gICAgfSwgMTYsIHRydWUpXG4gIH1cbiAgcmV0dXJuIGNvbnRleHQuX3Rocm90dGxlU2Nyb2xsXG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgcHJvcHM6IHtcbiAgICBsb2FkbW9yZW9mZnNldDoge1xuICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICAgIGRlZmF1bHQ6IERFRkFVTFRfTE9BRE1PUkVfT0ZGU0VULFxuICAgICAgdmFsaWRhdG9yICh2YWx1ZSkge1xuICAgICAgICBjb25zdCB2YWwgPSBwYXJzZUludCh2YWx1ZSlcbiAgICAgICAgcmV0dXJuICFpc05hTih2YWwpICYmIHZhbCA+PSBERUZBVUxUX0xPQURNT1JFX09GRlNFVFxuICAgICAgfVxuICAgIH0sXG5cbiAgICBvZmZzZXRBY2N1cmFjeToge1xuICAgICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICAgIGRlZmF1bHQ6IERFRkFVTFRfT0ZGU0VUX0FDQ1VSQUNZLFxuICAgICAgdmFsaWRhdG9yICh2YWx1ZSkge1xuICAgICAgICBjb25zdCB2YWwgPSBwYXJzZUludCh2YWx1ZSlcbiAgICAgICAgcmV0dXJuICFpc05hTih2YWwpICYmIHZhbCA+PSBERUZBVUxUX09GRlNFVF9BQ0NVUkFDWVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBjcmVhdGVkICgpIHtcbiAgICAvLyBzaG91bGQgY2FsbCByZXNldExvYWRtb3JlKCkgdG8gZW5hYmxlIGxvYWRtb3JlIGV2ZW50LlxuICAgIHRoaXMuX2xvYWRtb3JlUmVzZXQgPSB0cnVlXG4gIH0sXG5cbiAgbW91bnRlZCAoKSB7XG4gICAgdGhpcy5yZWxvYWRTdGlja3lDaGlsZHJlbigpXG4gIH0sXG5cbiAgdXBkYXRlZCAoKSB7XG4gICAgdGhpcy5yZWxvYWRTdGlja3lDaGlsZHJlbigpXG4gIH0sXG5cbiAgbWV0aG9kczoge1xuICAgIHVwZGF0ZUxheW91dCAoKSB7XG4gICAgICBjb25zdCB3cmFwcGVyID0gdGhpcy4kcmVmcy53cmFwcGVyXG4gICAgICBpZiAod3JhcHBlcikge1xuICAgICAgICBjb25zdCByZWN0ID0gd3JhcHBlci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgICAgICB0aGlzLl93cmFwcGVyV2lkdGggPSByZWN0LndpZHRoXG4gICAgICAgIHRoaXMuX3dyYXBwZXJIZWlnaHQgPSByZWN0LmhlaWdodFxuICAgICAgfVxuICAgICAgY29uc3QgaW5uZXIgPSB0aGlzLiRyZWZzLmlubmVyXG4gICAgICBjb25zdCBjaGlsZHJlbiA9IGlubmVyICYmIGlubmVyLmNoaWxkcmVuXG4gICAgICBpZiAoaW5uZXIpIHtcbiAgICAgICAgY29uc3QgcmVjdCA9IGlubmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgICAgIHRoaXMuX2lubmVyV2lkdGggPSByZWN0LndpZHRoXG4gICAgICAgIHRoaXMuX2lubmVySGVpZ2h0ID0gcmVjdC5oZWlnaHRcbiAgICAgIH1cbiAgICAgIGNvbnN0IGxvYWRpbmdFbCA9IHRoaXMuX2xvYWRpbmcgJiYgdGhpcy5fbG9hZGluZy4kZWxcbiAgICAgIGNvbnN0IHJlZnJlc2hFbCA9IHRoaXMuX3JlZnJlc2ggJiYgdGhpcy5fcmVmcmVzaC4kZWxcbiAgICAgIGlmIChsb2FkaW5nRWwpIHtcbiAgICAgICAgdGhpcy5faW5uZXJIZWlnaHQgLT0gbG9hZGluZ0VsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodFxuICAgICAgfVxuICAgICAgaWYgKHJlZnJlc2hFbCkge1xuICAgICAgICB0aGlzLl9pbm5lckhlaWdodCAtPSByZWZyZXNoRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0XG4gICAgICB9XG4gICAgICAvLyBpbm5lciB3aWR0aCBpcyBhbHdheXMgdGhlIHZpZXdwb3J0IHdpZHRoIHNvbWVob3cgaW4gaG9yaXpvbnRhbFxuICAgICAgLy8gc2NvbGxlciwgdGhlcmVmb3JlIHRoZSBpbm5lciB3aWR0aCBzaG91bGQgYmUgcmVjbGFjdWxhdGVkLlxuICAgICAgaWYgKHRoaXMuc2Nyb2xsRGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcgJiYgY2hpbGRyZW4pIHtcbiAgICAgICAgdGhpcy5faW5uZXJXaWR0aCA9IHdlZXgudXRpbHMuZ2V0UmFuZ2VXaWR0aChpbm5lcilcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVzZXRMb2FkbW9yZSAoKSB7XG4gICAgICB0aGlzLl9sb2FkbW9yZVJlc2V0ID0gdHJ1ZVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBwcm9jZXNzIHN0aWNreSBjaGlsZHJlbiBpbiBzY3JvbGxhYmxlIGNvbXBvbmVudHMuXG4gICAgICogY3VycmVudCBvbmx5IHN1cHBvcnQgbGlzdCBhbmQgdmVydGljYWwgc2Nyb2xsZXIuXG4gICAgICovXG4gICAgcHJvY2Vzc1N0aWNreSAoKSB7XG4gICAgICAvKipcbiAgICAgICAqIGN1cnJlbnQgYnJvd3NlciBzdXBwb3J0ICdzdGlja3knIG9yICctd2Via2l0LXN0aWNreScsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAgICAgICogdG8gZG8gZnVydGhlciBtb3JlLlxuICAgICAgICovXG4gICAgICBjb25zdCBzdGlja3lDaGlsZHJlbiA9IHRoaXMuX3N0aWNreUNoaWxkcmVuXG4gICAgICBjb25zdCBsZW4gPSBzdGlja3lDaGlsZHJlbiAmJiBzdGlja3lDaGlsZHJlbi5sZW5ndGggfHwgMFxuICAgICAgaWYgKGxlbiA8PSAwKSB7IHJldHVybiB9XG5cbiAgICAgIGNvbnN0IG9yaWdTdGlja3kgPSB3ZWV4LnV0aWxzLnN1cHBvcnRTdGlja3koKVxuICAgICAgLy8gY3VycmVudCBvbmx5IHN1cHBvcnQgbGlzdCBhbmQgdmVydGljYWwgc2Nyb2xsZXIuXG4gICAgICBpZiAodGhpcy5zY3JvbGxEaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy4kZWxcbiAgICAgIGlmICghY29udGFpbmVyKSB7IHJldHVybiB9XG4gICAgICBjb25zdCBzY3JvbGxUb3AgPSBjb250YWluZXIuc2Nyb2xsVG9wXG5cbiAgICAgIGxldCBzdGlja3lDaGlsZFxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBzdGlja3lDaGlsZCA9IHN0aWNreUNoaWxkcmVuW2ldXG4gICAgICAgIGlmIChvcmlnU3RpY2t5KSB7XG4gICAgICAgICAgdGhpcy5hZGRTdGlja3koc3RpY2t5Q2hpbGQsIG9yaWdTdGlja3kpXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc3RpY2t5Q2hpbGQuX2luaXRPZmZzZXRUb3AgPCBzY3JvbGxUb3ApIHtcbiAgICAgICAgICB0aGlzLmFkZFN0aWNreShzdGlja3lDaGlsZClcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB0aGlzLnJlbW92ZVN0aWNreShzdGlja3lDaGlsZClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhZGRTdGlja3kgKGVsLCBzdXBwb3J0U3RpY2t5KSB7XG4gICAgICBpZiAoc3VwcG9ydFN0aWNreSkge1xuICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKCd3ZWV4LWlvcy1zdGlja3knKVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGlmIChlbC5fc3RpY2t5ID09PSB0cnVlKSByZXR1cm5cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhgW3Z1ZS1yZW5kZXJdIGhlYWRlciBhZGQgc3RpY2t5YCwgZWwpXG4gICAgICAgIH1cbiAgICAgICAgZWwuX3N0aWNreSA9IHRydWVcbiAgICAgICAgaWYgKCFlbC5fcGxhY2Vob2xkZXIpIHtcbiAgICAgICAgICBjb25zdCBwbGFjZWhvbGRlciA9IGVsLmNsb25lTm9kZSh0cnVlKVxuICAgICAgICAgIHBsYWNlaG9sZGVyLl9vcmlnTm9kZSA9IGVsXG4gICAgICAgICAgcGxhY2Vob2xkZXIuY2xhc3NMaXN0LmFkZCgnd2VleC1zdGlja3ktcGxhY2Vob2xkZXInKVxuICAgICAgICAgIGVsLl9wbGFjZWhvbGRlciA9IHBsYWNlaG9sZGVyXG4gICAgICAgIH1cbiAgICAgICAgZWwucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZWwuX3BsYWNlaG9sZGVyLCBlbClcbiAgICAgICAgZWwuc3R5bGUud2lkdGggPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCkud2lkdGhcbiAgICAgICAgZWwuY2xhc3NMaXN0LmFkZCgnd2VleC1zdGlja3knKVxuICAgICAgfVxuICAgIH0sXG5cbiAgICByZW1vdmVTdGlja3kgKGVsKSB7XG4gICAgICBpZiAoXG4gICAgICAgIHR5cGVvZiBlbC5fc3RpY2t5ID09PSAndW5kZWZpbmVkJ1xuICAgICAgICB8fCBlbC5fc3RpY2t5ID09PSBmYWxzZVxuICAgICAgKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgY29uc29sZS5sb2coYFt2dWUtcmVuZGVyXSBoZWFkZXIgcmVtb3ZlIHN0aWNreWAsIGVsKVxuICAgICAgfVxuICAgICAgZWwuX3N0aWNreSA9IGZhbHNlXG4gICAgICBlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsLl9wbGFjZWhvbGRlcilcbiAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoJ3dlZXgtc3RpY2t5JylcbiAgICB9LFxuXG4gICAgcmVsb2FkU3RpY2t5Q2hpbGRyZW4gKCkge1xuICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy4kZWxcbiAgICAgIGlmICghY29udGFpbmVyKSByZXR1cm5cbiAgICAgIGNvbnN0IHN0aWNreUNoaWxkcmVuID0gW11cbiAgICAgIGNvbnN0IGNoaWxkcmVuID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tzdGlja3ldJylcbiAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5baV1cbiAgICAgICAgaWYgKC93ZWV4LXN0aWNreS1wbGFjZWhvbGRlci8udGVzdChjaGlsZC5jbGFzc05hbWUpKSB7ICAvLyBpcyBhIHBsYWNlaG9sZGVyLlxuICAgICAgICAgIGNvbnN0IG9yaWdOb2RlID0gY2hpbGQuX29yaWdOb2RlXG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgIW9yaWdOb2RlXG4gICAgICAgICAgICB8fCAhb3JpZ05vZGUucGFyZW50Tm9kZVxuICAgICAgICAgICAgfHwgb3JpZ05vZGUucGFyZW50Tm9kZSAhPT0gY2hpbGQucGFyZW50Tm9kZVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgY2hpbGQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjaGlsZClcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7ICAvLyBpcyBhIHN0aWNreSBub2RlLlxuICAgICAgICAgIHN0aWNreUNoaWxkcmVuLnB1c2goY2hpbGQpXG4gICAgICAgICAgaWYgKCFjaGlsZC5fc3RpY2t5KSB7XG4gICAgICAgICAgICBjaGlsZC5faW5pdE9mZnNldFRvcCA9IGNoaWxkLm9mZnNldFRvcFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5fc3RpY2t5Q2hpbGRyZW4gPSBzdGlja3lDaGlsZHJlblxuICAgIH0sXG5cbiAgICBoYW5kbGVTY3JvbGwgKGV2ZW50KSB7XG4gICAgICB3ZWV4LnV0aWxzLmdldFRocm90dGxlTGF6eWxvYWQoMjUsIHRoaXMuJGVsLCAnc2Nyb2xsJykoKVxuICAgICAgZ2V0VGhyb3R0bGVkU2Nyb2xsKHRoaXMpKGV2ZW50KVxuXG4gICAgICB0aGlzLnByb2Nlc3NTdGlja3koKVxuXG4gICAgICAvLyBmaXJlIGxvYWRtb3JlIGV2ZW50LlxuICAgICAgY29uc3QgaW5uZXIgPSB0aGlzLiRyZWZzLmlubmVyXG4gICAgICBpZiAoaW5uZXIpIHtcbiAgICAgICAgY29uc3QgaW5uZXJMZW5ndGggPSB0aGlzLnNjcm9sbERpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnXG4gICAgICAgICAgPyB0aGlzLl9pbm5lcldpZHRoXG4gICAgICAgICAgOiB0aGlzLl9pbm5lckhlaWdodFxuICAgICAgICBpZiAoIXRoaXMuX2lubmVyTGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5faW5uZXJMZW5ndGggPSBpbm5lckxlbmd0aFxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9pbm5lckxlbmd0aCAhPT0gaW5uZXJMZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLl9pbm5lckxlbmd0aCA9IGlubmVyTGVuZ3RoXG4gICAgICAgICAgdGhpcy5fbG9hZG1vcmVSZXNldCA9IHRydWVcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fbG9hZG1vcmVSZXNldCAmJiB0aGlzLnJlYWNoQm90dG9tKHRoaXMubG9hZG1vcmVvZmZzZXQpKSB7XG4gICAgICAgICAgdGhpcy5fbG9hZG1vcmVSZXNldCA9IGZhbHNlXG4gICAgICAgICAgY29uc3QgZWwgPSB0aGlzLiRlbFxuICAgICAgICAgIGlmIChlbCkge1xuICAgICAgICAgICAgd2VleC51dGlscy5kaXNwYXRjaE5hdGl2ZUV2ZW50KGVsLCAnbG9hZG1vcmUnKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICByZWFjaFRvcCAoKSB7XG4gICAgICBjb25zdCB3cmFwcGVyID0gdGhpcy4kcmVmcy53cmFwcGVyXG4gICAgICByZXR1cm4gKCEhd3JhcHBlcikgJiYgKHdyYXBwZXIuc2Nyb2xsVG9wIDw9IDApXG4gICAgfSxcblxuICAgIHJlYWNoQm90dG9tIChvZmZzZXQpIHtcbiAgICAgIGNvbnN0IHdyYXBwZXIgPSB0aGlzLiRyZWZzLndyYXBwZXJcbiAgICAgIGNvbnN0IGlubmVyID0gdGhpcy4kcmVmcy5pbm5lclxuICAgICAgb2Zmc2V0ID0gcGFyc2VJbnQob2Zmc2V0IHx8IDApICogd2VleC5jb25maWcuZW52LnNjYWxlXG5cbiAgICAgIGlmICh3cmFwcGVyICYmIGlubmVyKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IHRoaXMuc2Nyb2xsRGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCdcbiAgICAgICAgICA/ICd3aWR0aCdcbiAgICAgICAgICA6ICdoZWlnaHQnXG4gICAgICAgIGNvbnN0IGlubmVyTGVuZ3RoID0gdGhpc1tgX2lubmVyJHtrZXlbMF0udG9VcHBlckNhc2UoKX0ke2tleS5zdWJzdHIoMSl9YF1cbiAgICAgICAgY29uc3Qgd3JhcHBlckxlbmd0aCA9IHRoaXNbYF93cmFwcGVyJHtrZXlbMF0udG9VcHBlckNhc2UoKX0ke2tleS5zdWJzdHIoMSl9YF1cbiAgICAgICAgY29uc3Qgc2Nyb2xsT2Zmc2V0ID0gdGhpcy5zY3JvbGxEaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJ1xuICAgICAgICAgID8gd3JhcHBlci5zY3JvbGxMZWZ0XG4gICAgICAgICAgOiB3cmFwcGVyLnNjcm9sbFRvcFxuICAgICAgICByZXR1cm4gc2Nyb2xsT2Zmc2V0ID49IGlubmVyTGVuZ3RoIC0gd3JhcHBlckxlbmd0aCAtIG9mZnNldFxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSxcblxuICAgIGhhbmRsZVRvdWNoU3RhcnQgKGV2ZW50KSB7XG4gICAgICBpZiAodGhpcy5fbG9hZGluZyB8fCB0aGlzLl9yZWZyZXNoKSB7XG4gICAgICAgIGNvbnN0IHRvdWNoID0gZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF1cbiAgICAgICAgdGhpcy5fdG91Y2hQYXJhbXMgPSB7XG4gICAgICAgICAgcmVhY2hUb3A6IHRoaXMucmVhY2hUb3AoKSxcbiAgICAgICAgICByZWFjaEJvdHRvbTogdGhpcy5yZWFjaEJvdHRvbSgpLFxuICAgICAgICAgIHN0YXJ0VG91Y2hFdmVudDogdG91Y2gsXG4gICAgICAgICAgc3RhcnRYOiB0b3VjaC5wYWdlWCxcbiAgICAgICAgICBzdGFydFk6IHRvdWNoLnBhZ2VZLFxuICAgICAgICAgIHRpbWVTdGFtcDogZXZlbnQudGltZVN0YW1wXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgaGFuZGxlVG91Y2hNb3ZlIChldmVudCkge1xuICAgICAgaWYgKCF0aGlzLl90b3VjaFBhcmFtcyB8fCAhdGhpcy5fcmVmcmVzaCAmJiAhdGhpcy5fbG9hZGluZykge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGNvbnN0IGlubmVyID0gdGhpcy4kcmVmcy5pbm5lclxuICAgICAgY29uc3QgeyBzdGFydFksIHJlYWNoVG9wLCByZWFjaEJvdHRvbSB9ID0gdGhpcy5fdG91Y2hQYXJhbXNcbiAgICAgIGlmIChpbm5lcikge1xuICAgICAgICBjb25zdCB0b3VjaCA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdXG4gICAgICAgIGNvbnN0IG9mZnNldFkgPSB0b3VjaC5wYWdlWSAtIHN0YXJ0WVxuICAgICAgICBjb25zdCBkaXIgPSBvZmZzZXRZID4gMCA/ICdkb3duJyA6ICd1cCdcbiAgICAgICAgdGhpcy5fdG91Y2hQYXJhbXMub2Zmc2V0WSA9IG9mZnNldFlcbiAgICAgICAgaWYgKHRoaXMuX3JlZnJlc2ggJiYgKGRpciA9PT0gJ2Rvd24nKSAmJiByZWFjaFRvcCkge1xuICAgICAgICAgIHRoaXMuX3JlZnJlc2gucHVsbGluZ0Rvd24ob2Zmc2V0WSlcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLl9sb2FkaW5nICYmIChkaXIgPT09ICd1cCcpICYmIHJlYWNoQm90dG9tKSB7XG4gICAgICAgICAgdGhpcy5fbG9hZGluZy5wdWxsaW5nVXAoLW9mZnNldFkpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgaGFuZGxlVG91Y2hFbmQgKGV2ZW50KSB7XG4gICAgICBpZiAoIXRoaXMuX3RvdWNoUGFyYW1zIHx8ICF0aGlzLl9yZWZyZXNoICYmICF0aGlzLl9sb2FkaW5nKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgY29uc3QgaW5uZXIgPSB0aGlzLiRyZWZzLmlubmVyXG4gICAgICBjb25zdCB7IHN0YXJ0WSwgcmVhY2hUb3AsIHJlYWNoQm90dG9tIH0gPSB0aGlzLl90b3VjaFBhcmFtc1xuICAgICAgaWYgKGlubmVyKSB7XG4gICAgICAgIGNvbnN0IHRvdWNoID0gZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF1cbiAgICAgICAgY29uc3Qgb2Zmc2V0WSA9IHRvdWNoLnBhZ2VZIC0gc3RhcnRZXG4gICAgICAgIGNvbnN0IGRpciA9IG9mZnNldFkgPiAwID8gJ2Rvd24nIDogJ3VwJ1xuICAgICAgICB0aGlzLl90b3VjaFBhcmFtcy5vZmZzZXRZID0gb2Zmc2V0WVxuICAgICAgICBpZiAodGhpcy5fcmVmcmVzaCAmJiAoZGlyID09PSAnZG93bicpICYmIHJlYWNoVG9wKSB7XG4gICAgICAgICAgdGhpcy5fcmVmcmVzaC5wdWxsaW5nRW5kKClcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLl9sb2FkaW5nICYmIChkaXIgPT09ICd1cCcpICYmIHJlYWNoQm90dG9tKSB7XG4gICAgICAgICAgdGhpcy5fbG9hZGluZy5wdWxsaW5nRW5kKClcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZGVsZXRlIHRoaXMuX3RvdWNoUGFyYW1zXG4gICAgfVxuICB9XG59XG4iLCIvKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHNjcm9sbGFibGUgZnJvbSAnLi9zY3JvbGxhYmxlJ1xuXG5leHBvcnQge1xuICBzY3JvbGxhYmxlXG59XG4iLCIvKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IHNjcm9sbGFibGUgfSBmcm9tICcuL21peGlucydcblxuZnVuY3Rpb24gZ2V0TGlzdCAod2VleCkge1xuICBjb25zdCB7XG4gICAgZXh0cmFjdENvbXBvbmVudFN0eWxlXG4gIH0gPSB3ZWV4XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnd2VleC1saXN0JyxcbiAgICBtaXhpbnM6IFtzY3JvbGxhYmxlXSxcbiAgICBjb21wdXRlZDoge1xuICAgICAgd3JhcHBlckNsYXNzICgpIHtcbiAgICAgICAgY29uc3QgY2xhc3NBcnJheSA9IFsnd2VleC1saXN0JywgJ3dlZXgtbGlzdC13cmFwcGVyJywgJ3dlZXgtY3QnXVxuICAgICAgICB0aGlzLl9yZWZyZXNoICYmIGNsYXNzQXJyYXkucHVzaCgnd2l0aC1yZWZyZXNoJylcbiAgICAgICAgdGhpcy5fbG9hZGluZyAmJiBjbGFzc0FycmF5LnB1c2goJ3dpdGgtbG9hZGluZycpXG4gICAgICAgIHJldHVybiBjbGFzc0FycmF5LmpvaW4oJyAnKVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG4gICAgICBjcmVhdGVDaGlsZHJlbiAoaCkge1xuICAgICAgICBjb25zdCBzbG90cyA9IHRoaXMuJHNsb3RzLmRlZmF1bHQgfHwgW11cbiAgICAgICAgdGhpcy5fY2VsbHMgPSBzbG90cy5maWx0ZXIodm5vZGUgPT4ge1xuICAgICAgICAgIGlmICghdm5vZGUudGFnICYmICF2bm9kZS5jb21wb25lbnRPcHRpb25zKSByZXR1cm4gZmFsc2VcbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgIGgoJ2FydGljbGUnLCB7XG4gICAgICAgICAgICByZWY6ICdpbm5lcicsXG4gICAgICAgICAgICBzdGF0aWNDbGFzczogJ3dlZXgtbGlzdC1pbm5lciB3ZWV4LWN0J1xuICAgICAgICAgIH0sIHRoaXMuX2NlbGxzKVxuICAgICAgICBdXG4gICAgICB9XG4gICAgfSxcblxuICAgIHJlbmRlciAoY3JlYXRlRWxlbWVudCkge1xuICAgICAgdGhpcy53ZWV4VHlwZSA9ICdsaXN0J1xuXG4gICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7XG4gICAgICAgIHRoaXMudXBkYXRlTGF5b3V0KClcbiAgICAgIH0pXG5cbiAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50KCdtYWluJywge1xuICAgICAgICByZWY6ICd3cmFwcGVyJyxcbiAgICAgICAgYXR0cnM6IHsgJ3dlZXgtdHlwZSc6ICdsaXN0JyB9LFxuICAgICAgICBzdGF0aWNDbGFzczogdGhpcy53cmFwcGVyQ2xhc3MsXG4gICAgICAgIG9uOiB7XG4gICAgICAgICAgc2Nyb2xsOiB0aGlzLmhhbmRsZVNjcm9sbCxcbiAgICAgICAgICB0b3VjaHN0YXJ0OiB0aGlzLmhhbmRsZVRvdWNoU3RhcnQsXG4gICAgICAgICAgdG91Y2htb3ZlOiB0aGlzLmhhbmRsZVRvdWNoTW92ZSxcbiAgICAgICAgICB0b3VjaGVuZDogdGhpcy5oYW5kbGVUb3VjaEVuZFxuICAgICAgICB9LFxuICAgICAgICBzdGF0aWNTdHlsZTogZXh0cmFjdENvbXBvbmVudFN0eWxlKHRoaXMpXG4gICAgICB9LCB0aGlzLmNyZWF0ZUNoaWxkcmVuKGNyZWF0ZUVsZW1lbnQpKVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGluaXQgKHdlZXgpIHtcbiAgICB3ZWV4LnJlZ2lzdGVyQ29tcG9uZW50KCdsaXN0JywgZ2V0TGlzdCh3ZWV4KSlcbiAgfVxufVxuIiwiLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IHNjcm9sbGFibGUgfSBmcm9tICcuL21peGlucydcblxuZnVuY3Rpb24gZ2V0U2Nyb2xsZXIgKHdlZXgpIHtcbiAgY29uc3Qge1xuICAgIGV4dHJhY3RDb21wb25lbnRTdHlsZVxuICB9ID0gd2VleFxuXG4gIHJldHVybiB7XG4gICAgbmFtZTogJ3dlZXgtc2Nyb2xsZXInLFxuICAgIG1peGluczogW3Njcm9sbGFibGVdLFxuICAgIHByb3BzOiB7XG4gICAgICBzY3JvbGxEaXJlY3Rpb246IHtcbiAgICAgICAgdHlwZTogW1N0cmluZ10sXG4gICAgICAgIGRlZmF1bHQ6ICd2ZXJ0aWNhbCcsXG4gICAgICAgIHZhbGlkYXRvciAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gWydob3Jpem9udGFsJywgJ3ZlcnRpY2FsJ10uaW5kZXhPZih2YWx1ZSkgIT09IC0xXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBzY3JvbGxhYmxlOiB7XG4gICAgICAgIHR5cGU6IFtCb29sZWFuXSxcbiAgICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgICAgfVxuICAgIH0sXG4gICAgY29tcHV0ZWQ6IHtcbiAgICAgIHdyYXBwZXJDbGFzcyAoKSB7XG4gICAgICAgIGNvbnN0IGNsYXNzQXJyYXkgPSBbJ3dlZXgtc2Nyb2xsZXInLCAnd2VleC1zY3JvbGxlci13cmFwcGVyJywgJ3dlZXgtY3QnXVxuICAgICAgICBpZiAodGhpcy5zY3JvbGxEaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICAgIGNsYXNzQXJyYXkucHVzaCgnd2VleC1zY3JvbGxlci1ob3Jpem9udGFsJylcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBjbGFzc0FycmF5LnB1c2goJ3dlZXgtc2Nyb2xsZXItdmVydGljYWwnKVxuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5zY3JvbGxhYmxlKSB7XG4gICAgICAgICAgY2xhc3NBcnJheS5wdXNoKCd3ZWV4LXNjcm9sbGVyLWRpc2FibGVkJylcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2xhc3NBcnJheS5qb2luKCcgJylcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgbWV0aG9kczoge1xuICAgICAgY3JlYXRlQ2hpbGRyZW4gKGgpIHtcbiAgICAgICAgY29uc3Qgc2xvdHMgPSB0aGlzLiRzbG90cy5kZWZhdWx0IHx8IFtdXG4gICAgICAgIHRoaXMuX2NlbGxzID0gc2xvdHMuZmlsdGVyKHZub2RlID0+IHtcbiAgICAgICAgICBpZiAoIXZub2RlLnRhZyAmJiAhdm5vZGUuY29tcG9uZW50T3B0aW9ucykgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICBoKCdhcnRpY2xlJywge1xuICAgICAgICAgICAgcmVmOiAnaW5uZXInLFxuICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICd3ZWV4LXNjcm9sbGVyLWlubmVyIHdlZXgtY3QnXG4gICAgICAgICAgfSwgdGhpcy5fY2VsbHMpXG4gICAgICAgIF1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVuZGVyIChjcmVhdGVFbGVtZW50KSB7XG4gICAgICB0aGlzLndlZXhUeXBlID0gJ3Njcm9sbGVyJ1xuXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgLy8gaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKSB7XG4gICAgICAvLyAgIHZhbGlkYXRlU3R5bGVzKCdzY3JvbGxlcicsIHRoaXMuJHZub2RlLmRhdGEgJiYgdGhpcy4kdm5vZGUuZGF0YS5zdGF0aWNTdHlsZSlcbiAgICAgIC8vIH1cblxuICAgICAgdGhpcy5fY2VsbHMgPSB0aGlzLiRzbG90cy5kZWZhdWx0IHx8IFtdXG4gICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7XG4gICAgICAgIHRoaXMudXBkYXRlTGF5b3V0KClcbiAgICAgIH0pXG5cbiAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50KCdtYWluJywge1xuICAgICAgICByZWY6ICd3cmFwcGVyJyxcbiAgICAgICAgYXR0cnM6IHsgJ3dlZXgtdHlwZSc6ICdzY3JvbGxlcicgfSxcbiAgICAgICAgb246IHtcbiAgICAgICAgICBzY3JvbGw6IHRoaXMuaGFuZGxlU2Nyb2xsLFxuICAgICAgICAgIHRvdWNoc3RhcnQ6IHRoaXMuaGFuZGxlVG91Y2hTdGFydCxcbiAgICAgICAgICB0b3VjaG1vdmU6IHRoaXMuaGFuZGxlVG91Y2hNb3ZlLFxuICAgICAgICAgIHRvdWNoZW5kOiB0aGlzLmhhbmRsZVRvdWNoRW5kXG4gICAgICAgIH0sXG4gICAgICAgIHN0YXRpY0NsYXNzOiB0aGlzLndyYXBwZXJDbGFzcyxcbiAgICAgICAgc3RhdGljU3R5bGU6IGV4dHJhY3RDb21wb25lbnRTdHlsZSh0aGlzKVxuICAgICAgfSwgdGhpcy5jcmVhdGVDaGlsZHJlbihjcmVhdGVFbGVtZW50KSlcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBpbml0ICh3ZWV4KSB7XG4gICAgd2VleC5yZWdpc3RlckNvbXBvbmVudCgnc2Nyb2xsZXInLCBnZXRTY3JvbGxlcih3ZWV4KSlcbiAgfVxufVxuIiwiLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCAgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgd2F0ZXJmYWxsXG4gKiBOT1RFOiBvbmx5IHN1cHBvcnQgZnVsbCBzY3JlZW4gd2lkdGggd2F0ZXJmYWxsLlxuICovXG5cbmltcG9ydCB7IHNjcm9sbGFibGUgfSBmcm9tICcuL21peGlucydcblxuY29uc3QgTk9STUFMX0dBUF9TSVpFID0gMzJcbmNvbnN0IERFRkFVTFRfQ09MVU1OX0NPVU5UID0gMVxuXG5mdW5jdGlvbiBnZXRXYXRlcmZhbGwgKHdlZXgpIHtcbiAgY29uc3Qge1xuICAgIGV4dHJhY3RDb21wb25lbnRTdHlsZVxuICB9ID0gd2VleFxuXG4gIHJldHVybiB7XG4gICAgbmFtZTogJ3dlZXgtd2F0ZXJmYWxsJyxcbiAgICBtaXhpbnM6IFtzY3JvbGxhYmxlXSxcbiAgICBwcm9wczoge1xuICAgICAgLyoqXG4gICAgICAgKiBzcGVjaWZpZWQgZ2FwIHNpemUuXG4gICAgICAgKiB2YWx1ZSBjYW4gYmUgbnVtYmVyIG9yICdub3JtYWwnLiAnbm9ybWFsJyAoMzJweCkgYnkgZGVmYXVsdC5cbiAgICAgICAqL1xuICAgICAgY29sdW1uR2FwOiB7XG4gICAgICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgICAgIGRlZmF1bHQ6ICdub3JtYWwnLFxuICAgICAgICB2YWxpZGF0b3IgKHZhbCkge1xuICAgICAgICAgIGlmICghdmFsIHx8IHZhbCA9PT0gJ25vcm1hbCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICAgIHZhbCA9IHBhcnNlSW50KHZhbClcbiAgICAgICAgICByZXR1cm4gIWlzTmFOKHZhbCkgJiYgdmFsID4gMFxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLyoqXG4gICAgICAgKiB0aGUgbWF4aW11bSBjb2x1bW4gY291bnRzLlxuICAgICAgICogdmFsdWUgY2FuIGJlIG51bWJlciBvciAnYXV0bycuIDEgYnkgZGVmYXVsdC5cbiAgICAgICAqL1xuICAgICAgY29sdW1uQ291bnQ6IHtcbiAgICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICAgICAgZGVmYXVsdDogREVGQVVMVF9DT0xVTU5fQ09VTlQsXG4gICAgICAgIHZhbGlkYXRvciAodmFsKSB7XG4gICAgICAgICAgdmFsID0gcGFyc2VJbnQodmFsKVxuICAgICAgICAgIHJldHVybiAhaXNOYU4odmFsKSAmJiB2YWwgPiAwXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvKipcbiAgICAgICAqIHRoZSBtaW1pbXVtIGNvbHVtbiB3aWR0aC5cbiAgICAgICAqIHZhbHVlIGNhbiBiZSBudW1iZXIgb3IgJ2F1dG8nLiAnYXV0bycgYnkgZGVmYXVsdC5cbiAgICAgICAqL1xuICAgICAgY29sdW1uV2lkdGg6IHtcbiAgICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICAgICAgZGVmYXVsdDogJ2F1dG8nLFxuICAgICAgICB2YWxpZGF0b3IgKHZhbCkge1xuICAgICAgICAgIGlmICghdmFsIHx8IHZhbCA9PT0gJ2F1dG8nKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgICB2YWwgPSBwYXJzZUludCh2YWwpXG4gICAgICAgICAgcmV0dXJuICFpc05hTih2YWwpICYmIHZhbCA+IDBcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBtb3VudGVkICgpIHtcbiAgICAgIHRoaXMuX25leHRUaWNrKClcbiAgICB9LFxuXG4gICAgdXBkYXRlZCAoKSB7XG4gICAgICB0aGlzLiRuZXh0VGljayh0aGlzLl9uZXh0VGljaygpKVxuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG4gICAgICBfY3JlYXRlQ2hpbGRyZW4gKGgsIHJvb3RTdHlsZSkge1xuICAgICAgICBjb25zdCBzbG90cyA9ICh0aGlzLiRzbG90cy5kZWZhdWx0IHx8IFtdKS5zbGljZSgpXG4gICAgICAgIHRoaXMuX2hlYWRlcnMgPSBbXVxuICAgICAgICB0aGlzLl9mb290ZXJzID0gW11cbiAgICAgICAgdGhpcy5fb3RoZXJzID0gW11cbiAgICAgICAgY29uc3QgbGVuID0gc2xvdHMubGVuZ3RoXG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIGNvbnN0IHZub2RlID0gc2xvdHNbaV1cbiAgICAgICAgICBjb25zdCB0YWcgPVxuICAgICAgICAgICAgdm5vZGUuY29tcG9uZW50T3B0aW9uc1xuICAgICAgICAgICAgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9ucy50YWdcbiAgICAgICAgICAgIHx8IHZub2RlLnRhZ1xuICAgICAgICAgIGlmICh0YWcgPT09ICdyZWZyZXNoJyB8fCB0YWcgPT09ICdsb2FkaW5nJykge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRhZyA9PT0gJ3NlY3Rpb24nKSB7ICAvLyBjZWxsXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodGFnID09PSAnaGVhZGVyJykge1xuICAgICAgICAgICAgdGhpcy5faGVhZGVycy5wdXNoKHZub2RlKVxuICAgICAgICAgICAgc2xvdHNbaV0gPSBudWxsIC8vIHNob3VsZCBub3QgaW5jbHVkZWQgaW4gZm9vdGVyLlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGkgPSBsZW4gLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIGNvbnN0IHZub2RlID0gc2xvdHNbaV1cbiAgICAgICAgICBpZiAoIXZub2RlKSB7IGNvbnRpbnVlIH0gIC8vIGFscmVhZHkgdGFrZW4gYnkgaGVhZGVyLlxuICAgICAgICAgIGNvbnN0IHRhZyA9XG4gICAgICAgICAgICB2bm9kZS5jb21wb25lbnRPcHRpb25zXG4gICAgICAgICAgICAmJiB2bm9kZS5jb21wb25lbnRPcHRpb25zLnRhZ1xuICAgICAgICAgICAgfHwgdm5vZGUudGFnXG4gICAgICAgICAgaWYgKHRhZyA9PT0gJ3JlZnJlc2gnIHx8IHRhZyA9PT0gJ2xvYWRpbmcnKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodGFnID09PSAnc2VjdGlvbicpIHsgLy8gY2VsbFxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRhZyA9PT0gJ2hlYWRlcicpIHtcbiAgICAgICAgICAgIHRoaXMuX2Zvb3RlcnMucHVzaCh2bm9kZSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9jZWxscyA9IHNsb3RzLmZpbHRlcih2bm9kZSA9PiB7XG4gICAgICAgICAgaWYgKCF2bm9kZSkgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgY29uc3QgY21wT3B0cyA9IHZub2RlLmNvbXBvbmVudE9wdGlvbnNcbiAgICAgICAgICBpZiAoIXZub2RlLnRhZyAmJiAhY21wT3B0cykgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgY29uc3QgdGFnID0gY21wT3B0cyAmJiBjbXBPcHRzLnRhZyB8fCB2bm9kZS50YWdcbiAgICAgICAgICBpZiAodGFnID09PSAncmVmcmVzaCcgfHwgdGFnID09PSAnbG9hZGluZycpIHtcbiAgICAgICAgICAgIHRoaXNbYF8ke3RhZ31gXSA9IHZub2RlXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRhZyAhPT0gJ3NlY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLl9vdGhlcnMucHVzaCh2bm9kZSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9KVxuXG4gICAgICAgIHRoaXMuX3JlQ2FsYyhyb290U3R5bGUpXG4gICAgICAgIHRoaXMuX2dlbkNvbHVtbnMoaClcbiAgICAgICAgbGV0IGNoaWxkcmVuID0gW11cbiAgICAgICAgdGhpcy5fcmVmcmVzaCAmJiBjaGlsZHJlbi5wdXNoKHRoaXMuX3JlZnJlc2gpXG4gICAgICAgIGNoaWxkcmVuID0gY2hpbGRyZW4uY29uY2F0KHRoaXMuX2hlYWRlcnMpXG4gICAgICAgIC8vIC5jb25jYXQodGhpcy5fb3RoZXJzKVxuICAgICAgICBjaGlsZHJlbi5wdXNoKGgoJ2h0bWw6ZGl2Jywge1xuICAgICAgICAgIHJlZjogJ2NvbHVtbnMnLFxuICAgICAgICAgIHN0YXRpY0NsYXNzOiAnd2VleC13YXRlcmZhbGwtaW5uZXItY29sdW1ucyB3ZWV4LWN0J1xuICAgICAgICB9LCB0aGlzLl9jb2x1bW5zKSlcbiAgICAgICAgY2hpbGRyZW4ucHVzaChoKCdodG1sOmRpdicsIHtcbiAgICAgICAgICByZWY6ICdmb290ZXJzJyxcbiAgICAgICAgICBzdGF0aWNDbGFzczogJ3dlZXgtd2F0ZXJmYWxsLWZvb3RlcnMgd2VleC1jdCdcbiAgICAgICAgfSwgdGhpcy5fZm9vdGVycykpXG4gICAgICAgIHRoaXMuX2xvYWRpbmcgJiYgY2hpbGRyZW4ucHVzaCh0aGlzLl9sb2FkaW5nKVxuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgIGgoJ2FydGljbGUnLCB7XG4gICAgICAgICAgICByZWY6ICdpbm5lcicsXG4gICAgICAgICAgICBzdGF0aWNDbGFzczogJ3dlZXgtd2F0ZXJmYWxsLWlubmVyIHdlZXgtY3QnXG4gICAgICAgICAgfSwgY2hpbGRyZW4pXG4gICAgICAgIF1cbiAgICAgIH0sXG5cbiAgICAgIF9yZUNhbGMgKHJvb3RTdHlsZSkge1xuICAgICAgICAvKipcbiAgICAgICAgICogTk9URTogY29sdW1uR2FwIGFuZCBjb2x1bW5XaWR0aCBjYW4ndCBib3RoIGJlIGF1dG8uXG4gICAgICAgICAqIE5PVEU6IHRoZSBmb3JtdWxhOlxuICAgICAgICAgKiAgdG90YWxXaWR0aCA9IG4gKiB3ICsgKG4gLSAxKSAqIGdhcFxuICAgICAgICAgKiAxLiBpZiBjb2x1bW5Db3VudCA9IG4gdGhlbiBjYWxjIHdcbiAgICAgICAgICogMi4gaWYgY29sdW1uV2lkdGggPSB3IHRoZW4gY2FsYyBuXG4gICAgICAgICAqIDMuIGlmIGNvbHVtbldpZHRoID0gdyBhbmQgY29sdW1uQ291bnQgPSBuIHRoZW4gY2FsYyB0b3RhbFdpZHRoXG4gICAgICAgICAqICAgIDMuMSBpZiB0b3RhbFdpZHRoIDwgY3RXaWR0aCB0aGVuIGluY3JlYXNlIGNvbHVtbldpZHRoXG4gICAgICAgICAqICAgIDMuMiBpZiB0b3RhbFdpZHRoID4gY3RXaWR0aCB0aGVuIGRlY3JlYXNlIGNvbHVtbkNvdW50XG4gICAgICAgICAqL1xuICAgICAgICBsZXQgd2lkdGgsIGdhcCwgY250LCBjdFdpZHRoXG4gICAgICAgIGNvbnN0IHNjYWxlID0gd2VleC5jb25maWcuZW52LnNjYWxlXG4gICAgICAgIGNvbnN0IGVsID0gdGhpcy4kZWxcbiAgICAgICAgZnVuY3Rpb24gZ2V0Q3RXaWR0aCAod2lkdGgsIHN0eWxlKSB7XG4gICAgICAgICAgY29uc3QgcGFkZGluZyA9IHN0eWxlLnBhZGRpbmdcbiAgICAgICAgICAgID8gcGFyc2VJbnQoc3R5bGUucGFkZGluZykgKiAyXG4gICAgICAgICAgICA6IHBhcnNlSW50KHN0eWxlLnBhZGRpbmdMZWZ0IHx8IDApICsgcGFyc2VJbnQoc3R5bGUucGFkZGluZ1JpZ2h0IHx8IDApXG4gICAgICAgICAgcmV0dXJuIHdpZHRoIC0gcGFkZGluZ1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbCAmJiBlbC5ub2RlVHlwZSA9PT0gMSkgeyAvLyBhbHJlYWR5IG1vdW50ZWRcbiAgICAgICAgICBjb25zdCBjc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbClcbiAgICAgICAgICBjdFdpZHRoID0gZ2V0Q3RXaWR0aChlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCwgY3N0eWxlKVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgeyAvLyBub3QgbW91bnRlZC5cbiAgICAgICAgICAvLyBvbmx5IHN1cHBvcnQgZnVsbCBzY3JlZW4gd2lkdGggZm9yIHdhdGVyZmFsbCBjb21wb25lbnQuXG4gICAgICAgICAgY3RXaWR0aCA9IGdldEN0V2lkdGgoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoLCByb290U3R5bGUpXG4gICAgICAgIH1cblxuICAgICAgICBnYXAgPSB0aGlzLmNvbHVtbkdhcFxuICAgICAgICBpZiAoZ2FwICYmIGdhcCAhPT0gJ25vcm1hbCcpIHtcbiAgICAgICAgICBnYXAgPSBwYXJzZUludChnYXApXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZ2FwID0gTk9STUFMX0dBUF9TSVpFXG4gICAgICAgIH1cbiAgICAgICAgZ2FwID0gZ2FwICogc2NhbGVcblxuICAgICAgICB3aWR0aCA9IHRoaXMuY29sdW1uV2lkdGhcbiAgICAgICAgY250ID0gdGhpcy5jb2x1bW5Db3VudFxuICAgICAgICBpZiAod2lkdGggJiYgd2lkdGggIT09ICdhdXRvJykge1xuICAgICAgICAgIHdpZHRoID0gcGFyc2VJbnQod2lkdGgpICogc2NhbGVcbiAgICAgICAgfVxuICAgICAgICBpZiAoY250ICYmIGNudCAhPT0gJ2F1dG8nKSB7XG4gICAgICAgICAgY250ID0gcGFyc2VJbnQoY250KVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gMC4gaWYgIWNvbHVtbkNvdW50ICYmICFjb2x1bW5XaWR0aFxuICAgICAgICBpZiAoY250ID09PSAnYXV0bycgJiYgd2lkdGggPT09ICdhdXRvJykge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGBbdnVlLXJlbmRlcl0gd2F0ZXJmYWxsJ3MgY29sdW1uV2lkdGggYW5kIGNvbHVtbkNvdW50IHNob3VsZG4ndGBcbiAgICAgICAgICAgICsgYCBib3RoIGJlIGF1dG8gYXQgdGhlIHNhbWUgdGltZS5gKVxuICAgICAgICAgICAgY250ID0gREVGQVVMVF9DT0xVTU5fQ09VTlRcbiAgICAgICAgICAgIHdpZHRoID0gY3RXaWR0aFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyAxLiBpZiBjb2x1bW5Db3VudCA9IG4gdGhlbiBjYWxjIHcuXG4gICAgICAgIGVsc2UgaWYgKGNudCAhPT0gJ2F1dG8nICYmIHdpZHRoID09PSAnYXV0bycpIHtcbiAgICAgICAgICB3aWR0aCA9IChjdFdpZHRoIC0gKGNudCAtIDEpICogZ2FwKSAvIGNudFxuICAgICAgICB9XG4gICAgICAgIC8vIDIuIGlmIGNvbHVtbldpZHRoID0gdyB0aGVuIGNhbGMgbi5cbiAgICAgICAgZWxzZSBpZiAoY250ID09PSAnYXV0bycgJiYgd2lkdGggIT09ICdhdXRvJykge1xuICAgICAgICAgIGNudCA9IChjdFdpZHRoICsgZ2FwKSAvICh3aWR0aCArIGdhcClcbiAgICAgICAgfVxuICAgICAgICAvLyAzLiBpZiBjb2x1bW5XaWR0aCA9IHcgYW5kIGNvbHVtbkNvdW50ID0gbiB0aGVuIGNhbGMgdG90YWxXaWR0aFxuICAgICAgICBlbHNlIGlmIChjbnQgIT09ICdhdXRvJyAmJiB3aWR0aCAhPT0gJ2F1dG8nKSB7XG4gICAgICAgICAgbGV0IHRvdGFsV2lkdGhcbiAgICAgICAgICBjb25zdCBhZGp1c3RDb3VudEFuZFdpZHRoID0gKCkgPT4ge1xuICAgICAgICAgICAgdG90YWxXaWR0aCA9IGNudCAqIHdpZHRoICsgKGNudCAtIDEpICogZ2FwXG4gICAgICAgICAgICBpZiAodG90YWxXaWR0aCA8IGN0V2lkdGgpIHtcbiAgICAgICAgICAgICAgd2lkdGggKz0gKGN0V2lkdGggLSB0b3RhbFdpZHRoKSAvIGNudFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodG90YWxXaWR0aCA+IGN0V2lkdGggJiYgY250ID4gMSkge1xuICAgICAgICAgICAgICBjbnQtLVxuICAgICAgICAgICAgICBhZGp1c3RDb3VudEFuZFdpZHRoKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRvdGFsV2lkdGggPiBjdFdpZHRoKSB7ICAvLyBjbnQgPT09IDFcbiAgICAgICAgICAgICAgd2lkdGggPSBjdFdpZHRoXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGFkanVzdENvdW50QW5kV2lkdGgoKVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2NvbHVtbkNvdW50ID0gY250XG4gICAgICAgIHRoaXMuX2NvbHVtbldpZHRoID0gd2lkdGhcbiAgICAgICAgdGhpcy5fY29sdW1uR2FwID0gZ2FwXG4gICAgICB9LFxuXG4gICAgICBfZ2VuQ29sdW1ucyAoY3JlYXRlRWxlbWVudCkge1xuICAgICAgICB0aGlzLl9jb2x1bW5zID0gW11cbiAgICAgICAgY29uc3QgY2VsbHMgPSB0aGlzLl9jZWxsc1xuICAgICAgICBjb25zdCBjb2x1bW5DbnQgPSB0aGlzLl9jb2x1bW5Db3VudFxuICAgICAgICBjb25zdCBsZW4gPSBjZWxscy5sZW5ndGhcbiAgICAgICAgY29uc3QgY29sdW1uQ2VsbHMgPSB0aGlzLl9jb2x1bW5DZWxscyA9IEFycmF5KGNvbHVtbkNudCkuam9pbignLicpLnNwbGl0KCcuJykubWFwKGZ1bmN0aW9uICgpIHsgcmV0dXJuIFtdIH0pXG4gICAgICAgIC8vIHNwcmVhZCBjZWxscyB0byB0aGUgY29sdW1ucyB1c2luZyBzaW1wb2xlIHBvbGxpbmcgYWxnb3JpdGhtLlxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgKGNlbGxzW2ldLmRhdGEuYXR0cnMgfHwgKGNlbGxzW2ldLmRhdGEuYXR0cnMgPSB7fSkpWydkYXRhLWNlbGwnXSA9IGlcbiAgICAgICAgICBjb2x1bW5DZWxsc1tpICUgY29sdW1uQ250XS5wdXNoKGNlbGxzW2ldKVxuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29sdW1uQ250OyBpKyspIHtcbiAgICAgICAgICB0aGlzLl9jb2x1bW5zLnB1c2goY3JlYXRlRWxlbWVudCgnaHRtbDpkaXYnLCB7XG4gICAgICAgICAgICByZWY6IGBjb2x1bW4ke2l9YCxcbiAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICdkYXRhLWNvbHVtbic6IGlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdGF0aWNDbGFzczogJ3dlZXgtY3QnLFxuICAgICAgICAgICAgc3RhdGljU3R5bGU6IHtcbiAgICAgICAgICAgICAgd2lkdGg6IHRoaXMuX2NvbHVtbldpZHRoICsgJ3B4JyxcbiAgICAgICAgICAgICAgbWFyZ2luTGVmdDogaSA9PT0gMCA/IDAgOiB0aGlzLl9jb2x1bW5HYXAgKyAncHgnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgY29sdW1uQ2VsbHNbaV0pKVxuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICBfbmV4dFRpY2sgKCkge1xuICAgICAgICB0aGlzLl9yZUxheW91dENoaWxkcmVuKClcbiAgICAgIH0sXG5cbiAgICAgIF9yZUxheW91dENoaWxkcmVuICgpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHRyZWF0IHRoZSBzaG9ydGVzdCBjb2x1bW4gYm90dG9tIGFzIHRoZSBtYXRjaCBzdGFuZGFyZC5cbiAgICAgICAgICogd2hpY2hldmVyIGNlbGwgZXhjZWVkZWQgaXQgd291bGQgYmUgcmVhcnJhbmdlZC5cbiAgICAgICAgICogMS4gbSA9IHNob3J0ZXN0IGNvbHVtbiBib3R0b20uXG4gICAgICAgICAqIDIuIGdldCBhbGwgY2VsbCBpZHMgd2hvIGlzIGJlbG93IG0uXG4gICAgICAgICAqIDMuIGNhbGN1bGF0ZSB3aGljaCBjZWxsIHNob3VsZCBiZSBpbiB3aGljaCBjb2x1bW4uXG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCBjb2x1bW5DbnQgPSB0aGlzLl9jb2x1bW5Db3VudFxuICAgICAgICBjb25zdCBjb2x1bW5Eb21zID0gW11cbiAgICAgICAgY29uc3QgY29sdW1uQXBwZW5kRnJhZ21lbnRzID0gW11cbiAgICAgICAgY29uc3QgY29sdW1uQm90dG9tcyA9IFtdXG4gICAgICAgIGxldCBtaW5Cb3R0b20gPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlxuICAgICAgICBsZXQgbWluQm90dG9tQ29sdW1uSW5kZXggPSAwXG5cbiAgICAgICAgLy8gMS4gZmluZCB0aGUgc2hvcnRlc3QgY29sdW1uIGJvdHRvbS5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb2x1bW5DbnQ7IGkrKykge1xuICAgICAgICAgIGNvbnN0IGNvbHVtbkRvbSA9IHRoaXMuX2NvbHVtbnNbaV0uZWxtXG4gICAgICAgICAgY29uc3QgbGFzdENoaWxkID0gY29sdW1uRG9tLmxhc3RFbGVtZW50Q2hpbGRcbiAgICAgICAgICBjb25zdCBib3R0b20gPSBsYXN0Q2hpbGQgPyBsYXN0Q2hpbGQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuYm90dG9tIDogMFxuICAgICAgICAgIGNvbHVtbkRvbXMucHVzaChjb2x1bW5Eb20pXG4gICAgICAgICAgY29sdW1uQm90dG9tc1tpXSA9IGJvdHRvbVxuICAgICAgICAgIGNvbHVtbkFwcGVuZEZyYWdtZW50cy5wdXNoKGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSlcbiAgICAgICAgICBpZiAoYm90dG9tIDwgbWluQm90dG9tKSB7XG4gICAgICAgICAgICBtaW5Cb3R0b20gPSBib3R0b21cbiAgICAgICAgICAgIG1pbkJvdHRvbUNvbHVtbkluZGV4ID0gaVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIDIuIGdldCBhbGwgY2VsbCBpZHMgd2hvIGlzIGJlbG93IG0uXG4gICAgICAgIGNvbnN0IGJlbG93Q2VsbElkcyA9IFtdXG4gICAgICAgIGNvbnN0IGJlbG93Q2VsbHMgPSB7fVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbHVtbkNudDsgaSsrKSB7XG4gICAgICAgICAgaWYgKGkgPT09IG1pbkJvdHRvbUNvbHVtbkluZGV4KSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBjb2x1bW5Eb20gPSBjb2x1bW5Eb21zW2ldXG4gICAgICAgICAgY29uc3QgY2VsbHNJbkNvbHVtbiA9IGNvbHVtbkRvbS5xdWVyeVNlbGVjdG9yQWxsKCdzZWN0aW9uLndlZXgtY2VsbCcpXG4gICAgICAgICAgY29uc3QgbGVuID0gY2VsbHNJbkNvbHVtbi5sZW5ndGhcbiAgICAgICAgICBmb3IgKGxldCBqID0gbGVuIC0gMTsgaiA+PSAwOyBqLS0pIHtcbiAgICAgICAgICAgIGNvbnN0IGNlbGxEb20gPSBjZWxsc0luQ29sdW1uW2pdXG4gICAgICAgICAgICBjb25zdCBjZWxsUmVjdCA9IGNlbGxEb20uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICAgICAgICAgIGlmIChjZWxsUmVjdC50b3AgPiBtaW5Cb3R0b20pIHtcbiAgICAgICAgICAgICAgY29uc3QgaWQgPSB+fmNlbGxEb20uZ2V0QXR0cmlidXRlKCdkYXRhLWNlbGwnKVxuICAgICAgICAgICAgICBiZWxvd0NlbGxJZHMucHVzaChpZClcbiAgICAgICAgICAgICAgYmVsb3dDZWxsc1tpZF0gPSB7IGVsbTogY2VsbERvbSwgaGVpZ2h0OiBjZWxsUmVjdC5oZWlnaHQgfVxuICAgICAgICAgICAgICBjb2x1bW5Cb3R0b21zW2ldIC09IGNlbGxSZWN0LmhlaWdodFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIDMuIGNhbGN1bGF0ZSB3aGljaCBjZWxsIHNob3VsZCBiZSBpbiB3aGljaCBjb2x1bW4gYW5kIHJlYXJyYW5nZSB0aGVtXG4gICAgICAgIC8vICBpbiB0aGUgZG9tIHRyZWUuXG4gICAgICAgIGJlbG93Q2VsbElkcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhID4gYiB9KVxuICAgICAgICBjb25zdCBjZWxsSWRzTGVuID0gYmVsb3dDZWxsSWRzLmxlbmd0aFxuICAgICAgICBmdW5jdGlvbiBhZGRUb1Nob3J0ZXN0Q29sdW1uIChiZWxvd0NlbGwpIHtcbiAgICAgICAgICAvLyBmaW5kIHNob3J0ZXN0IGJvdHRvbS5cbiAgICAgICAgICBtaW5Cb3R0b20gPSBNYXRoLm1pbiguLi5jb2x1bW5Cb3R0b21zKVxuICAgICAgICAgIG1pbkJvdHRvbUNvbHVtbkluZGV4ID0gY29sdW1uQm90dG9tcy5pbmRleE9mKG1pbkJvdHRvbSlcbiAgICAgICAgICBjb25zdCB7IGVsbTogY2VsbEVsbSwgaGVpZ2h0OiBjZWxsSGVpZ2h0IH0gPSBiZWxvd0NlbGxcbiAgICAgICAgICBjb2x1bW5BcHBlbmRGcmFnbWVudHNbbWluQm90dG9tQ29sdW1uSW5kZXhdLmFwcGVuZENoaWxkKGNlbGxFbG0pXG4gICAgICAgICAgY29sdW1uQm90dG9tc1ttaW5Cb3R0b21Db2x1bW5JbmRleF0gKz0gY2VsbEhlaWdodFxuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2VsbElkc0xlbjsgaSsrKSB7XG4gICAgICAgICAgYWRkVG9TaG9ydGVzdENvbHVtbihiZWxvd0NlbGxzW2JlbG93Q2VsbElkc1tpXV0pXG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb2x1bW5DbnQ7IGkrKykge1xuICAgICAgICAgIGNvbHVtbkRvbXNbaV0uYXBwZW5kQ2hpbGQoY29sdW1uQXBwZW5kRnJhZ21lbnRzW2ldKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHJlbmRlciAoY3JlYXRlRWxlbWVudCkge1xuICAgICAgdGhpcy53ZWV4VHlwZSA9ICd3YXRlcmZhbGwnXG4gICAgICB0aGlzLl9jZWxscyA9IHRoaXMuJHNsb3RzLmRlZmF1bHQgfHwgW11cbiAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgdGhpcy51cGRhdGVMYXlvdXQoKVxuICAgICAgfSlcbiAgICAgIGNvbnN0IG1lcmdlZFN0eWxlID0gZXh0cmFjdENvbXBvbmVudFN0eWxlKHRoaXMpXG4gICAgICByZXR1cm4gY3JlYXRlRWxlbWVudCgnbWFpbicsIHtcbiAgICAgICAgcmVmOiAnd3JhcHBlcicsXG4gICAgICAgIGF0dHJzOiB7ICd3ZWV4LXR5cGUnOiAnd2F0ZXJmYWxsJyB9LFxuICAgICAgICBvbjoge1xuICAgICAgICAgIHNjcm9sbDogdGhpcy5oYW5kbGVTY3JvbGwsXG4gICAgICAgICAgdG91Y2hzdGFydDogdGhpcy5oYW5kbGVUb3VjaFN0YXJ0LFxuICAgICAgICAgIHRvdWNobW92ZTogdGhpcy5oYW5kbGVUb3VjaE1vdmUsXG4gICAgICAgICAgdG91Y2hlbmQ6IHRoaXMuaGFuZGxlVG91Y2hFbmRcbiAgICAgICAgfSxcbiAgICAgICAgc3RhdGljQ2xhc3M6ICd3ZWV4LXdhdGVyZmFsbCB3ZWV4LXdhdGVyZmFsbC13cmFwcGVyIHdlZXgtY3QnLFxuICAgICAgICBzdGF0aWNTdHlsZTogbWVyZ2VkU3R5bGVcbiAgICAgIH0sIHRoaXMuX2NyZWF0ZUNoaWxkcmVuKGNyZWF0ZUVsZW1lbnQsIG1lcmdlZFN0eWxlKSlcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBpbml0ICh3ZWV4KSB7XG4gICAgd2VleC5yZWdpc3RlckNvbXBvbmVudCgnd2F0ZXJmYWxsJywgZ2V0V2F0ZXJmYWxsKHdlZXgpKVxuICB9XG59XG4iLCIvKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuZnVuY3Rpb24gZ2V0SGVhZGVyICh3ZWV4KSB7XG4gIGNvbnN0IHsgZXh0cmFjdENvbXBvbmVudFN0eWxlIH0gPSB3ZWV4XG5cbiAgcmV0dXJuIHtcbiAgICByZW5kZXIgKGNyZWF0ZUVsZW1lbnQpIHtcbiAgICAgIGNvbnN0IGF0dHJzID0gdGhpcy4kdm5vZGUuZGF0YS5hdHRyc1xuICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoJ2h0bWw6aGVhZGVyJywge1xuICAgICAgICBhdHRyczoge1xuICAgICAgICAgICd3ZWV4LXR5cGUnOiAnaGVhZGVyJyxcbiAgICAgICAgICBzdGlja3k6IChcbiAgICAgICAgICAgIHRoaXMuJHBhcmVudC53ZWV4VHlwZSA9PT0gJ3dhdGVyZmFsbCdcbiAgICAgICAgICAgICYmIHR5cGVvZiBhdHRycy5zdGlja3kgPT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgKSA/IHVuZGVmaW5lZCA6ICcnXG4gICAgICAgIH0sXG4gICAgICAgIHJlZjogJ2hlYWRlcicsXG4gICAgICAgIHN0YXRpY0NsYXNzOiAnd2VleC1oZWFkZXIgd2VleC1jdCcsXG4gICAgICAgIHN0YXRpY1N0eWxlOiBleHRyYWN0Q29tcG9uZW50U3R5bGUodGhpcylcbiAgICAgIH0sIHRoaXMuJHNsb3RzLmRlZmF1bHQpXG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaW5pdCAod2VleCkge1xuICAgIHdlZXgucmVnaXN0ZXJDb21wb25lbnQoJ2hlYWRlcicsIGdldEhlYWRlcih3ZWV4KSlcbiAgfVxufVxuIiwiLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmZ1bmN0aW9uIGdldExvYWRpbmcgKCkge1xuICBjb25zdCB7IGV4dHJhY3RDb21wb25lbnRTdHlsZSB9ID0gd2VleFxuICBjb25zdCB7IGRpc3BhdGNoTmF0aXZlRXZlbnQgfSA9IHdlZXgudXRpbHNcblxuICByZXR1cm4ge1xuICAgIG5hbWU6ICd3ZWV4LWxvYWRpbmcnLFxuICAgIHByb3BzOiB7XG4gICAgICBkaXNwbGF5OiB7XG4gICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgZGVmYXVsdDogJ3Nob3cnLFxuICAgICAgICB2YWxpZGF0b3IgKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIFsnc2hvdycsICdoaWRlJ10uaW5kZXhPZih2YWx1ZSkgIT09IC0xXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGRhdGEgKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaGVpZ2h0OiAtMSxcbiAgICAgICAgdmlld0hlaWdodDogMFxuICAgICAgfVxuICAgIH0sXG4gICAgbW91bnRlZCAoKSB7XG4gICAgICB0aGlzLnZpZXdIZWlnaHQgPSB0aGlzLiRlbC5vZmZzZXRIZWlnaHRcbiAgICAgIGlmICh0aGlzLmRpc3BsYXkgPT09ICdoaWRlJykge1xuICAgICAgICB0aGlzLmhlaWdodCA9IDBcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMudmlld0hlaWdodFxuICAgICAgfVxuICAgIH0sXG4gICAgd2F0Y2g6IHtcbiAgICAgIGhlaWdodCAodmFsKSB7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IGAke3ZhbH1weGBcbiAgICAgICAgdGhpcy4kZWwuc3R5bGUuaGVpZ2h0ID0gb2Zmc2V0XG4gICAgICAgIHRoaXMuJGVsLnN0eWxlLmJvdHRvbSA9IG9mZnNldFxuICAgICAgfSxcbiAgICAgIGRpc3BsYXkgKHZhbCkge1xuICAgICAgICBpZiAodmFsID09PSAnaGlkZScpIHtcbiAgICAgICAgICB0aGlzLmhlaWdodCA9IDBcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMudmlld0hlaWdodFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgICBwdWxsaW5nIChvZmZzZXRZID0gMCkge1xuICAgICAgICB0aGlzLmhlaWdodCA9IG9mZnNldFlcbiAgICAgIH0sXG4gICAgICBwdWxsaW5nVXAgKG9mZnNldFkpIHtcbiAgICAgICAgdGhpcy4kZWwuc3R5bGUudHJhbnNpdGlvbiA9IGBoZWlnaHQgMHNgXG4gICAgICAgIHRoaXMucHVsbGluZyhvZmZzZXRZKVxuICAgICAgfSxcbiAgICAgIHB1bGxpbmdFbmQgKCkge1xuICAgICAgICB0aGlzLiRlbCAmJiAodGhpcy4kZWwuc3R5bGUudHJhbnNpdGlvbiA9IGBoZWlnaHQgLjJzYClcbiAgICAgICAgaWYgKHRoaXMuaGVpZ2h0ID49IHRoaXMudmlld0hlaWdodCkge1xuICAgICAgICAgIHRoaXMucHVsbGluZyh0aGlzLnZpZXdIZWlnaHQpXG4gICAgICAgICAgaWYgKHRoaXMuJGVsKSB7XG4gICAgICAgICAgICBkaXNwYXRjaE5hdGl2ZUV2ZW50KHRoaXMuJGVsLCAnbG9hZGluZycpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHRoaXMucHVsbGluZygwKVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZ2V0Q2hpbGRyZW4gKCkge1xuICAgICAgICBjb25zdCBjaGlsZHJlbiA9IHRoaXMuJHNsb3RzLmRlZmF1bHQgfHwgW11cbiAgICAgICAgaWYgKHRoaXMuZGlzcGxheSA9PT0gJ3Nob3cnKSB7XG4gICAgICAgICAgcmV0dXJuIGNoaWxkcmVuXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNoaWxkcmVuLmZpbHRlcih2bm9kZSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHZub2RlLmNvbXBvbmVudE9wdGlvbnNcbiAgICAgICAgICAgICYmIHZub2RlLmNvbXBvbmVudE9wdGlvbnMudGFnICE9PSAnbG9hZGluZy1pbmRpY2F0b3InXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSxcbiAgICByZW5kZXIgKGNyZWF0ZUVsZW1lbnQpIHtcbiAgICAgIHRoaXMuJHBhcmVudC5fbG9hZGluZyA9IHRoaXNcbiAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50KCdhc2lkZScsIHtcbiAgICAgICAgcmVmOiAnbG9hZGluZycsXG4gICAgICAgIGF0dHJzOiB7ICd3ZWV4LXR5cGUnOiAnbG9hZGluZycgfSxcbiAgICAgICAgc3RhdGljQ2xhc3M6ICd3ZWV4LWxvYWRpbmcgd2VleC1jdCcsXG4gICAgICAgIHN0YXRpY1N0eWxlOiBleHRyYWN0Q29tcG9uZW50U3R5bGUodGhpcylcbiAgICAgIH0sIHRoaXMuZ2V0Q2hpbGRyZW4oKSlcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBpbml0ICh3ZWV4KSB7XG4gICAgd2VleC5yZWdpc3RlckNvbXBvbmVudCgnbG9hZGluZycsIGdldExvYWRpbmcod2VleCkpXG4gIH1cbn1cbiIsIi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5mdW5jdGlvbiBnZXRSZWZyZXNoICh3ZWV4KSB7XG4gIGNvbnN0IHsgZXh0cmFjdENvbXBvbmVudFN0eWxlIH0gPSB3ZWV4XG4gIGNvbnN0IHsgZGlzcGF0Y2hOYXRpdmVFdmVudCB9ID0gd2VleC51dGlsc1xuXG4gIHJldHVybiB7XG4gICAgbmFtZTogJ3dlZXgtcmVmcmVzaCcsXG4gICAgcHJvcHM6IHtcbiAgICAgIGRpc3BsYXk6IHtcbiAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICBkZWZhdWx0OiAnc2hvdycsXG4gICAgICAgIHZhbGlkYXRvciAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gWydzaG93JywgJ2hpZGUnXS5pbmRleE9mKHZhbHVlKSAhPT0gLTFcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgZGF0YSAoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsYXN0RHk6IDAsXG4gICAgICAgIHZpZXdIZWlnaHQ6IDAsXG4gICAgICAgIGhlaWdodDogLTFcbiAgICAgIH1cbiAgICB9LFxuICAgIG1vdW50ZWQgKCkge1xuICAgICAgdGhpcy52aWV3SGVpZ2h0ID0gdGhpcy4kZWwub2Zmc2V0SGVpZ2h0XG4gICAgICBpZiAodGhpcy5kaXNwbGF5ID09PSAnaGlkZScpIHtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSAwXG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLnZpZXdIZWlnaHRcbiAgICAgIH1cbiAgICB9LFxuICAgIHdhdGNoOiB7XG4gICAgICBoZWlnaHQgKHZhbCkge1xuICAgICAgICB0aGlzLiRlbC5zdHlsZS5oZWlnaHQgPSBgJHt2YWx9cHhgXG4gICAgICB9LFxuICAgICAgZGlzcGxheSAodmFsKSB7XG4gICAgICAgIGlmICh2YWwgPT09ICdoaWRlJykge1xuICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gMFxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy52aWV3SGVpZ2h0XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcbiAgICAgIHB1bGxpbmcgKG9mZnNldFkgPSAwKSB7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gb2Zmc2V0WVxuICAgICAgICBpZiAodGhpcy4kZWwpIHtcbiAgICAgICAgICBkaXNwYXRjaE5hdGl2ZUV2ZW50KHRoaXMuJGVsLCAncHVsbGluZ2Rvd24nLCB7XG4gICAgICAgICAgICBkeTogb2Zmc2V0WSAtIHRoaXMubGFzdER5LFxuICAgICAgICAgICAgcHVsbGluZ0Rpc3RhbmNlOiBvZmZzZXRZLFxuICAgICAgICAgICAgdmlld0hlaWdodDogdGhpcy52aWV3SGVpZ2h0XG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxhc3REeSA9IG9mZnNldFlcbiAgICAgIH0sXG4gICAgICBwdWxsaW5nRG93biAob2Zmc2V0WSkge1xuICAgICAgICB0aGlzLiRlbC5zdHlsZS50cmFuc2l0aW9uID0gYGhlaWdodCAwc2BcbiAgICAgICAgdGhpcy5wdWxsaW5nKG9mZnNldFkpXG4gICAgICB9LFxuICAgICAgcHVsbGluZ0VuZCAoKSB7XG4gICAgICAgIHRoaXMuJGVsICYmICh0aGlzLiRlbC5zdHlsZS50cmFuc2l0aW9uID0gYGhlaWdodCAuMnNgKVxuICAgICAgICBpZiAodGhpcy5oZWlnaHQgPj0gdGhpcy52aWV3SGVpZ2h0KSB7XG4gICAgICAgICAgdGhpcy5wdWxsaW5nKHRoaXMudmlld0hlaWdodClcbiAgICAgICAgICBpZiAodGhpcy4kZWwpIHtcbiAgICAgICAgICAgIGRpc3BhdGNoTmF0aXZlRXZlbnQodGhpcy4kZWwsICdyZWZyZXNoJylcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdGhpcy5wdWxsaW5nKDApXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBnZXRDaGlsZHJlbiAoKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkcmVuID0gdGhpcy4kc2xvdHMuZGVmYXVsdCB8fCBbXVxuICAgICAgICBpZiAodGhpcy5kaXNwbGF5ID09PSAnc2hvdycpIHtcbiAgICAgICAgICByZXR1cm4gY2hpbGRyZW5cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2hpbGRyZW4uZmlsdGVyKHZub2RlID0+IHtcbiAgICAgICAgICByZXR1cm4gdm5vZGUuY29tcG9uZW50T3B0aW9uc1xuICAgICAgICAgICAgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9ucy50YWcgIT09ICdsb2FkaW5nLWluZGljYXRvcidcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlbmRlciAoY3JlYXRlRWxlbWVudCkge1xuICAgICAgdGhpcy4kcGFyZW50Ll9yZWZyZXNoID0gdGhpc1xuICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoJ2FzaWRlJywge1xuICAgICAgICByZWY6ICdyZWZyZXNoJyxcbiAgICAgICAgYXR0cnM6IHsgJ3dlZXgtdHlwZSc6ICdyZWZyZXNoJyB9LFxuICAgICAgICBzdGF0aWNDbGFzczogJ3dlZXgtcmVmcmVzaCB3ZWV4LWN0JyxcbiAgICAgICAgc3RhdGljU3R5bGU6IGV4dHJhY3RDb21wb25lbnRTdHlsZSh0aGlzKVxuICAgICAgfSwgdGhpcy5nZXRDaGlsZHJlbigpKVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGluaXQgKHdlZXgpIHtcbiAgICB3ZWV4LnJlZ2lzdGVyQ29tcG9uZW50KCdyZWZyZXNoJywgZ2V0UmVmcmVzaCh3ZWV4KSlcbiAgfVxufVxuIiwiLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5sZXQgZXh0cmFjdENvbXBvbmVudFN0eWxlLCBnZXRSZ2IsIGxvb3BBcnJheSwgZ2V0U3R5bGVTaGVldEJ5SWRcblxuY29uc3QgX2NzcyA9IGBcbi53ZWV4LXJlZnJlc2gtaW5kaWNhdG9yLFxuLndlZXgtbG9hZGluZy1pbmRpY2F0b3Ige1xuICB3aWR0aDogMXJlbSAhaW1wb3J0YW50O1xuICBoZWlnaHQ6IDFyZW0gIWltcG9ydGFudDtcbiAgLXdlYmtpdC1ib3gtYWxpZ246IGNlbnRlcjtcbiAgLW1vei1ib3gtYWxpZ246IGNlbnRlcjtcbiAgLXdlYmtpdC1hbGlnbi1pdGVtczogY2VudGVyO1xuICAtbXMtZmxleC1hbGlnbjogY2VudGVyO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAtd2Via2l0LWJveC1wYWNrOiBjZW50ZXI7XG4gIC1tb3otYm94LXBhY2s6IGNlbnRlcjtcbiAgLXdlYmtpdC1qdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgLW1zLWZsZXgtcGFjazogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgb3ZlcmZsb3c6IHZpc2libGU7XG4gIGJhY2tncm91bmQ6IG5vbmU7XG59XG4ud2VleC1yZWZyZXNoLWluZGljYXRvcjpiZWZvcmUsXG4ud2VleC1sb2FkaW5nLWluZGljYXRvcjpiZWZvcmUge1xuICBkaXNwbGF5OiBibG9jaztcbiAgY29udGVudDogJyc7XG4gIGZvbnQtc2l6ZTogMC4xNnJlbTtcbiAgd2lkdGg6IDAuNWVtO1xuICBoZWlnaHQ6IDAuNWVtO1xuICBsZWZ0OiAwO1xuICB0b3A6IDA7XG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB0ZXh0LWluZGVudDogLTk5OTllbTtcbiAgLXdlYmtpdC1hbmltYXRpb246IHdlZXgtc3Bpbm5lciAxLjFzIGluZmluaXRlIGVhc2U7XG4gIC1tb3otYW5pbWF0aW9uOiB3ZWV4LXNwaW5uZXIgMS4xcyBpbmZpbml0ZSBlYXNlO1xuICBhbmltYXRpb246IHdlZXgtc3Bpbm5lciAxLjFzIGluZmluaXRlIGVhc2U7XG59XG5cbkAtd2Via2l0LWtleWZyYW1lcyB3ZWV4LXNwaW5uZXIge1xuICAwJSxcbiAgMTAwJSB7XG4gICAgYm94LXNoYWRvdzogMGVtIC0xLjNlbSAwZW0gMGVtICNmZmZmZmYsIDAuOWVtIC0wLjllbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIDEuMjVlbSAwZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpLCAwLjg3NWVtIDAuODc1ZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpLCAwZW0gMS4yNWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgLTAuOWVtIDAuOWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgLTEuM2VtIDBlbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSksIC0wLjllbSAtMC45ZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjcpO1xuICB9XG4gIDExLjI1JSB7XG4gICAgYm94LXNoYWRvdzogMGVtIC0xLjNlbSAwZW0gMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC43KSwgMC45ZW0gLTAuOWVtIDAgMGVtICNmZmZmZmYsIDEuMjVlbSAwZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpLCAwLjg3NWVtIDAuODc1ZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpLCAwZW0gMS4yNWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgLTAuOWVtIDAuOWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgLTEuM2VtIDBlbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIC0wLjllbSAtMC45ZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpO1xuICB9XG4gIDI1JSB7XG4gICAgYm94LXNoYWRvdzogMGVtIC0xLjNlbSAwZW0gMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KSwgMC45ZW0gLTAuOWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC43KSwgMS4yNWVtIDBlbSAwIDBlbSAjZmZmZmZmLCAwLjg3NWVtIDAuODc1ZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpLCAwZW0gMS4yNWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgLTAuOWVtIDAuOWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgLTEuM2VtIDBlbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIC0wLjllbSAtMC45ZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpO1xuICB9XG4gIDM3LjUlIHtcbiAgICBib3gtc2hhZG93OiAwZW0gLTEuM2VtIDBlbSAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpLCAwLjllbSAtMC45ZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpLCAxLjI1ZW0gMGVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC43KSwgMC44NzVlbSAwLjg3NWVtIDAgMGVtICNmZmZmZmYsIDBlbSAxLjI1ZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpLCAtMC45ZW0gMC45ZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpLCAtMS4zZW0gMGVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgLTAuOWVtIC0wLjllbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMik7XG4gIH1cbiAgNTAlIHtcbiAgICBib3gtc2hhZG93OiAwZW0gLTEuM2VtIDBlbSAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpLCAwLjllbSAtMC45ZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpLCAxLjI1ZW0gMGVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KSwgMC44NzVlbSAwLjg3NWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC43KSwgMGVtIDEuMjVlbSAwIDBlbSAjZmZmZmZmLCAtMC45ZW0gMC45ZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpLCAtMS4zZW0gMGVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgLTAuOWVtIC0wLjllbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMik7XG4gIH1cbiAgNjEuMjUlIHtcbiAgICBib3gtc2hhZG93OiAwZW0gLTEuM2VtIDBlbSAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpLCAwLjllbSAtMC45ZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpLCAxLjI1ZW0gMGVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgMC44NzVlbSAwLjg3NWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KSwgMGVtIDEuMjVlbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNyksIC0wLjllbSAwLjllbSAwIDBlbSAjZmZmZmZmLCAtMS4zZW0gMGVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgLTAuOWVtIC0wLjllbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMik7XG4gIH1cbiAgNzUlIHtcbiAgICBib3gtc2hhZG93OiAwZW0gLTEuM2VtIDBlbSAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpLCAwLjllbSAtMC45ZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpLCAxLjI1ZW0gMGVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgMC44NzVlbSAwLjg3NWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgMGVtIDEuMjVlbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSksIC0wLjllbSAwLjllbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNyksIC0xLjNlbSAwZW0gMCAwZW0gI2ZmZmZmZiwgLTAuOWVtIC0wLjllbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMik7XG4gIH1cbiAgODcuNSUge1xuICAgIGJveC1zaGFkb3c6IDBlbSAtMS4zZW0gMGVtIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIDAuOWVtIC0wLjllbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIDEuMjVlbSAwZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpLCAwLjg3NWVtIDAuODc1ZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpLCAwZW0gMS4yNWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgLTAuOWVtIDAuOWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KSwgLTEuM2VtIDBlbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNyksIC0wLjllbSAtMC45ZW0gMCAwZW0gI2ZmZmZmZjtcbiAgfVxufVxuXG5Aa2V5ZnJhbWVzIHdlZXgtc3Bpbm5lciB7XG4gIDAlLFxuICAxMDAlIHtcbiAgICBib3gtc2hhZG93OiAwZW0gLTEuM2VtIDBlbSAwZW0gI2ZmZmZmZiwgMC45ZW0gLTAuOWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgMS4yNWVtIDBlbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIDAuODc1ZW0gMC44NzVlbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIDBlbSAxLjI1ZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpLCAtMC45ZW0gMC45ZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpLCAtMS4zZW0gMGVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KSwgLTAuOWVtIC0wLjllbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNyk7XG4gIH1cbiAgMTEuMjUlIHtcbiAgICBib3gtc2hhZG93OiAwZW0gLTEuM2VtIDBlbSAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjcpLCAwLjllbSAtMC45ZW0gMCAwZW0gI2ZmZmZmZiwgMS4yNWVtIDBlbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIDAuODc1ZW0gMC44NzVlbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIDBlbSAxLjI1ZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpLCAtMC45ZW0gMC45ZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpLCAtMS4zZW0gMGVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgLTAuOWVtIC0wLjllbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSk7XG4gIH1cbiAgMjUlIHtcbiAgICBib3gtc2hhZG93OiAwZW0gLTEuM2VtIDBlbSAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpLCAwLjllbSAtMC45ZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjcpLCAxLjI1ZW0gMGVtIDAgMGVtICNmZmZmZmYsIDAuODc1ZW0gMC44NzVlbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIDBlbSAxLjI1ZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpLCAtMC45ZW0gMC45ZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpLCAtMS4zZW0gMGVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgLTAuOWVtIC0wLjllbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMik7XG4gIH1cbiAgMzcuNSUge1xuICAgIGJveC1zaGFkb3c6IDBlbSAtMS4zZW0gMGVtIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIDAuOWVtIC0wLjllbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSksIDEuMjVlbSAwZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjcpLCAwLjg3NWVtIDAuODc1ZW0gMCAwZW0gI2ZmZmZmZiwgMGVtIDEuMjVlbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIC0wLjllbSAwLjllbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIC0xLjNlbSAwZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpLCAtMC45ZW0gLTAuOWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKTtcbiAgfVxuICA1MCUge1xuICAgIGJveC1zaGFkb3c6IDBlbSAtMS4zZW0gMGVtIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIDAuOWVtIC0wLjllbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIDEuMjVlbSAwZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpLCAwLjg3NWVtIDAuODc1ZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjcpLCAwZW0gMS4yNWVtIDAgMGVtICNmZmZmZmYsIC0wLjllbSAwLjllbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIC0xLjNlbSAwZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpLCAtMC45ZW0gLTAuOWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKTtcbiAgfVxuICA2MS4yNSUge1xuICAgIGJveC1zaGFkb3c6IDBlbSAtMS4zZW0gMGVtIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIDAuOWVtIC0wLjllbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIDEuMjVlbSAwZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpLCAwLjg3NWVtIDAuODc1ZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpLCAwZW0gMS4yNWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC43KSwgLTAuOWVtIDAuOWVtIDAgMGVtICNmZmZmZmYsIC0xLjNlbSAwZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpLCAtMC45ZW0gLTAuOWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKTtcbiAgfVxuICA3NSUge1xuICAgIGJveC1zaGFkb3c6IDBlbSAtMS4zZW0gMGVtIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIDAuOWVtIC0wLjllbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIDEuMjVlbSAwZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpLCAwLjg3NWVtIDAuODc1ZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpLCAwZW0gMS4yNWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KSwgLTAuOWVtIDAuOWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC43KSwgLTEuM2VtIDBlbSAwIDBlbSAjZmZmZmZmLCAtMC45ZW0gLTAuOWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKTtcbiAgfVxuICA4Ny41JSB7XG4gICAgYm94LXNoYWRvdzogMGVtIC0xLjNlbSAwZW0gMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgMC45ZW0gLTAuOWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgMS4yNWVtIDBlbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIDAuODc1ZW0gMC44NzVlbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIDBlbSAxLjI1ZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpLCAtMC45ZW0gMC45ZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpLCAtMS4zZW0gMGVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC43KSwgLTAuOWVtIC0wLjllbSAwIDBlbSAjZmZmZmZmO1xuICB9XG59XG5gXG5cbmZ1bmN0aW9uIGdldFN0eWxlU2hlZXQgKHNwaW5uZXJWbSkge1xuICBpZiAoc3Bpbm5lclZtLl9zdHlsZVNoZWV0KSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgc3Bpbm5lclZtLl9zdHlsZVNoZWV0ID0gZ2V0U3R5bGVTaGVldEJ5SWQoJ3dlZXgtY21wLWxvYWRpbmctaW5kaWNhdG9yJylcbn1cblxuZnVuY3Rpb24gc2V0S2V5ZnJhbWVDb2xvciAoc3Bpbm5lclZtLCB2YWwpIHtcbiAgZ2V0U3R5bGVTaGVldChzcGlubmVyVm0pXG4gIGNvbnN0IGtleWZyYW1lUnVsZXMgPSBjb21wdXRlS2V5RnJhbWVSdWxlcyh2YWwpXG4gIGNvbnN0IHJ1bGVzID0gc3Bpbm5lclZtLl9zdHlsZVNoZWV0LnJ1bGVzIHx8IHNwaW5uZXJWbS5fc3R5bGVTaGVldC5jc3NSdWxlc1xuICBmb3IgKGxldCBpID0gMCwgbCA9IHJ1bGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGNvbnN0IGl0ZW0gPSBydWxlcy5pdGVtKGkpXG4gICAgaWYgKChpdGVtLnR5cGUgPT09IENTU1J1bGUuS0VZRlJBTUVTX1JVTEVcbiAgICAgICAgICB8fCBpdGVtLnR5cGUgPT09IENTU1J1bGUuV0VCS0lUX0tFWUZSQU1FU19SVUxFKVxuICAgICAgICAmJiBpdGVtLm5hbWUgPT09ICd3ZWV4LXNwaW5uZXInKSB7XG4gICAgICBjb25zdCBjc3NSdWxlcyA9IGl0ZW0uY3NzUnVsZXNcbiAgICAgIGZvciAobGV0IGogPSAwLCBtID0gY3NzUnVsZXMubGVuZ3RoOyBqIDwgbTsgaisrKSB7XG4gICAgICAgIGNvbnN0IGtleWZyYW1lID0gY3NzUnVsZXNbal1cbiAgICAgICAgaWYgKGtleWZyYW1lLnR5cGUgPT09IENTU1J1bGUuS0VZRlJBTUVfUlVMRVxuICAgICAgICAgIHx8IGtleWZyYW1lLnR5cGUgPT09IENTU1J1bGUuV0VCS0lUX0tFWUZSQU1FX1JVTEUpIHtcbiAgICAgICAgICBrZXlmcmFtZS5zdHlsZS5ib3hTaGFkb3cgPSBrZXlmcmFtZVJ1bGVzW2pdXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY29tcHV0ZUtleUZyYW1lUnVsZXMgKHJnYikge1xuICBpZiAoIXJnYikge1xuICAgIHJldHVyblxuICB9XG4gIGNvbnN0IHNjYWxlQXJyID0gW1xuICAgICcwZW0gLTEuM2VtIDBlbSAwZW0nLFxuICAgICcwLjllbSAtMC45ZW0gMCAwZW0nLFxuICAgICcxLjI1ZW0gMGVtIDAgMGVtJyxcbiAgICAnMC44NzVlbSAwLjg3NWVtIDAgMGVtJyxcbiAgICAnMGVtIDEuMjVlbSAwIDBlbScsXG4gICAgJy0wLjllbSAwLjllbSAwIDBlbScsXG4gICAgJy0xLjNlbSAwZW0gMCAwZW0nLFxuICAgICctMC45ZW0gLTAuOWVtIDAgMGVtJ11cbiAgY29uc3QgY29sb3JBcnIgPSBbXG4gICAgJzEnLFxuICAgICcwLjInLFxuICAgICcwLjInLFxuICAgICcwLjInLFxuICAgICcwLjInLFxuICAgICcwLjInLFxuICAgICcwLjUnLFxuICAgICcwLjcnXVxuICAgIC5tYXAoZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiAncmdiYSgnICsgcmdiLnIgKyAnLCcgKyByZ2IuZyArICcsJyArIHJnYi5iICsgJywnICsgZSArICcpJ1xuICAgIH0pXG4gIGNvbnN0IHJ1bGVzID0gW11cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzY2FsZUFyci5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHRtcENvbG9yQXJyID0gbG9vcEFycmF5KGNvbG9yQXJyLCBpLCAncicpXG4gICAgcnVsZXMucHVzaChzY2FsZUFyci5tYXAoZnVuY3Rpb24gKHNjYWxlU3RyLCBpKSB7XG4gICAgICByZXR1cm4gc2NhbGVTdHIgKyAnICcgKyB0bXBDb2xvckFycltpXVxuICAgIH0pLmpvaW4oJywgJykpXG4gIH1cbiAgcmV0dXJuIHJ1bGVzXG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NTdHlsZSAodm0pIHtcbiAgY29uc3Qgc3R5bGUgPSBleHRyYWN0Q29tcG9uZW50U3R5bGUodm0pXG4gIGNvbnN0IGNvbG9yID0gc3R5bGUuY29sb3JcbiAgY29uc3QgcmdiID0gY29sb3IgJiYgZ2V0UmdiKGNvbG9yKVxuICBpZiAocmdiKSB7XG4gICAgc2V0S2V5ZnJhbWVDb2xvcih2bSwgcmdiKVxuICB9XG4gIHJldHVybiBzdHlsZVxufVxuXG5jb25zdCBsb2FkaW5nSW5kaWNhdG9yID0ge1xuICBuYW1lOiAnd2VleC1sb2FkaW5nLWluZGljYXRvcicsXG4gIHJlbmRlciAoY3JlYXRlRWxlbWVudCkge1xuICAgIHRoaXMud2VleFR5cGUgPSAnbG9hZGluZy1pbmRpY2F0b3InXG4gICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoJ21hcmsnLCB7XG4gICAgICBhdHRyczogeyAnd2VleC10eXBlJzogJ2xvYWRpbmctaW5kaWNhdG9yJyB9LFxuICAgICAgc3RhdGljQ2xhc3M6ICd3ZWV4LWxvYWRpbmctaW5kaWNhdG9yIHdlZXgtY3QnLFxuICAgICAgc3RhdGljU3R5bGU6IHByb2Nlc3NTdHlsZSh0aGlzKVxuICAgIH0pXG4gIH0sXG4gIF9jc3Ncbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBpbml0ICh3ZWV4KSB7XG4gICAgZXh0cmFjdENvbXBvbmVudFN0eWxlID0gd2VleC5leHRyYWN0Q29tcG9uZW50U3R5bGVcbiAgICBnZXRSZ2IgPSB3ZWV4LnV0aWxzLmdldFJnYlxuICAgIGxvb3BBcnJheSA9IHdlZXgudXRpbHMubG9vcEFycmF5XG4gICAgZ2V0U3R5bGVTaGVldEJ5SWQgPSB3ZWV4LnV0aWxzLmdldFN0eWxlU2hlZXRCeUlkXG4gICAgd2VleC5yZWdpc3RlckNvbXBvbmVudCgnbG9hZGluZy1pbmRpY2F0b3InLCBsb2FkaW5nSW5kaWNhdG9yKVxuICB9XG59XG4iLCIvKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IGxpc3QgZnJvbSAnLi9saXN0J1xuaW1wb3J0IHNjcm9sbGVyIGZyb20gJy4vc2Nyb2xsZXInXG5pbXBvcnQgd2F0ZXJmYWxsIGZyb20gJy4vd2F0ZXJmYWxsJ1xuLy8gaW1wb3J0IGNlbGwgZnJvbSAnLi9jZWxsJ1xuaW1wb3J0IGhlYWRlciBmcm9tICcuL2hlYWRlcidcbmltcG9ydCBsb2FkaW5nIGZyb20gJy4vbG9hZGluZydcbmltcG9ydCByZWZyZXNoIGZyb20gJy4vcmVmcmVzaCdcbmltcG9ydCBsb2FkaW5nSW5kaWNhdG9yIGZyb20gJy4vbG9hZGluZy1pbmRpY2F0b3InXG5cbmltcG9ydCAnLi9zdHlsZS5jc3MnXG5cbmNvbnN0IG1vZHVsZXMgPSBbXG4gIGxpc3QsXG4gIHNjcm9sbGVyLFxuICB3YXRlcmZhbGwsXG4gIC8vIGNlbGwsXG4gIGhlYWRlcixcbiAgbG9hZGluZyxcbiAgcmVmcmVzaCxcbiAgbG9hZGluZ0luZGljYXRvclxuXVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGluaXQgKHdlZXgpIHtcbiAgICBtb2R1bGVzLmZvckVhY2goZnVuY3Rpb24gKG1vZCkge1xuICAgICAgd2VleC5pbnN0YWxsKG1vZClcbiAgICB9KVxuICB9XG59XG4iLCIvKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmNvbnN0IFRSQU5TSVRJT05fVElNRSA9IDQwMFxuY29uc3QgTkVJR0hCT1JfU0NBTEVfVElNRSA9IDEwMFxuY29uc3QgTUFJTl9TTElERV9PUEFDSVRZID0gMVxuY29uc3QgVEhST1RUTEVfU0NST0xMX1RJTUUgPSAyNVxuY29uc3QgSU5URVJWQUxfTUlOSU1VTSA9IDIwMFxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNyZWF0ZWQgKCkge1xuICAgIHRoaXMuX2Nsb25lcyA9IFtdXG4gICAgdGhpcy5pbm5lck9mZnNldCA9IDBcbiAgICB0aGlzLl9pbmRpY2F0b3IgPSBudWxsXG4gIH0sXG5cbiAgYmVmb3JlVXBkYXRlICgpIHtcbiAgICB0aGlzLl9nZXRXcmFwcGVyU2l6ZSgpXG4gIH0sXG5cbiAgdXBkYXRlZCAoKSB7XG4gICAgY29uc3QgY2hpbGRyZW4gPSB0aGlzLiRjaGlsZHJlblxuICAgIGNvbnN0IGxlbiA9IGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aFxuICAgIGlmIChjaGlsZHJlbiAmJiBsZW4gPiAwKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHZtID0gY2hpbGRyZW5baV1cbiAgICAgICAgaWYgKHZtLiRvcHRpb25zLl9jb21wb25lbnRUYWcgPT09ICdpbmRpY2F0b3InXG4gICAgICAgICAgfHwgdm0uJHZub2RlLmRhdGEucmVmID09PSAnaW5kaWNhdG9yJykge1xuICAgICAgICAgIHZtLl93YXRjaGVyLmdldCgpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGZyYW1lQ291bnQgPSB0aGlzLmZyYW1lQ291bnRcbiAgICBpZiAoIXRoaXMuX3ByZUZyYW1lQ291bnQpIHtcbiAgICAgIHRoaXMuX3ByZUZyYW1lQ291bnQgPSBmcmFtZUNvdW50XG4gICAgfVxuICAgIGVsc2UgaWYgKHRoaXMuX3ByZUZyYW1lQ291bnQgIT09IGZyYW1lQ291bnQpIHtcbiAgICAgIHRoaXMuX3Jlc2V0Tm9kZXMoKVxuICAgICAgdGhpcy5fcHJlRnJhbWVDb3VudCA9IGZyYW1lQ291bnRcbiAgICAgIGNvbnN0IHJlc2V0QmxhbmtGcmFtZSA9ICgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudEluZGV4ID49IGZyYW1lQ291bnQpIHtcbiAgICAgICAgICAvLyByZXNldCBibGFuayBwYWdlLlxuICAgICAgICAgIHRoaXMuX3N0b3BBdXRvUGxheSgpXG4gICAgICAgICAgdGhpcy5fc2xpZGVUbygwKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fc2xpZGluZykge1xuICAgICAgICAvLyBJZiBpdCdzIHNsaWRpbmcsIHRoZW4gdGhlIGN1cnJlbnRJbmRleCBpcyB0aGUgbGFzdCBmcmFtZS4gVGhlIGFjdHVhbCBjdXJyZW50SW5kZXhcbiAgICAgICAgLy8gc2hvdWxkIGJlIHRoZSBuZXh0IGluZGV4LlxuICAgICAgICAvLyBUaGF0IGlzIHRvIHNheSwgdGhpcyB1cGRhdGluZyBoYXBwZW5zIEJldHdlZW4gX3BhcmVwYXJlTm9kZXMgYW5kIF9yZWFycmFuZ2VOb2RlcyxcbiAgICAgICAgLy8gYW5kIHRoZSBzbGlkaW5nIGlzIG5vdCB5ZXQgZmluaXNoZWQsIGFuZCB0aGUgc3RhdGUgaXMgbm90IHVwZGF0ZWQgeWV0LlxuICAgICAgICBzZXRUaW1lb3V0KHJlc2V0QmxhbmtGcmFtZSwgVFJBTlNJVElPTl9USU1FICsgTkVJR0hCT1JfU0NBTEVfVElNRSlcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICByZXNldEJsYW5rRnJhbWUoKVxuICAgICAgfVxuICAgIH1cbiAgICB3ZWV4LnV0aWxzLmZpcmVMYXp5bG9hZCh0aGlzLiRlbCwgdHJ1ZSlcbiAgICBpZiAodGhpcy5fcHJlSW5kZXggIT09IHRoaXMuY3VycmVudEluZGV4KSB7XG4gICAgICB0aGlzLl9zbGlkZVRvKHRoaXMuY3VycmVudEluZGV4KVxuICAgIH1cbiAgfSxcblxuICBtb3VudGVkICgpIHtcbiAgICB0aGlzLl9nZXRXcmFwcGVyU2l6ZSgpXG4gICAgdGhpcy5fc2xpZGVUbyh0aGlzLmN1cnJlbnRJbmRleClcbiAgICB3ZWV4LnV0aWxzLmZpcmVMYXp5bG9hZCh0aGlzLiRlbCwgdHJ1ZSlcbiAgfSxcblxuICBtZXRob2RzOiB7XG4gICAgX2dldFdyYXBwZXJTaXplICgpIHtcbiAgICAgIGNvbnN0IHdyYXBwZXIgPSB0aGlzLiRyZWZzLndyYXBwZXJcbiAgICAgIGlmICh3cmFwcGVyKSB7XG4gICAgICAgIGNvbnN0IHJlY3QgPSB3cmFwcGVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgICAgIHRoaXMuX3dyYXBwZXJXaWR0aCA9IHJlY3Qud2lkdGhcbiAgICAgICAgdGhpcy5fd3JhcHBlckhlaWdodCA9IHJlY3QuaGVpZ2h0XG4gICAgICB9XG4gICAgfSxcblxuICAgIF9mb3JtYXRDaGlsZHJlbiAoY3JlYXRlRWxlbWVudCkge1xuICAgICAgY29uc3QgY2hpbGRyZW4gPSB0aGlzLiRzbG90cy5kZWZhdWx0IHx8IFtdXG4gICAgICBsZXQgaW5kaWNhdG9yVm5vZGVcbiAgICAgIGNvbnN0IGNlbGxzID0gY2hpbGRyZW4uZmlsdGVyKHZub2RlID0+IHtcbiAgICAgICAgaWYgKCF2bm9kZS50YWcpIHJldHVybiBmYWxzZVxuICAgICAgICBpZiAodm5vZGUuY29tcG9uZW50T3B0aW9ucyAmJiB2bm9kZS5jb21wb25lbnRPcHRpb25zLnRhZyA9PT0gJ2luZGljYXRvcicpIHtcbiAgICAgICAgICBpbmRpY2F0b3JWbm9kZSA9IHZub2RlXG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH0pLm1hcCh2bm9kZSA9PiB7XG4gICAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50KCdsaScsIHtcbiAgICAgICAgICByZWY6ICdjZWxscycsXG4gICAgICAgICAgc3RhdGljQ2xhc3M6IGB3ZWV4LXNsaWRlci1jZWxsIHdlZXgtY3Qke3RoaXMuaXNOZWlnaGJvciA/ICcgbmVpZ2hib3ItY2VsbCcgOiAnJ31gXG4gICAgICAgIH0sIFt2bm9kZV0pXG4gICAgICB9KVxuICAgICAgaWYgKGluZGljYXRvclZub2RlKSB7XG4gICAgICAgIGluZGljYXRvclZub2RlLmRhdGEuYXR0cnMgPSBpbmRpY2F0b3JWbm9kZS5kYXRhLmF0dHJzIHx8IHt9XG4gICAgICAgIGluZGljYXRvclZub2RlLmRhdGEuYXR0cnMuY291bnQgPSBjZWxscy5sZW5ndGhcbiAgICAgICAgaW5kaWNhdG9yVm5vZGUuZGF0YS5hdHRycy5hY3RpdmUgPSB0aGlzLmN1cnJlbnRJbmRleFxuICAgICAgICB0aGlzLl9pbmRpY2F0b3IgPSBpbmRpY2F0b3JWbm9kZVxuICAgICAgfVxuICAgICAgcmV0dXJuIGNlbGxzXG4gICAgfSxcblxuICAgIF9yZW5kZXJTbGlkZXMgKGNyZWF0ZUVsZW1lbnQpIHtcbiAgICAgIHRoaXMuX2NlbGxzID0gdGhpcy5fZm9ybWF0Q2hpbGRyZW4oY3JlYXRlRWxlbWVudClcbiAgICAgIHRoaXMuZnJhbWVDb3VudCA9IHRoaXMuX2NlbGxzLmxlbmd0aFxuICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICduYXYnLFxuICAgICAgICB7XG4gICAgICAgICAgcmVmOiAnd3JhcHBlcicsXG4gICAgICAgICAgYXR0cnM6IHsgJ3dlZXgtdHlwZSc6IHRoaXMuaXNOZWlnaGJvciA/ICdzbGlkZXItbmVpZ2hib3InIDogJ3NsaWRlcicgfSxcbiAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgdG91Y2hzdGFydDogdGhpcy5faGFuZGxlVG91Y2hTdGFydCxcbiAgICAgICAgICAgIHRvdWNobW92ZTogd2VleC51dGlscy50aHJvdHRsZSh3ZWV4LnV0aWxzLmJpbmQodGhpcy5faGFuZGxlVG91Y2hNb3ZlLCB0aGlzKSwgMjUpLFxuICAgICAgICAgICAgdG91Y2hlbmQ6IHRoaXMuX2hhbmRsZVRvdWNoRW5kLFxuICAgICAgICAgICAgdG91Y2hjYW5jZWw6IHRoaXMuX2hhbmRsZVRvdWNoQ2FuY2VsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBzdGF0aWNDbGFzczogJ3dlZXgtc2xpZGVyIHdlZXgtc2xpZGVyLXdyYXBwZXIgd2VleC1jdCcsXG4gICAgICAgICAgc3RhdGljU3R5bGU6IHdlZXguZXh0cmFjdENvbXBvbmVudFN0eWxlKHRoaXMpXG4gICAgICAgIH0sXG4gICAgICAgIFtcbiAgICAgICAgICBjcmVhdGVFbGVtZW50KCd1bCcsIHtcbiAgICAgICAgICAgIHJlZjogJ2lubmVyJyxcbiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAnd2VleC1zbGlkZXItaW5uZXIgd2VleC1jdCdcbiAgICAgICAgICB9LCB0aGlzLl9jZWxscyksXG4gICAgICAgICAgdGhpcy5faW5kaWNhdG9yXG4gICAgICAgIF1cbiAgICAgIClcbiAgICB9LFxuXG4gICAgLy8gZ2V0IHN0YW5kYXJkIGluZGV4XG4gICAgX25vcm1hbGl6ZUluZGV4IChpbmRleCkge1xuICAgICAgY29uc3QgbmV3SW5kZXggPSAoaW5kZXggKyB0aGlzLmZyYW1lQ291bnQpICUgdGhpcy5mcmFtZUNvdW50XG4gICAgICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobmV3SW5kZXgsIDApLCB0aGlzLmZyYW1lQ291bnQgLSAxKVxuICAgIH0sXG5cbiAgICBfc3RhcnRBdXRvUGxheSAoKSB7XG4gICAgICBpZiAoIXRoaXMuYXV0b1BsYXkgfHwgdGhpcy5hdXRvUGxheSA9PT0gJ2ZhbHNlJykge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLl9hdXRvUGxheVRpbWVyKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9hdXRvUGxheVRpbWVyKVxuICAgICAgICB0aGlzLl9hdXRvUGxheVRpbWVyID0gbnVsbFxuICAgICAgfVxuICAgICAgbGV0IGludGVydmFsID0gcGFyc2VJbnQodGhpcy5pbnRlcnZhbCAtIFRSQU5TSVRJT05fVElNRSAtIE5FSUdIQk9SX1NDQUxFX1RJTUUpXG4gICAgICBpbnRlcnZhbCA9IGludGVydmFsID4gSU5URVJWQUxfTUlOSU1VTSA/IGludGVydmFsIDogSU5URVJWQUxfTUlOSU1VTVxuICAgICAgdGhpcy5fYXV0b1BsYXlUaW1lciA9IHNldFRpbWVvdXQod2VleC51dGlscy5iaW5kKHRoaXMuX25leHQsIHRoaXMpLCBpbnRlcnZhbClcbiAgICB9LFxuXG4gICAgX3N0b3BBdXRvUGxheSAoKSB7XG4gICAgICBpZiAodGhpcy5fYXV0b1BsYXlUaW1lcikge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fYXV0b1BsYXlUaW1lcilcbiAgICAgICAgdGhpcy5fYXV0b1BsYXlUaW1lciA9IG51bGxcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgX3NsaWRlVG8gKGluZGV4LCBpc1RvdWNoU2Nyb2xsKSB7XG4gICAgICBpZiAodGhpcy5mcmFtZUNvdW50IDw9IDApIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMuaW5maW5pdGUgfHwgdGhpcy5pbmZpbml0ZSA9PT0gJ2ZhbHNlJykge1xuICAgICAgICBpZiAoaW5kZXggPT09IC0xIHx8IGluZGV4ID4gKHRoaXMuZnJhbWVDb3VudCAtIDEpKSB7XG4gICAgICAgICAgdGhpcy5fc2xpZGVUbyh0aGlzLmN1cnJlbnRJbmRleClcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLl9wcmVJbmRleCAmJiB0aGlzLl9wcmVJbmRleCAhPT0gMCkge1xuICAgICAgICBpZiAodGhpcy5fc2hvd05vZGVzICYmIHRoaXMuX3Nob3dOb2Rlc1swXSkge1xuICAgICAgICAgIHRoaXMuX3ByZUluZGV4ID0gdGhpcy5fc2hvd05vZGVzWzBdLmluZGV4XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdGhpcy5fcHJlSW5kZXggPSB0aGlzLmN1cnJlbnRJbmRleFxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9zbGlkaW5nKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgdGhpcy5fc2xpZGluZyA9IHRydWVcblxuICAgICAgY29uc3QgbmV3SW5kZXggPSB0aGlzLl9ub3JtYWxpemVJbmRleChpbmRleClcbiAgICAgIGNvbnN0IGlubmVyID0gdGhpcy4kcmVmcy5pbm5lclxuICAgICAgY29uc3Qgc3RlcCA9IHRoaXMuX3N0ZXAgPSB0aGlzLmZyYW1lQ291bnQgPD0gMSA/IDAgOiB0aGlzLl9wcmVJbmRleCAtIGluZGV4XG5cbiAgICAgIGlmIChpbm5lcikge1xuICAgICAgICB0aGlzLl9wcmVwYXJlTm9kZXMoKVxuICAgICAgICBjb25zdCB0cmFuc2xhdGUgPSB3ZWV4LnV0aWxzLmdldFRyYW5zZm9ybU9iaihpbm5lcikudHJhbnNsYXRlXG4gICAgICAgIGNvbnN0IG1hdGNoID0gdHJhbnNsYXRlICYmIHRyYW5zbGF0ZS5tYXRjaCgvdHJhbnNsYXRlW14oXStcXCgoWystXFxkLl0rKS8pXG4gICAgICAgIGNvbnN0IGlubmVyWCA9IG1hdGNoICYmIG1hdGNoWzFdIHx8IDBcbiAgICAgICAgY29uc3QgZGlzdCA9IGlubmVyWCAtIHRoaXMuaW5uZXJPZmZzZXRcbiAgICAgICAgdGhpcy5pbm5lck9mZnNldCArPSBzdGVwICogdGhpcy5fd3JhcHBlcldpZHRoXG4gICAgICAgIC8vIHRyYW5zZm9ybSB0aGUgd2hvbGUgc2xpZGVzIGdyb3VwLlxuICAgICAgICBpbm5lci5zdHlsZS53ZWJraXRUcmFuc2l0aW9uID0gYC13ZWJraXQtdHJhbnNmb3JtICR7VFJBTlNJVElPTl9USU1FIC8gMTAwMH1zIGVhc2UtaW4tb3V0YFxuICAgICAgICBpbm5lci5zdHlsZS5tb3pUcmFuc2l0aW9uID0gYHRyYW5zZm9ybSAke1RSQU5TSVRJT05fVElNRSAvIDEwMDB9cyBlYXNlLWluLW91dGBcbiAgICAgICAgaW5uZXIuc3R5bGUudHJhbnNpdGlvbiA9IGB0cmFuc2Zvcm0gJHtUUkFOU0lUSU9OX1RJTUUgLyAxMDAwfXMgZWFzZS1pbi1vdXRgXG4gICAgICAgIGlubmVyLnN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgke3RoaXMuaW5uZXJPZmZzZXR9cHgsIDAsIDApYFxuICAgICAgICBpbm5lci5zdHlsZS5tb3pUcmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoJHt0aGlzLmlubmVyT2Zmc2V0fXB4LCAwLCAwKWBcbiAgICAgICAgaW5uZXIuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKCR7dGhpcy5pbm5lck9mZnNldH1weCwgMCwgMClgXG5cbiAgICAgICAgLy8gZW1pdCBzY3JvbGwgZXZlbnRzLlxuICAgICAgICBpZiAoIWlzVG91Y2hTY3JvbGwpIHtcbiAgICAgICAgICB0aGlzLl9lbWl0U2Nyb2xsRXZlbnQoJ3Njcm9sbHN0YXJ0JylcbiAgICAgICAgfVxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB0aGlzLl90aHJvdHRsZUVtaXRTY3JvbGwoZGlzdCwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fZW1pdFNjcm9sbEV2ZW50KCdzY3JvbGxlbmQnKVxuICAgICAgICAgIH0pXG4gICAgICAgIH0sIFRIUk9UVExFX1NDUk9MTF9USU1FKVxuXG4gICAgICAgIHRoaXMuX2xvb3BTaG93Tm9kZXMoc3RlcClcblxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBpZiAodGhpcy5pc05laWdoYm9yKSB7XG4gICAgICAgICAgICB0aGlzLl9zZXROZWlnaGJvcnMoKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgaW5uZXIuc3R5bGUud2Via2l0VHJhbnNpdGlvbiA9ICcnXG4gICAgICAgICAgICBpbm5lci5zdHlsZS5tb3pUcmFuc2l0aW9uID0gJydcbiAgICAgICAgICAgIGlubmVyLnN0eWxlLnRyYW5zaXRpb24gPSAnJ1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuX3Nob3dTdGFydElkeDsgaSA8PSB0aGlzLl9zaG93RW5kSWR4OyBpKyspIHtcbiAgICAgICAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuX3Nob3dOb2Rlc1tpXVxuICAgICAgICAgICAgICBpZiAoIW5vZGUpIHsgY29udGludWUgfVxuICAgICAgICAgICAgICBjb25zdCBlbG0gPSBub2RlLmZpcnN0RWxlbWVudENoaWxkXG4gICAgICAgICAgICAgIGVsbS5zdHlsZS53ZWJraXRUcmFuc2l0aW9uID0gJydcbiAgICAgICAgICAgICAgZWxtLnN0eWxlLm1velRyYW5zaXRpb24gPSAnJ1xuICAgICAgICAgICAgICBlbG0uc3R5bGUudHJhbnNpdGlvbiA9ICcnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBjbGVhbiBjbG9uZWQgbm9kZXMgYW5kIHJlYXJyYW5nZSBzbGlkZSBjZWxscy5cbiAgICAgICAgICAgIHRoaXMuX3JlYXJyYW5nZU5vZGVzKG5ld0luZGV4KVxuICAgICAgICAgIH0sIE5FSUdIQk9SX1NDQUxFX1RJTUUpXG4gICAgICAgIH0sIFRSQU5TSVRJT05fVElNRSlcbiAgICAgIH1cblxuICAgICAgaWYgKG5ld0luZGV4ICE9PSB0aGlzLl9wcmVJbmRleCkge1xuICAgICAgICB3ZWV4LnV0aWxzLmRpc3BhdGNoTmF0aXZlRXZlbnQodGhpcy4kZWwsICdjaGFuZ2UnLCB7XG4gICAgICAgICAgaW5kZXg6IG5ld0luZGV4XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSxcblxuICAgIF9jbGVhck5vZGVzT2Zmc2V0ICgpIHtcbiAgICAgIGNvbnN0IGVuZCA9IHRoaXMuX3Nob3dFbmRJZHhcbiAgICAgIGZvciAobGV0IGkgPSB0aGlzLl9zaG93U3RhcnRJZHg7IGkgPD0gZW5kOyBpKyspIHtcbiAgICAgICAgbGV0IG5vZGUgPSB0aGlzLl9zaG93Tm9kZXNbaV1cbiAgICAgICAgbm9kZSA9IG5vZGUgJiYgbm9kZS5maXJzdEVsZW1lbnRDaGlsZFxuICAgICAgICBpZiAoIW5vZGUpIHsgY29udGludWUgfVxuICAgICAgICB3ZWV4LnV0aWxzLmFkZFRyYW5zZm9ybSh0aGlzLl9zaG93Tm9kZXNbaV0uZmlyc3RFbGVtZW50Q2hpbGQsIHtcbiAgICAgICAgICB0cmFuc2xhdGU6ICd0cmFuc2xhdGUzZCgwcHgsIDBweCwgMHB4KSdcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgX2xvb3BTaG93Tm9kZXMgKHN0ZXApIHtcbiAgICAgIGlmICghc3RlcCB8fCB0aGlzLmZyYW1lQ291bnQgPD0gMSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGNvbnN0IHNpZ24gPSBzdGVwID4gMCA/IDEgOiAtMVxuICAgICAgbGV0IGkgPSBzdGVwIDw9IDAgPyB0aGlzLl9zaG93U3RhcnRJZHggOiB0aGlzLl9zaG93RW5kSWR4XG4gICAgICBjb25zdCBlbmQgPSBzdGVwIDw9IDAgPyB0aGlzLl9zaG93RW5kSWR4IDogdGhpcy5fc2hvd1N0YXJ0SWR4XG4gICAgICBmb3IgKDsgaSAhPT0gZW5kIC0gc2lnbjsgaSAtPSBzaWduKSB7XG4gICAgICAgIGNvbnN0IG5leHRJZHggPSBpICsgc3RlcFxuICAgICAgICB0aGlzLl9zaG93Tm9kZXNbbmV4dElkeF0gPSB0aGlzLl9zaG93Tm9kZXNbaV1cbiAgICAgICAgdGhpcy5fc2hvd05vZGVzW25leHRJZHhdLl9zaG93SW5kZXggPSBuZXh0SWR4XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9zaG93Tm9kZXNbaV1cbiAgICAgIH1cbiAgICAgIHRoaXMuX3Nob3dTdGFydElkeCArPSBzdGVwXG4gICAgICB0aGlzLl9zaG93RW5kSWR4ICs9IHN0ZXBcbiAgICB9LFxuXG4gICAgX3ByZXBhcmVOb2RlcyAoKSB7XG4gICAgICAvLyB0ZXN0IGlmIHRoZSBuZXh0IHNsaWRlIHRvd2FyZHMgdGhlIGRpcmVjdGlvbiBleGlzdHMuXG4gICAgICAvLyBlLmcuIGN1cnJlbnRJbmRleCAwIC0+IDE6IHNob3VsZCBwcmVwYXJlIDQgc2xpZGVzOiAtMSwgMCwgMSwgMlxuICAgICAgLy8gaWYgbm90LCB0cmFuc2xhdGUgYSBub2RlIHRvIGhlcmUsIG9yIGp1c3QgY2xvbmUgaXQuXG4gICAgICBjb25zdCBzdGVwID0gdGhpcy5fc3RlcFxuICAgICAgaWYgKCF0aGlzLl9pbml0ZWQpIHtcbiAgICAgICAgdGhpcy5faW5pdE5vZGVzKClcbiAgICAgICAgdGhpcy5faW5pdGVkID0gdHJ1ZVxuICAgICAgICB0aGlzLl9zaG93Tm9kZXMgPSB7fVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuZnJhbWVDb3VudCA8PSAxKSB7XG4gICAgICAgIHRoaXMuX3Nob3dTdGFydElkeCA9IHRoaXMuX3Nob3dFbmRJZHggPSAwXG4gICAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLl9jZWxsc1swXS5lbG1cbiAgICAgICAgbm9kZS5zdHlsZS5vcGFjaXR5ID0gMVxuICAgICAgICBub2RlLnN0eWxlLnpJbmRleCA9IDk5XG4gICAgICAgIG5vZGUuaW5kZXggPSAwXG4gICAgICAgIHRoaXMuX3Nob3dOb2Rlc1swXSA9IG5vZGVcbiAgICAgICAgbm9kZS5faW5TaG93ID0gdHJ1ZVxuICAgICAgICBub2RlLl9zaG93SW5kZXggPSAwXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBjb25zdCBzaG93Q291bnQgPSB0aGlzLl9zaG93Q291bnQgPSBNYXRoLmFicyhzdGVwKSArIDNcbiAgICAgIHRoaXMuX3Nob3dTdGFydElkeCA9IHN0ZXAgPD0gMCA/IC0xIDogMiAtIHNob3dDb3VudFxuICAgICAgdGhpcy5fc2hvd0VuZElkeCA9IHN0ZXAgPD0gMCA/IHNob3dDb3VudCAtIDIgOiAxXG4gICAgICB0aGlzLl9jbGVhck5vZGVzT2Zmc2V0KClcbiAgICAgIHRoaXMuX3Bvc2l0aW9uTm9kZXModGhpcy5fc2hvd1N0YXJ0SWR4LCB0aGlzLl9zaG93RW5kSWR4LCBzdGVwKVxuICAgIH0sXG5cbiAgICBfY2xlYXJDbG9uZXMgKCkge1xuICAgICAgLy8gY2xlYXIgYWxsIGNsb25lcy5cbiAgICAgIE9iamVjdC5rZXlzKHRoaXMuX2Nsb25lcykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICB0aGlzLl9jbG9uZXNba2V5XS5mb3JFYWNoKGNsb25lTm9kZSA9PiB7XG4gICAgICAgICAgY2xvbmVOb2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY2xvbmVOb2RlKVxuICAgICAgICB9KVxuICAgICAgICB0aGlzLl9jbG9uZXNba2V5XSA9IFtdXG4gICAgICB9KVxuICAgIH0sXG5cbiAgICAvLyByZXNldCBub2RlcycgaW5kZXggYW5kIF9pblNob3cgc3RhdGUuIEJ1dCBsZWF2ZSB0aGUgc3R5bGVzXG4gICAgLy8gYXMgdGhleSBhcmUgdG8gcHJldmVudCBkb20gcmVyZW5kZXJpbmcuXG4gICAgX3Jlc2V0Tm9kZXMgKCkge1xuICAgICAgdGhpcy5fY2xlYXJDbG9uZXMoKVxuICAgICAgLy8gcmVzZXQgc3RhdHVzLlxuICAgICAgdGhpcy5fY2VsbHMuZm9yRWFjaCgoY2VsbCwgaWR4KSA9PiB7XG4gICAgICAgIGNvbnN0IGVsbSA9IGNlbGwuZWxtXG4gICAgICAgIGVsbS5pbmRleCA9IGlkeFxuICAgICAgICBlbG0uX2luU2hvdyA9IGZhbHNlXG4gICAgICB9KVxuICAgIH0sXG5cbiAgICBfaW5pdE5vZGVzICgpIHtcbiAgICAgIHRoaXMuX2NlbGxzLmZvckVhY2goKGNlbGwsIGlkeCkgPT4ge1xuICAgICAgICBjb25zdCBub2RlID0gY2VsbC5lbG1cbiAgICAgICAgbm9kZS5pbmRleCA9IGlkeFxuICAgICAgICBub2RlLl9pblNob3cgPSBmYWxzZVxuICAgICAgICBub2RlLnN0eWxlLnpJbmRleCA9IDBcbiAgICAgICAgbm9kZS5zdHlsZS5vcGFjaXR5ID0gMFxuICAgICAgfSlcbiAgICB9LFxuXG4gICAgX3Bvc2l0aW9uTm9kZXMgKGJlZ2luLCBlbmQsIHN0ZXAsIGFuaW0pIHtcbiAgICAgIGNvbnN0IGNlbGxzID0gdGhpcy5fY2VsbHNcbiAgICAgIGNvbnN0IHN0YXJ0ID0gc3RlcCA8PSAwID8gYmVnaW4gOiBlbmRcbiAgICAgIGNvbnN0IHN0b3AgPSBzdGVwIDw9IDAgPyBlbmQgOiBiZWdpblxuICAgICAgY29uc3Qgc2lnbiA9IHN0ZXAgPD0gMCA/IC0xIDogMVxuICAgICAgbGV0IGNlbGxJbmRleCA9IHRoaXMuX3ByZUluZGV4ICsgc2lnblxuICAgICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpICE9PSBzdG9wIC0gc2lnbjsgaSA9IGkgLSBzaWduKSB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBjZWxsc1t0aGlzLl9ub3JtYWxpemVJbmRleChjZWxsSW5kZXgpXS5lbG1cbiAgICAgICAgY2VsbEluZGV4ID0gY2VsbEluZGV4IC0gc2lnblxuICAgICAgICB0aGlzLl9wb3NpdGlvbk5vZGUobm9kZSwgaSlcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogaW5kZXg6IHBvc2l0aW9uIGluZGV4IGluIHRoZSBzaG93aW5nIGNlbGxzJyB2aWV3LlxuICAgICAqL1xuICAgIF9wb3NpdGlvbk5vZGUgKG5vZGUsIGluZGV4KSB7XG4gICAgICBjb25zdCBob2xkZXIgPSB0aGlzLl9zaG93Tm9kZXNbaW5kZXhdXG4gICAgICBpZiAobm9kZS5faW5TaG93ICYmIChob2xkZXIgIT09IG5vZGUgfHwgaG9sZGVyLl9zaG93SW5kZXggIT09IGluZGV4KSkge1xuICAgICAgICBpZiAoaG9sZGVyICYmIGhvbGRlci5faXNDbG9uZSkgeyB0aGlzLl9yZW1vdmVDbG9uZShob2xkZXIpIH1cbiAgICAgICAgbm9kZSA9IHRoaXMuX2dldENsb25lKG5vZGUuaW5kZXgpXG4gICAgICB9XG4gICAgICBlbHNlIGlmIChub2RlLl9pblNob3cpIHsgIC8vIGhvbGRlciA9PT0gbm9kZVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgbm9kZS5faW5TaG93ID0gdHJ1ZVxuICAgICAgY29uc3QgdHJhbnNsYXRlWCA9IGluZGV4ICogdGhpcy5fd3JhcHBlcldpZHRoIC0gdGhpcy5pbm5lck9mZnNldFxuICAgICAgd2VleC51dGlscy5hZGRUcmFuc2Zvcm0obm9kZSwge1xuICAgICAgICB0cmFuc2xhdGU6IGB0cmFuc2xhdGUzZCgke3RyYW5zbGF0ZVh9cHgsIDBweCwgMHB4KWBcbiAgICAgIH0pXG4gICAgICBub2RlLnN0eWxlLnpJbmRleCA9IDk5IC0gTWF0aC5hYnMoaW5kZXgpXG4gICAgICBub2RlLnN0eWxlLm9wYWNpdHkgPSAxXG4gICAgICBub2RlLl9zaG93SW5kZXggPSBpbmRleFxuICAgICAgdGhpcy5fc2hvd05vZGVzW2luZGV4XSA9IG5vZGVcbiAgICB9LFxuXG4gICAgX2dldENsb25lIChpbmRleCkge1xuICAgICAgY29uc3QgYXJyID0gdGhpcy5fY2xvbmVzW2luZGV4XSB8fCAodGhpcy5fY2xvbmVzW2luZGV4XSA9IFtdKVxuICAgICAgY29uc3Qgb3JpZ05vZGUgPSB0aGlzLl9jZWxsc1tpbmRleF0uZWxtXG4gICAgICBjb25zdCBjbG9uZSA9IG9yaWdOb2RlLmNsb25lTm9kZSh0cnVlKVxuICAgICAgY2xvbmUuX2lzQ2xvbmUgPSB0cnVlXG4gICAgICBjbG9uZS5faW5TaG93ID0gdHJ1ZVxuICAgICAgLy8gY2xvbmUuX2luU2hvdyA9IG9yaWdOb2RlLl9pblNob3dcbiAgICAgIGNsb25lLmluZGV4ID0gb3JpZ05vZGUuaW5kZXhcbiAgICAgIGNsb25lLnN0eWxlLm9wYWNpdHkgPSAwXG4gICAgICBjbG9uZS5zdHlsZS56SW5kZXggPSAwXG4gICAgICB0aGlzLiRyZWZzLmlubmVyLmFwcGVuZENoaWxkKGNsb25lKVxuICAgICAgYXJyLnB1c2goY2xvbmUpXG4gICAgICByZXR1cm4gY2xvbmVcbiAgICAgIC8vIHRyeSB7XG4gICAgICAvLyAgIGxldCBhcnIgPSB0aGlzLl9jbG9uZXNbaW5kZXhdXG4gICAgICAvLyAgIGlmICghYXJyKSB7XG4gICAgICAvLyAgICAgdGhpcy5fY2xvbmVzW2luZGV4XSA9IGFyciA9IFtdXG4gICAgICAvLyAgIH1cbiAgICAgIC8vICAgaWYgKGFyci5sZW5ndGggPD0gMCkge1xuXG4gICAgICAvLyAgIH1cbiAgICAgIC8vICAgcmV0dXJuIGFyci5wb3AoKVxuICAgICAgLy8gfSBjYXRjaCAoZXJyKSB7XG4gICAgICAvLyAgIGNvbnNvbGUuZXJyb3IoJ3RoaXMuX2NlbGxzIC0+ICcsIHRoaXMuX2NlbGxzKVxuICAgICAgLy8gfVxuICAgIH0sXG5cbiAgICBfcmVtb3ZlQ2xvbmUgKG5vZGUpIHtcbiAgICAgIGNvbnN0IGNsb25lQXJyID0gdGhpcy5fY2xvbmVzW25vZGUuaW5kZXhdXG4gICAgICBsZXQgaVxuICAgICAgaWYgKGNsb25lQXJyICYmIChpID0gY2xvbmVBcnIuaW5kZXhPZihub2RlKSkgPiAtMSkge1xuICAgICAgICBjbG9uZUFyci5zcGxpY2UoaSwgMSlcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKVxuICAgICAgfVxuICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAvLyBtYXliZSBjZWxscyBoYXMgYmVlbiB1cGRhdGVkIGFuZCB0aGlzIGNsb25lIG5vZGUgaXMgYWxyZWFkeSByZW1vdmVkIGZyb20gdGhlIGRvbSB0cmVlXG4gICAgICAgIC8vIHRocm91Z2h0IF9jbGVhckNsb25lcyBtZXRob2QuXG4gICAgICB9XG4gICAgICAvLyBjb25zdCBpZHggPSBub2RlLmluZGV4XG4gICAgICAvLyB0aGlzLl9oaWRlTm9kZShub2RlKVxuICAgICAgLy8gY29uc3QgYXJyID0gdGhpcy5fY2xvbmVzW2lkeF1cbiAgICAgIC8vIGFyci5wdXNoKG5vZGUpXG4gICAgfSxcblxuICAgIF9oaWRlTm9kZSAobm9kZSkge1xuICAgICAgbm9kZS5faW5TaG93ID0gZmFsc2VcbiAgICAgIG5vZGUuc3R5bGUub3BhY2l0eSA9IDBcbiAgICAgIG5vZGUuc3R5bGUuekluZGV4ID0gMFxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBoaWRlIG5vZGVzIGZyb20gYmVnaW4gdG8gZW5kIGluIHNob3dBcnJheS5cbiAgICAgKiBpZiBpdCBpcyBjbG9uZSBub2RlLCBqdXN0IG1vdmUgdGhlIGNsb25lIG5vZGUgdG8gdGhlIGJ1ZmZlci5cbiAgICAgKi9cbiAgICBfY2xlYXJOb2RlcyAoYmVnaW4sIGVuZCkge1xuICAgICAgZm9yIChsZXQgaSA9IGJlZ2luOyBpIDw9IGVuZDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLl9zaG93Tm9kZXNbaV1cbiAgICAgICAgaWYgKCFub2RlKSB7IHJldHVybiB9XG4gICAgICAgIGlmIChub2RlLl9pc0Nsb25lKSB7XG4gICAgICAgICAgdGhpcy5fcmVtb3ZlQ2xvbmUobm9kZSlcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghbm9kZS5faW5TaG93KSB7XG4gICAgICAgICAgdGhpcy5faGlkZU5vZGUobm9kZSlcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgdGhpcy5fc2hvd05vZGVzW2ldXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGNvcHkgbm9kZSBzdHlsZSBwcm9wcyAob3BhY2l0eSBhbmQgekluZGV4KSBhbmQgdHJhbnNmb3JtIHN0YXR1cyBmcm9tXG4gICAgICogb25lIGVsZW1lbnQgdG8gYW5vdGhlci5cbiAgICAgKi9cbiAgICBfY29weVN0eWxlIChmcm9tLCB0bywgc3R5bGVzID0gWydvcGFjaXR5JywgJ3pJbmRleCddLCB0cmFuc2Zvcm1FeHRyYSA9IHt9KSB7XG4gICAgICB3ZWV4LnV0aWxzLmV4dGVuZEtleXModG8uc3R5bGUsIGZyb20uc3R5bGUsIHN0eWxlcylcbiAgICAgIGNvbnN0IHRyYW5zT2JqID0gd2VleC51dGlscy5nZXRUcmFuc2Zvcm1PYmooZnJvbSlcbiAgICAgIGZvciAoY29uc3QgayBpbiB0cmFuc2Zvcm1FeHRyYSkge1xuICAgICAgICB0cmFuc09ialtrXSA9IHRyYW5zZm9ybUV4dHJhW2tdXG4gICAgICB9XG4gICAgICB3ZWV4LnV0aWxzLmFkZFRyYW5zZm9ybSh0bywgdHJhbnNPYmopXG4gICAgICBjb25zdCBmcm9tSW5uZXIgPSBmcm9tLmZpcnN0RWxlbWVudENoaWxkXG4gICAgICBjb25zdCB0b0lubmVyID0gdG8uZmlyc3RFbGVtZW50Q2hpbGRcbiAgICAgIHRvSW5uZXIuc3R5bGUub3BhY2l0eSA9IGZyb21Jbm5lci5zdHlsZS5vcGFjaXR5XG4gICAgICB3ZWV4LnV0aWxzLmNvcHlUcmFuc2Zvcm0oZnJvbUlubmVyLCB0b0lubmVyKVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiByZXBsYWNlIGEgY2xvbmUgbm9kZSB3aXRoIHRoZSBvcmlnaW5hbCBub2RlIGlmIGl0J3Mgbm90IGluIHVzZS5cbiAgICAgKi9cbiAgICBfcmVwbGFjZUNsb25lIChjbG9uZSwgcG9zKSB7XG4gICAgICBjb25zdCBvcmlnQ2VsbCA9IHRoaXMuX2NlbGxzW2Nsb25lLmluZGV4XVxuICAgICAgaWYgKCFvcmlnQ2VsbCkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGNvbnN0IG9yaWdOb2RlID0gb3JpZ0NlbGwuZWxtXG4gICAgICBpZiAob3JpZ05vZGUuX2luU2hvdykge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGNvbnN0IG9yaWdTaG93SW5kZXggPSBvcmlnTm9kZS5fc2hvd0luZGV4XG4gICAgICBjb25zdCBzdHlsZVByb3BzID0gWydvcGFjaXR5JywgJ3pJbmRleCddXG4gICAgICBsZXQgY2xcbiAgICAgIGlmIChNYXRoLmFicyhvcmlnU2hvd0luZGV4KSA8PSAxKSB7XG4gICAgICAgIC8vIGxlYXZlIGEgY2xvbmUgdG8gcmVwbGFjZSB0aGUgb3JpZ05vZGUgaW4gdGhlIHNob3cgem9uZSgtMSB+IDEpLlxuICAgICAgICBjbCA9IHRoaXMuX2dldENsb25lKG9yaWdOb2RlLmluZGV4KVxuICAgICAgICB0aGlzLl9jb3B5U3R5bGUob3JpZ05vZGUsIGNsKVxuICAgICAgICB0aGlzLl9zaG93Tm9kZXNbb3JpZ1Nob3dJbmRleF0gPSBjbFxuICAgICAgfVxuICAgICAgb3JpZ05vZGUuX2luU2hvdyA9IHRydWVcbiAgICAgIGNvbnN0IHRyYW5zT2JqID0gd2VleC51dGlscy5nZXRUcmFuc2Zvcm1PYmooY2xvbmUpXG4gICAgICB0cmFuc09iai50cmFuc2xhdGUgPSB0cmFuc09iai50cmFuc2xhdGUucmVwbGFjZSgvWystXFxkLl0rW3B3XXgvLCAoJDApID0+IHtcbiAgICAgICAgcmV0dXJuIHBvcyAqIHRoaXMuX3dyYXBwZXJXaWR0aCAtIHRoaXMuaW5uZXJPZmZzZXQgKyAncHgnXG4gICAgICB9KVxuICAgICAgdGhpcy5fY29weVN0eWxlKGNsb25lLCBvcmlnTm9kZSwgc3R5bGVQcm9wcywgdHJhbnNPYmopXG4gICAgICB0aGlzLl9yZW1vdmVDbG9uZShjbG9uZSlcbiAgICAgIGlmICghY2wpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuX3Nob3dOb2Rlc1tvcmlnU2hvd0luZGV4XVxuICAgICAgfVxuICAgICAgdGhpcy5fc2hvd05vZGVzW3Bvc10gPSBvcmlnTm9kZVxuICAgICAgb3JpZ05vZGUuX3Nob3dJbmRleCA9IHBvc1xuICAgIH0sXG5cbiAgICBfcmVhcnJhbmdlTm9kZXMgKG5ld0luZGV4KSB7XG4gICAgICBpZiAodGhpcy5mcmFtZUNvdW50IDw9IDEpIHtcbiAgICAgICAgdGhpcy5fc2xpZGluZyA9IGZhbHNlXG4gICAgICAgIHRoaXMuY3VycmVudEluZGV4ID0gMFxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgLy8gY2xlYXIgYXV0b1BsYXkgdGltZXIgKGFuZCByZXN0YXJ0IGFmdGVyIHVwZGF0ZWQgaG9vaykuXG4gICAgICB0aGlzLl9zdGFydEF1dG9QbGF5KClcblxuICAgICAgLyoqXG4gICAgICAgKiBjbGVhbiBub2Rlcy4gcmVwbGFjZSBjdXJyZW50IG5vZGUgd2l0aCBub24tY2xvbmVkIG5vZGUuXG4gICAgICAgKiBzZXQgY3VycmVudCBpbmRleCB0byB0aGUgbmV3IGluZGV4LlxuICAgICAgICovXG4gICAgICBjb25zdCBzaG93cyA9IHRoaXMuX3Nob3dOb2Rlc1xuICAgICAgZm9yIChsZXQgaSA9IHRoaXMuX3Nob3dTdGFydElkeDsgaSA8PSB0aGlzLl9zaG93RW5kSWR4OyBpKyspIHtcbiAgICAgICAgc2hvd3NbaV0uX2luU2hvdyA9IGZhbHNlXG4gICAgICB9XG4gICAgICBmb3IgKGxldCBpID0gLTE7IGkgPD0gMTsgaSsrKSB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBzaG93c1tpXVxuICAgICAgICBpZiAoIW5vZGUuX2lzQ2xvbmUpIHtcbiAgICAgICAgICBub2RlLl9pblNob3cgPSB0cnVlXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdGhpcy5fcmVwbGFjZUNsb25lKG5vZGUsIGkpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fY2xlYXJOb2Rlcyh0aGlzLl9zaG93U3RhcnRJZHgsIC0yKVxuICAgICAgdGhpcy5fc2hvd1N0YXJ0SWR4ID0gLTFcbiAgICAgIHRoaXMuX2NsZWFyTm9kZXMoMiwgdGhpcy5fc2hvd0VuZElkeClcbiAgICAgIHRoaXMuX3Nob3dFbmRJZHggPSAxXG4gICAgICB0aGlzLl9zbGlkaW5nID0gZmFsc2VcblxuICAgICAgLy8gc2V0IGN1cnJlbnQgaW5kZXggdG8gdGhlIG5ldyBpbmRleC5cbiAgICAgIHRoaXMuY3VycmVudEluZGV4ID0gbmV3SW5kZXhcbiAgICAgIHRoaXMuX3ByZUluZGV4ID0gbmV3SW5kZXhcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogYWNjb3JkaW5nIHRvIHRoZSBhdHRyczogbmVpZ2hib3JTY2FsZSwgbmVpZ2hib3JBbHBoYSwgbmVpZ2hib3JTcGFjZS5cbiAgICAgKiAxLiBhcHBseSB0aGUgbWFpbiBjZWxsIHRyYW5zZm9ybSBlZmZlY3RzLlxuICAgICAqIDIuIHNldCB0aGUgcHJldmlvdXMgY2VsbCBhbmQgdGhlIG5leHQgY2VsbCdzIHBvc2l0b24sIHNjYWxlIGFuZCBhbHBoYS5cbiAgICAgKiAzLiBzZXQgb3RoZXIgY2VsbHMnIHNjYWxlIGFuZCBhbHBoYS5cbiAgICAgKi9cbiAgICBfc2V0TmVpZ2hib3JzICgpIHtcbiAgICAgIGZvciAobGV0IGkgPSB0aGlzLl9zaG93U3RhcnRJZHg7IGkgPD0gdGhpcy5fc2hvd0VuZElkeDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGVsbSA9IHRoaXMuX3Nob3dOb2Rlc1tpXS5maXJzdEVsZW1lbnRDaGlsZFxuICAgICAgICBlbG0uc3R5bGUud2Via2l0VHJhbnNpdGlvbiA9IGBhbGwgJHtORUlHSEJPUl9TQ0FMRV9USU1FIC8gMTAwMH1zIGVhc2VgXG4gICAgICAgIGVsbS5zdHlsZS5tb3pUcmFuc2l0aW9uID0gYGFsbCAke05FSUdIQk9SX1NDQUxFX1RJTUUgLyAxMDAwfXMgZWFzZWBcbiAgICAgICAgZWxtLnN0eWxlLnRyYW5zaXRpb24gPSBgYWxsICR7TkVJR0hCT1JfU0NBTEVfVElNRSAvIDEwMDB9cyBlYXNlYFxuICAgICAgICBjb25zdCB0cmFuc09iaiA9IHtcbiAgICAgICAgICBzY2FsZTogYHNjYWxlKCR7aSA9PT0gMCA/IHRoaXMuY3VycmVudEl0ZW1TY2FsZSA6IHRoaXMubmVpZ2hib3JTY2FsZX0pYFxuICAgICAgICB9XG4gICAgICAgIGxldCB0cmFuc2xhdGVYXG4gICAgICAgIGlmICghdGhpcy5fbmVpZ2hib3JXaWR0aCkge1xuICAgICAgICAgIHRoaXMuX25laWdoYm9yV2lkdGggPSBwYXJzZUZsb2F0KGVsbS5zdHlsZS53aWR0aCkgfHwgZWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoXG4gICAgICAgIH1cbiAgICAgICAgLy8gY2FsY3VsYXRlIHBvc2l0aW9uIG9mZnNldHMgYWNjb3JkaW5nIHRvIG5laWdoYm9yIHNjYWxlcy5cbiAgICAgICAgaWYgKE1hdGguYWJzKGkpID09PSAxKSB7XG4gICAgICAgICAgY29uc3QgZGlzdCA9ICgodGhpcy5fd3JhcHBlcldpZHRoIC0gdGhpcy5fbmVpZ2hib3JXaWR0aCAqIHRoaXMubmVpZ2hib3JTY2FsZSkgLyAyXG4gICAgICAgICAgICArIHRoaXMubmVpZ2hib3JTcGFjZSAqIHdlZXguY29uZmlnLmVudi5zY2FsZSkgLyB0aGlzLm5laWdoYm9yU2NhbGVcbiAgICAgICAgICB0cmFuc2xhdGVYID0gLWkgKiBkaXN0XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgLy8gY2xlYXIgcG9zaXRpb24gb2Zmc2V0cy5cbiAgICAgICAgICB0cmFuc2xhdGVYID0gMFxuICAgICAgICB9XG4gICAgICAgIHRyYW5zT2JqLnRyYW5zbGF0ZSA9IGB0cmFuc2xhdGUzZCgke3RyYW5zbGF0ZVh9cHgsIDBweCwgMHB4KWBcbiAgICAgICAgd2VleC51dGlscy5hZGRUcmFuc2Zvcm0oZWxtLCB0cmFuc09iailcbiAgICAgICAgZWxtLnN0eWxlLm9wYWNpdHkgPSBpID09PSAwID8gTUFJTl9TTElERV9PUEFDSVRZIDogdGhpcy5uZWlnaGJvckFscGhhXG4gICAgICB9XG4gICAgfSxcblxuICAgIF9uZXh0ICgpIHtcbiAgICAgIGxldCBuZXh0ID0gdGhpcy5jdXJyZW50SW5kZXggKyAxXG4gICAgICBpZiAodGhpcy5mcmFtZUNvdW50IDw9IDEpIHtcbiAgICAgICAgbmV4dC0tXG4gICAgICB9XG4gICAgICB0aGlzLl9zbGlkZVRvKG5leHQpXG4gICAgfSxcblxuICAgIF9wcmV2ICgpIHtcbiAgICAgIGxldCBwcmV2ID0gdGhpcy5jdXJyZW50SW5kZXggLSAxXG4gICAgICBpZiAodGhpcy5mcmFtZUNvdW50IDw9IDEpIHtcbiAgICAgICAgcHJldisrXG4gICAgICB9XG4gICAgICB0aGlzLl9zbGlkZVRvKHByZXYpXG4gICAgfSxcblxuICAgIF9oYW5kbGVUb3VjaFN0YXJ0IChldmVudCkge1xuICAgICAgY29uc3QgdG91Y2ggPSBldmVudC5jaGFuZ2VkVG91Y2hlc1swXVxuICAgICAgdGhpcy5fc3RvcEF1dG9QbGF5KClcbiAgICAgIGNvbnN0IGlubmVyID0gdGhpcy4kcmVmcy5pbm5lclxuICAgICAgdGhpcy5fdG91Y2hQYXJhbXMgPSB7XG4gICAgICAgIG9yaWdpbmFsVHJhbnNmb3JtOiBpbm5lci5zdHlsZS53ZWJraXRUcmFuc2Zvcm1cbiAgICAgICAgICB8fCBpbm5lci5zdHlsZS5tb3pUcmFuc2Zvcm1cbiAgICAgICAgICB8fCBpbm5lci5zdHlsZS50cmFuc2Zvcm0sXG4gICAgICAgIHN0YXJ0VG91Y2hFdmVudDogdG91Y2gsXG4gICAgICAgIHN0YXJ0WDogdG91Y2gucGFnZVgsXG4gICAgICAgIHN0YXJ0WTogdG91Y2gucGFnZVksXG4gICAgICAgIHRpbWVTdGFtcDogZXZlbnQudGltZVN0YW1wXG4gICAgICB9XG4gICAgfSxcblxuICAgIF9oYW5kbGVUb3VjaE1vdmUgKGV2ZW50KSB7XG4gICAgICBjb25zdCB0cCA9IHRoaXMuX3RvdWNoUGFyYW1zXG4gICAgICBpZiAoIXRwKSB7IHJldHVybiB9XG4gICAgICBpZiAodGhpcy5fc2xpZGluZykge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oYFt2dWUtcmVuZGVyXSB3YXJuOiBjYW4ndCBzY3JvbGwgdGhlIHNsaWRlciBkdXJpbmcgc2xpZGluZy5gKVxuICAgICAgICB9XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgY29uc3QgeyBzdGFydFgsIHN0YXJ0WSB9ID0gdGhpcy5fdG91Y2hQYXJhbXNcbiAgICAgIGNvbnN0IHRvdWNoID0gZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF1cbiAgICAgIGNvbnN0IG9mZnNldFggPSB0b3VjaC5wYWdlWCAtIHN0YXJ0WFxuICAgICAgY29uc3Qgb2Zmc2V0WSA9IHRvdWNoLnBhZ2VZIC0gc3RhcnRZXG4gICAgICB0cC5vZmZzZXRYID0gb2Zmc2V0WFxuICAgICAgdHAub2Zmc2V0WSA9IG9mZnNldFlcbiAgICAgIGxldCBpc1YgPSB0cC5pc1ZlcnRpY2FsXG4gICAgICBpZiAodHlwZW9mIGlzViA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaXNWID0gdHAuaXNWZXJ0aWNhbCA9IE1hdGguYWJzKG9mZnNldFgpIDwgTWF0aC5hYnMob2Zmc2V0WSlcbiAgICAgICAgaWYgKCFpc1YpIHtcbiAgICAgICAgICB0aGlzLl9lbWl0U2Nyb2xsRXZlbnQoJ3Njcm9sbHN0YXJ0JylcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gdmVydGljYWwgc2Nyb2xsLiBqdXN0IGlnbm9yZSBpdC5cbiAgICAgIGlmIChpc1YpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICAvLyBob3Jpem9udGFsIHNjcm9sbC4gdHJpZ2dlciBzY3JvbGwgZXZlbnQuXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICBjb25zdCBpbm5lciA9IHRoaXMuJHJlZnMuaW5uZXJcbiAgICAgIGlmIChpbm5lciAmJiBvZmZzZXRYKSB7XG4gICAgICAgIGlmICghdGhpcy5fbm9kZXNPZmZzZXRDbGVhcmVkKSB7XG4gICAgICAgICAgdGhpcy5fbm9kZXNPZmZzZXRDbGVhcmVkID0gdHJ1ZVxuICAgICAgICAgIHRoaXMuX2NsZWFyTm9kZXNPZmZzZXQoKVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2VtaXRTY3JvbGxFdmVudCgnd2VleCRzY3JvbGwnLCB7XG4gICAgICAgICAgb2Zmc2V0WFJhdGlvOiBvZmZzZXRYIC8gdGhpcy5fd3JhcHBlcldpZHRoXG4gICAgICAgIH0pXG4gICAgICAgIGlubmVyLnN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgke3RoaXMuaW5uZXJPZmZzZXQgKyBvZmZzZXRYfXB4LCAwLCAwKWBcbiAgICAgICAgaW5uZXIuc3R5bGUubW96VHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKCR7dGhpcy5pbm5lck9mZnNldCArIG9mZnNldFh9cHgsIDAsIDApYFxuICAgICAgICBpbm5lci5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoJHt0aGlzLmlubmVyT2Zmc2V0ICsgb2Zmc2V0WH1weCwgMCwgMClgXG4gICAgICB9XG4gICAgfSxcblxuICAgIF9oYW5kbGVUb3VjaEVuZCAoZXZlbnQpIHtcbiAgICAgIHRoaXMuX3N0YXJ0QXV0b1BsYXkoKVxuICAgICAgY29uc3QgdHAgPSB0aGlzLl90b3VjaFBhcmFtc1xuICAgICAgaWYgKCF0cCkgeyByZXR1cm4gfVxuICAgICAgY29uc3QgaXNWID0gdHAuaXNWZXJ0aWNhbFxuICAgICAgaWYgKHR5cGVvZiBpc1YgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgY29uc3QgaW5uZXIgPSB0aGlzLiRyZWZzLmlubmVyXG4gICAgICBjb25zdCB7IG9mZnNldFggfSA9IHRwXG4gICAgICBpZiAoaW5uZXIpIHtcbiAgICAgICAgdGhpcy5fbm9kZXNPZmZzZXRDbGVhcmVkID0gZmFsc2VcbiAgICAgICAgLy8gVE9ETzogdGVzdCB0aGUgdmVsb2NpdHkgaWYgaXQncyBsZXNzIHRoYW4gMC4yLlxuICAgICAgICBjb25zdCByZXNldCA9IE1hdGguYWJzKG9mZnNldFggLyB0aGlzLl93cmFwcGVyV2lkdGgpIDwgMC4yXG4gICAgICAgIGNvbnN0IGRpcmVjdGlvbiA9IG9mZnNldFggPiAwID8gMSA6IC0xXG4gICAgICAgIGNvbnN0IG5ld0luZGV4ID0gcmVzZXQgPyB0aGlzLmN1cnJlbnRJbmRleCA6ICh0aGlzLmN1cnJlbnRJbmRleCAtIGRpcmVjdGlvbilcbiAgICAgICAgdGhpcy5fc2xpZGVUbyhuZXdJbmRleCwgdHJ1ZSlcbiAgICAgIH1cbiAgICAgIGRlbGV0ZSB0aGlzLl90b3VjaFBhcmFtc1xuICAgIH0sXG5cbiAgICBfaGFuZGxlVG91Y2hDYW5jZWwgKGV2ZW50KSB7XG4gICAgICByZXR1cm4gdGhpcy5faGFuZGxlVG91Y2hFbmQoZXZlbnQpXG4gICAgfSxcblxuICAgIF9lbWl0U2Nyb2xsRXZlbnQgKHR5cGUsIGRhdGEgPSB7fSkge1xuICAgICAgY29uc3QgZWwgPSB0aGlzLiRlbFxuICAgICAgaWYgKGVsKSB7XG4gICAgICAgIHdlZXgudXRpbHMuZGlzcGF0Y2hOYXRpdmVFdmVudChlbCwgdHlwZSwgZGF0YSlcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgX3Rocm90dGxlRW1pdFNjcm9sbCAob2Zmc2V0LCBjYWxsYmFjaykge1xuICAgICAgbGV0IGkgPSAwXG4gICAgICBjb25zdCB0aHJvdHRsZVRpbWUgPSBUSFJPVFRMRV9TQ1JPTExfVElNRVxuICAgICAgY29uc3QgY250ID0gcGFyc2VJbnQoVFJBTlNJVElPTl9USU1FIC8gdGhyb3R0bGVUaW1lKSAtIDFcbiAgICAgIGNvbnN0IHNpZ24gPSBvZmZzZXQgPiAwID8gMSA6IC0xXG4gICAgICBjb25zdCByID0gTWF0aC5hYnMob2Zmc2V0IC8gdGhpcy5fd3JhcHBlcldpZHRoKVxuICAgICAgY29uc3QgdGhyb3R0bGVkU2Nyb2xsID0gKCkgPT4ge1xuICAgICAgICBpZiAoKytpID4gY250KSB7XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrICYmIGNhbGxiYWNrLmNhbGwodGhpcylcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByYXRpbyA9IHRoaXMuX3N0ZXAgPT09IDBcbiAgICAgICAgICA/IHNpZ24gKiByICogKDEgLSBpIC8gY250KVxuICAgICAgICAgIDogc2lnbiAqIChyICsgKDEgLSByKSAqIGkgLyBjbnQpXG4gICAgICAgIHRoaXMuX2VtaXRTY3JvbGxFdmVudCgnd2VleCRzY3JvbGwnLCB7XG4gICAgICAgICAgb2Zmc2V0WFJhdGlvOiByYXRpb1xuICAgICAgICB9KVxuICAgICAgICBzZXRUaW1lb3V0KHRocm90dGxlZFNjcm9sbCwgVEhST1RUTEVfU0NST0xMX1RJTUUpXG4gICAgICB9XG4gICAgICB0aHJvdHRsZWRTY3JvbGwoKVxuICAgIH1cbiAgfVxufVxuIiwiLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vLyBpbXBvcnQgeyB2YWxpZGF0ZVN0eWxlcyB9IGZyb20gJy4uLy4uL3ZhbGlkYXRvcidcbi8vIGltcG9ydCBpbmRpY2F0b3IgZnJvbSAnLi9pbmRpY2F0b3InXG5pbXBvcnQgc2xpZGVNaXhpbiBmcm9tICcuL3NsaWRlTWl4aW4nXG5cbmNvbnN0IHNsaWRlciA9IHtcbiAgbWl4aW5zOiBbc2xpZGVNaXhpbl0sXG4gIHByb3BzOiB7XG4gICAgaW5kZXg6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgICBkZWZhdWx0OiAwXG4gICAgfSxcbiAgICAnYXV0by1wbGF5Jzoge1xuICAgICAgdHlwZTogW1N0cmluZywgQm9vbGVhbl0sXG4gICAgICBkZWZhdWx0OiBmYWxzZVxuICAgIH0sXG4gICAgaW50ZXJ2YWw6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgICBkZWZhdWx0OiAzMDAwXG4gICAgfSxcbiAgICBpbmZpbml0ZToge1xuICAgICAgdHlwZTogW1N0cmluZywgQm9vbGVhbl0sXG4gICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfVxuICB9LFxuXG4gIHdhdGNoOiB7XG4gICAgaW5kZXggKCkge1xuICAgICAgdGhpcy5jdXJyZW50SW5kZXggPSB0aGlzLl9ub3JtYWxpemVJbmRleCh0aGlzLmluZGV4KVxuICAgIH1cbiAgfSxcblxuICBkYXRhICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZnJhbWVDb3VudDogMCxcbiAgICAgIGN1cnJlbnRJbmRleDogdGhpcy5pbmRleFxuICAgIH1cbiAgfSxcblxuICBiZWZvcmVDcmVhdGUgKCkge1xuICAgIHRoaXMud2VleFR5cGUgPSAnc2xpZGVyJ1xuICB9LFxuXG4gIHJlbmRlciAoY3JlYXRlRWxlbWVudCkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgLy8gaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKSB7XG4gICAgLy8gICB2YWxpZGF0ZVN0eWxlcygnc2xpZGVyJywgdGhpcy4kdm5vZGUuZGF0YSAmJiB0aGlzLiR2bm9kZS5kYXRhLnN0YXRpY1N0eWxlKVxuICAgIC8vIH1cbiAgICByZXR1cm4gdGhpcy5fcmVuZGVyU2xpZGVzKGNyZWF0ZUVsZW1lbnQpXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBpbml0ICh3ZWV4KSB7XG4gICAgd2VleC5yZWdpc3RlckNvbXBvbmVudCgnc2xpZGVyJywgc2xpZGVyKVxuICAgIHdlZXgucmVnaXN0ZXJDb21wb25lbnQoJ2N5Y2xlc2xpZGVyJywgc2xpZGVyKVxuICB9XG59XG4iLCIvKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCBzbGlkZU1peGluIGZyb20gJy4vc2xpZGVNaXhpbidcblxuY29uc3QgREVGQVVMVF9ORUlHSEJPUl9TUEFDRSA9IDIwXG5jb25zdCBERUZBVUxUX05FSUdIQk9SX0FMUEhBID0gMC42XG5jb25zdCBERUZBVUxUX05FSUdIQk9SX1NDQUxFID0gMC44XG5jb25zdCBERUZBVUxUX0NVUlJFTlRfSVRFTV9TQ0FMRSA9IDAuOVxuXG5jb25zdCBzbGlkZXJOZWlnaGJvciA9IHtcbiAgbWl4aW5zOiBbc2xpZGVNaXhpbl0sXG4gIHByb3BzOiB7XG4gICAgaW5kZXg6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgICBkZWZhdWx0OiAwXG4gICAgfSxcbiAgICBhdXRvUGxheToge1xuICAgICAgdHlwZTogW1N0cmluZywgQm9vbGVhbl0sXG4gICAgICBkZWZhdWx0OiBmYWxzZVxuICAgIH0sXG4gICAgaW50ZXJ2YWw6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgICBkZWZhdWx0OiAzMDAwXG4gICAgfSxcbiAgICBpbmZpbml0ZToge1xuICAgICAgdHlwZTogW1N0cmluZywgQm9vbGVhbl0sXG4gICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICBuZWlnaGJvclNwYWNlOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgIHZhbCA9IHBhcnNlRmxvYXQodmFsKVxuICAgICAgICByZXR1cm4gIWlzTmFOKHZhbCkgJiYgdmFsID4gMFxuICAgICAgfSxcbiAgICAgIGRlZmF1bHQ6IERFRkFVTFRfTkVJR0hCT1JfU1BBQ0VcbiAgICB9LFxuICAgIG5laWdoYm9yQWxwaGE6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgdmFsID0gcGFyc2VGbG9hdCh2YWwpXG4gICAgICAgIHJldHVybiAhaXNOYU4odmFsKSAmJiB2YWwgPj0gMCAmJiB2YWwgPD0gMVxuICAgICAgfSxcbiAgICAgIGRlZmF1bHQ6IERFRkFVTFRfTkVJR0hCT1JfQUxQSEFcbiAgICB9LFxuICAgIG5laWdoYm9yU2NhbGU6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgdmFsID0gcGFyc2VGbG9hdCh2YWwpXG4gICAgICAgIHJldHVybiAhaXNOYU4odmFsKSAmJiB2YWwgPj0gMCAmJiB2YWwgPD0gMVxuICAgICAgfSxcbiAgICAgIGRlZmF1bHQ6IERFRkFVTFRfTkVJR0hCT1JfU0NBTEVcbiAgICB9LFxuICAgIGN1cnJlbnRJdGVtU2NhbGU6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgdmFsID0gcGFyc2VGbG9hdCh2YWwpXG4gICAgICAgIHJldHVybiAhaXNOYU4odmFsKSAmJiB2YWwgPj0gMCAmJiB2YWwgPD0gMVxuICAgICAgfSxcbiAgICAgIGRlZmF1bHQ6IERFRkFVTFRfQ1VSUkVOVF9JVEVNX1NDQUxFXG4gICAgfVxuICB9LFxuXG4gIHdhdGNoOiB7XG4gICAgaW5kZXggKCkge1xuICAgICAgdGhpcy5jdXJyZW50SW5kZXggPSB0aGlzLl9ub3JtYWxpemVJbmRleCh0aGlzLmluZGV4KVxuICAgIH1cbiAgfSxcblxuICBkYXRhICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY3VycmVudEluZGV4OiB0aGlzLmluZGV4LFxuICAgICAgZnJhbWVDb3VudDogMFxuICAgIH1cbiAgfSxcblxuICBiZWZvcmVDcmVhdGUgKCkge1xuICAgIHRoaXMuaXNOZWlnaGJvciA9IHRydWVcbiAgICB0aGlzLndlZXhUeXBlID0gJ3NsaWRlci1uZWlnaGJvcidcbiAgfSxcblxuICByZW5kZXIgKGNyZWF0ZUVsZW1lbnQpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVuZGVyU2xpZGVzKGNyZWF0ZUVsZW1lbnQpXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBpbml0ICh3ZWV4KSB7XG4gICAgd2VleC5yZWdpc3RlckNvbXBvbmVudCgnc2xpZGVyLW5laWdoYm9yJywgc2xpZGVyTmVpZ2hib3IpXG4gIH1cbn1cbiIsIi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5sZXQgZ2V0Q29tcG9uZW50SW5saW5lU3R5bGVcblxuZnVuY3Rpb24gZ2V0SW5kaWNhdG9ySXRlbVN0eWxlIChtcywgaXNBY3RpdmUpIHtcbiAgY29uc3Qgc3R5bGUgPSB7fVxuICBjb25zdCBiZ0NvbG9yID0gaXNBY3RpdmVcbiAgICA/IG1zWydpdGVtU2VsZWN0ZWRDb2xvciddIHx8IG1zWydpdGVtLXNlbGVjdGVkLWNvbG9yJ11cbiAgICA6IG1zWydpdGVtQ29sb3InXSB8fCBtc1snaXRlbS1jb2xvciddXG4gIHN0eWxlWydiYWNrZ3JvdW5kLWNvbG9yJ10gPSBiZ0NvbG9yXG4gIHN0eWxlWyd3aWR0aCddID0gc3R5bGVbJ2hlaWdodCddID0gbXNbJ2l0ZW1TaXplJ10gfHwgbXNbJ2l0ZW0tc2l6ZSddXG4gIHJldHVybiBzdHlsZVxufVxuXG5mdW5jdGlvbiBnZXRTY29wZUlkcyAoY29udGV4dCkge1xuICBsZXQgc2NvcGVJZHMgPSBjb250ZXh0Ll9zY29wZUlkc1xuICBpZiAoc2NvcGVJZHMpIHtcbiAgICByZXR1cm4gc2NvcGVJZHNcbiAgfVxuICBlbHNlIHtcbiAgICBzY29wZUlkcyA9IFtdXG4gIH1cbiAgbGV0IHBhcmVudCA9IGNvbnRleHQuJHBhcmVudFxuICB3aGlsZSAocGFyZW50KSB7XG4gICAgbGV0IGlcbiAgICBpZiAoKGkgPSBwYXJlbnQuJG9wdGlvbnMpICYmIChpID0gaS5fc2NvcGVJZCkpIHtcbiAgICAgIHNjb3BlSWRzLnB1c2goaSlcbiAgICB9XG4gICAgcGFyZW50ID0gcGFyZW50LiRwYXJlbnRcbiAgfVxuICBjb250ZXh0Ll9zY29wZUlkcyA9IHNjb3BlSWRzXG4gIHJldHVybiBzY29wZUlkc1xufVxuXG5mdW5jdGlvbiBfcmVuZGVyIChjb250ZXh0LCBoKSB7XG4gIGNvbnN0IGNoaWxkcmVuID0gW11cbiAgY29uc3QgbWVyZ2VkU3R5bGUgPSBnZXRDb21wb25lbnRJbmxpbmVTdHlsZShjb250ZXh0KVxuICBjb25zdCBzY29wZUlkcyA9IGdldFNjb3BlSWRzKGNvbnRleHQpXG4gIGNvbnN0IGF0dHJzID0ge31cbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBzY29wZUlkcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBhdHRyc1tzY29wZUlkc1tpXV0gPSAnJ1xuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgTnVtYmVyKGNvbnRleHQuY291bnQpOyArK2kpIHtcbiAgICBjb25zdCBjbGFzc05hbWVzID0gWyd3ZWV4LWluZGljYXRvci1pdGVtIHdlZXgtZWwnXVxuICAgIGxldCBpc0FjdGl2ZSA9IGZhbHNlXG4gICAgaWYgKGkgPT09IE51bWJlcihjb250ZXh0LmFjdGl2ZSkpIHtcbiAgICAgIGNsYXNzTmFtZXMucHVzaCgnd2VleC1pbmRpY2F0b3ItaXRlbS1hY3RpdmUnKVxuICAgICAgaXNBY3RpdmUgPSB0cnVlXG4gICAgfVxuICAgIGNoaWxkcmVuLnB1c2goaCgnbWFyaycsIHtcbiAgICAgIGF0dHJzLFxuICAgICAgc3RhdGljQ2xhc3M6IGNsYXNzTmFtZXMuam9pbignICcpLFxuICAgICAgc3RhdGljU3R5bGU6IGdldEluZGljYXRvckl0ZW1TdHlsZShtZXJnZWRTdHlsZSwgaXNBY3RpdmUpXG4gICAgfSkpXG4gIH1cbiAgcmV0dXJuIGgoJ25hdicsIHtcbiAgICBhdHRyczogeyAnd2VleC10eXBlJzogJ2luZGljYXRvcicgfSxcbiAgICBzdGF0aWNDbGFzczogJ3dlZXgtaW5kaWNhdG9yIHdlZXgtY3QnXG4gIH0sIFtcbiAgICAvLyB0aGUgaW5kaWNhdG9yIG5hdiBtYXkgY292ZXIgdGhlIHNsaWRlcywgYW5kIG1heSBzdG9wIHRoZVxuICAgIC8vIGNsaWNrIGV2ZW50IGJlIHRyaWdnZXJlZCBvbiB0aGUgc2xpZGVzLlxuICAgIC8vIHNvIGEgc21hbGxlciB3cmFwcGVyIGlzIG5lZWRlZCB0byBwcmV2ZW50IHRoZSBvdmVybGFwLlxuICAgIC8vIFRoaXMgd3JhcHBlciB3aWxsIGNvdmVyIG9ubHkgdGhlIHdob2xlIHNpemUgb2YgYWxsIHRoZVxuICAgIC8vIGluZGljYXRvciBwb2ludGVycycgaXRlbS1zaXplcy5cbiAgICBoKCdkaXYnLCB7XG4gICAgICBzdGF0aWNDbGFzczogJ3dlZXgtaW5kaWNhdG9yLWlubmVyJ1xuICAgIH0sIGNoaWxkcmVuKVxuICBdKVxufVxuXG5jb25zdCBpbmRpY2F0b3IgPSB7XG4gIG5hbWU6ICd3ZWV4LWluZGljYXRvcicsXG4gIG1ldGhvZHM6IHtcbiAgICBzaG93OiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLiRlbC5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnXG4gICAgfVxuICB9LFxuICBwcm9wczoge1xuICAgIGl0ZW1Db2xvcjogW1N0cmluZ10sXG4gICAgaXRlbVNlbGVjdGVkQ29sb3I6IFtTdHJpbmddLFxuICAgIGl0ZW1TaXplOiBbU3RyaW5nXVxuICB9LFxuICBkYXRhICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY291bnQ6IDAsXG4gICAgICBhY3RpdmU6IDBcbiAgICB9XG4gIH0sXG4gIHJlbmRlciAoY3JlYXRlRWxlbWVudCkge1xuICAgIGNvbnN0IHsgY291bnQsIGFjdGl2ZSB9ID0gdGhpcy4kdm5vZGUuZGF0YS5hdHRycyB8fCB7fVxuICAgIHRoaXMuY291bnQgPSBjb3VudFxuICAgIHRoaXMuYWN0aXZlID0gYWN0aXZlXG4gICAgaWYgKCF0aGlzLmNvdW50KSB7IHJldHVybiB9XG4gICAgcmV0dXJuIF9yZW5kZXIodGhpcywgY3JlYXRlRWxlbWVudClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGluaXQgKHdlZXgpIHtcbiAgICBnZXRDb21wb25lbnRJbmxpbmVTdHlsZSA9IHdlZXguZ2V0Q29tcG9uZW50SW5saW5lU3R5bGVcbiAgICB3ZWV4LnJlZ2lzdGVyQ29tcG9uZW50KCdpbmRpY2F0b3InLCBpbmRpY2F0b3IpXG4gIH1cbn1cbiIsIi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgc2xpZGVyIGZyb20gJy4vc2xpZGVyJ1xuaW1wb3J0IG5laWdoYm9yIGZyb20gJy4vc2xpZGVyLW5laWdoYm9yJ1xuaW1wb3J0IGluZGljYXRvciBmcm9tICcuL2luZGljYXRvcidcbmltcG9ydCAnLi9zdHlsZS5jc3MnXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaW5pdCAod2VleCkge1xuICAgIHdlZXguaW5zdGFsbChzbGlkZXIpXG4gICAgd2VleC5pbnN0YWxsKG5laWdoYm9yKVxuICAgIHdlZXguaW5zdGFsbChpbmRpY2F0b3IpXG4gIH1cbn1cbiIsIi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0ICcuL3N0eWxlLmNzcydcblxuZnVuY3Rpb24gZ2V0VGV4dGFyZWEgKHdlZXgpIHtcbiAgY29uc3QgeyBleHRyYWN0Q29tcG9uZW50U3R5bGUgfSA9IHdlZXhcbiAgY29uc3QgeyBpbnB1dENvbW1vbiB9ID0gd2VleC5taXhpbnNcbiAgY29uc3QgeyBleHRlbmQsIG1hcEZvcm1FdmVudHMgfSA9IHdlZXgudXRpbHNcblxuICByZXR1cm4ge1xuICAgIG5hbWU6ICd3ZWV4LXRleHRhcmVhJyxcbiAgICBtaXhpbnM6IFtpbnB1dENvbW1vbl0sXG4gICAgcHJvcHM6IHtcbiAgICAgIHZhbHVlOiBTdHJpbmcsXG4gICAgICBwbGFjZWhvbGRlcjogU3RyaW5nLFxuICAgICAgZGlzYWJsZWQ6IHtcbiAgICAgICAgdHlwZTogW1N0cmluZywgQm9vbGVhbl0sXG4gICAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgYXV0b2ZvY3VzOiB7XG4gICAgICAgIHR5cGU6IFtTdHJpbmcsIEJvb2xlYW5dLFxuICAgICAgICBkZWZhdWx0OiBmYWxzZVxuICAgICAgfSxcbiAgICAgIHJvd3M6IHtcbiAgICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICAgICAgZGVmYXVsdDogMlxuICAgICAgfSxcbiAgICAgIHJldHVybktleVR5cGU6IFN0cmluZ1xuICAgIH0sXG5cbiAgICByZW5kZXIgKGNyZWF0ZUVsZW1lbnQpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAvLyBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICAgIC8vICAgdmFsaWRhdGVTdHlsZXMoJ3RleHRhcmVhJywgdGhpcy4kdm5vZGUuZGF0YSAmJiB0aGlzLiR2bm9kZS5kYXRhLnN0YXRpY1N0eWxlKVxuICAgICAgLy8gfVxuICAgICAgY29uc3QgZXZlbnRzID0gZXh0ZW5kKG1hcEZvcm1FdmVudHModGhpcykpXG4gICAgICByZXR1cm4gY3JlYXRlRWxlbWVudCgnaHRtbDp0ZXh0YXJlYScsIHtcbiAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAnd2VleC10eXBlJzogJ3RleHRhcmVhJyxcbiAgICAgICAgICB2YWx1ZTogdGhpcy52YWx1ZSxcbiAgICAgICAgICBkaXNhYmxlZDogKHRoaXMuZGlzYWJsZWQgIT09ICdmYWxzZScgJiYgdGhpcy5kaXNhYmxlZCAhPT0gZmFsc2UpLFxuICAgICAgICAgIGF1dG9mb2N1czogKHRoaXMuYXV0b2ZvY3VzICE9PSAnZmFsc2UnICYmIHRoaXMuYXV0b2ZvY3VzICE9PSBmYWxzZSksXG4gICAgICAgICAgcGxhY2Vob2xkZXI6IHRoaXMucGxhY2Vob2xkZXIsXG4gICAgICAgICAgcm93czogdGhpcy5yb3dzLFxuICAgICAgICAgICdyZXR1cm4ta2V5LXR5cGUnOiB0aGlzLnJldHVybktleVR5cGVcbiAgICAgICAgfSxcbiAgICAgICAgZG9tUHJvcHM6IHtcbiAgICAgICAgICB2YWx1ZTogdGhpcy52YWx1ZVxuICAgICAgICB9LFxuICAgICAgICBvbjogdGhpcy5jcmVhdGVLZXlib2FyZEV2ZW50KGV2ZW50cyksXG4gICAgICAgIHN0YXRpY0NsYXNzOiAnd2VleC10ZXh0YXJlYSB3ZWV4LWVsJyxcbiAgICAgICAgc3RhdGljU3R5bGU6IGV4dHJhY3RDb21wb25lbnRTdHlsZSh0aGlzKVxuICAgICAgfSlcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBpbml0ICh3ZWV4KSB7XG4gICAgd2VleC5yZWdpc3RlckNvbXBvbmVudCgndGV4dGFyZWEnLCBnZXRUZXh0YXJlYSh3ZWV4KSlcbiAgfVxufVxuIiwiLypcbiogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4qIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4qIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiogdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5mdW5jdGlvbiBnZXRWaWRlbyAod2VleCkge1xuICBjb25zdCB7XG4gICAgZXh0cmFjdENvbXBvbmVudFN0eWxlLFxuICAgIG1hcE5hdGl2ZUV2ZW50c1xuICB9ID0gd2VleFxuICBjb25zdCB7IGRpc3BhdGNoTmF0aXZlRXZlbnQgfSA9IHdlZXgudXRpbHNcblxuICByZXR1cm4ge1xuICAgIG5hbWU6ICd3ZWV4LXZpZGVvJyxcbiAgICBwcm9wczoge1xuICAgICAgc3JjOiBTdHJpbmcsXG4gICAgICBwbGF5U3RhdHVzOiB7XG4gICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgZGVmYXVsdDogJ3BhdXNlJyxcbiAgICAgICAgdmFsaWRhdG9yICh2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBbJ3BsYXknLCAncGF1c2UnXS5pbmRleE9mKHZhbHVlKSAhPT0gLTFcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGF1dG9wbGF5OiB7XG4gICAgICAgIHR5cGU6IFtTdHJpbmcsIEJvb2xlYW5dLFxuICAgICAgICBkZWZhdWx0OiBmYWxzZVxuICAgICAgfSxcbiAgICAgIGF1dG9QbGF5OiB7XG4gICAgICAgIHR5cGU6IFtTdHJpbmcsIEJvb2xlYW5dLFxuICAgICAgICBkZWZhdWx0OiBmYWxzZVxuICAgICAgfSxcbiAgICAgIHBsYXlzaW5saW5lOiB7XG4gICAgICAgIHR5cGU6IFtTdHJpbmcsIEJvb2xlYW5dLFxuICAgICAgICBkZWZhdWx0OiB0cnVlXG4gICAgICB9LFxuICAgICAgY29udHJvbHM6IHtcbiAgICAgICAgdHlwZTogW1N0cmluZywgQm9vbGVhbl0sXG4gICAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgICB9XG4gICAgfSxcblxuICAgIHJlbmRlciAoY3JlYXRlRWxlbWVudCkge1xuICAgICAgaWYgKHRoaXMucGxheVN0YXR1cyA9PT0gJ3BsYXknKSB7XG4gICAgICAgIHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy4kZWwgJiYgdGhpcy4kZWwucGxheSgpXG4gICAgICAgICAgfVxuICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGRpc3BhdGNoTmF0aXZlRXZlbnQodGhpcyAmJiB0aGlzLiRlbCwgJ2Vycm9yJywge1xuICAgICAgICAgICAgICBtZXNzYWdlOiBlcnIubWVzc2FnZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgICBlbHNlIGlmICh0aGlzLnBsYXlTdGF0dXMgPT09ICdwYXVzZScpIHtcbiAgICAgICAgdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRoaXMuJGVsICYmIHRoaXMuJGVsLnBhdXNlKClcbiAgICAgICAgfSlcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoJ2h0bWw6dmlkZW8nLCB7XG4gICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgJ3dlZXgtdHlwZSc6ICd2aWRlbycsXG4gICAgICAgICAgYXV0b3BsYXk6ICgodGhpcy5hdXRvcGxheSAhPT0gJ2ZhbHNlJyAmJiB0aGlzLmF1dG9wbGF5ICE9PSBmYWxzZSlcbiAgICAgICAgICAgIHx8ICh0aGlzLmF1dG9QbGF5ICE9PSAnZmFsc2UnICYmIHRoaXMuYXV0b1BsYXkgIT09IGZhbHNlKSksXG4gICAgICAgICAgJ3dlYmtpdC1wbGF5c2lubGluZSc6IHRoaXMucGxheXNpbmxpbmUsXG4gICAgICAgICAgY29udHJvbHM6IHRoaXMuY29udHJvbHMsXG4gICAgICAgICAgc3JjOiB0aGlzLnNyY1xuICAgICAgICB9LFxuICAgICAgICBvbjogbWFwTmF0aXZlRXZlbnRzKHRoaXMsIHtcbiAgICAgICAgICBwbGF5OiAnc3RhcnQnLFxuICAgICAgICAgIGVycm9yOiAnZmFpbCdcbiAgICAgICAgfSksXG4gICAgICAgIHN0YXRpY0NsYXNzOiAnd2VleC12aWRlbyB3ZWV4LWVsJyxcbiAgICAgICAgc3RhdGljU3R5bGU6IGV4dHJhY3RDb21wb25lbnRTdHlsZSh0aGlzKVxuICAgICAgfSlcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBpbml0ICh3ZWV4KSB7XG4gICAgd2VleC5yZWdpc3RlckNvbXBvbmVudCgndmlkZW8nLCBnZXRWaWRlbyh3ZWV4KSlcbiAgfVxufVxuIiwiLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgJy4vc3R5bGUuY3NzJ1xuXG5mdW5jdGlvbiBnZXRXZWIgKHdlZXgpIHtcbiAgY29uc3QgeyBleHRyYWN0Q29tcG9uZW50U3R5bGUgfSA9IHdlZXhcbiAgY29uc3QgeyBkaXNwYXRjaE5hdGl2ZUV2ZW50IH0gPSB3ZWV4LnV0aWxzXG5cbiAgcmV0dXJuIHtcbiAgICBkYXRhICgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGN1cnJlbnRTcmM6ICcnXG4gICAgICB9XG4gICAgfSxcbiAgICBuYW1lOiAnd2VleC13ZWInLFxuICAgIHByb3BzOiB7XG4gICAgICBzcmM6IFN0cmluZ1xuICAgIH0sXG4gICAgd2F0Y2g6IHtcbiAgICAgIHNyYyAobmV3VmFsKSB7XG4gICAgICAgIHRoaXMuY3VycmVudFNyYyA9IG5ld1ZhbFxuICAgICAgfVxuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgICAgZ29CYWNrICgpIHtcbiAgICAgICAgY29uc3QgZWwgPSB0aGlzLiRlbFxuICAgICAgICBpZiAoZWwpIHtcbiAgICAgICAgICBjb25zdCB3aW4gPSBlbC5jb250ZW50V2luZG93XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHdpbi5oaXN0b3J5LmJhY2soKVxuICAgICAgICAgICAgdGhpcy5jdXJyZW50U3JjID0gd2luLmxvY2F0aW9uLmhyZWZcbiAgICAgICAgICB9XG4gICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgZGlzcGF0Y2hOYXRpdmVFdmVudChlbCwgJ2Vycm9yJywgZXJyKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGdvRm9yd2FyZCAoKSB7XG4gICAgICAgIGNvbnN0IGVsID0gdGhpcy4kZWxcbiAgICAgICAgaWYgKGVsKSB7XG4gICAgICAgICAgY29uc3Qgd2luID0gZWwuY29udGVudFdpbmRvd1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB3aW4uaGlzdG9yeS5mb3J3YXJkKClcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFNyYyA9IHdpbi5sb2NhdGlvbi5ocmVmXG4gICAgICAgICAgfVxuICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGRpc3BhdGNoTmF0aXZlRXZlbnQoZWwsICdlcnJvcicsIGVycilcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICByZWxvYWQgKCkge1xuICAgICAgICBjb25zdCBlbCA9IHRoaXMuJGVsXG4gICAgICAgIGlmIChlbCkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBlbC5jb250ZW50V2luZG93LmxvY2F0aW9uLnJlbG9hZCgpXG4gICAgICAgICAgICBkaXNwYXRjaE5hdGl2ZUV2ZW50KGVsLCAncGFnZXN0YXJ0JywgeyB1cmw6IHRoaXMuY3VycmVudFNyYyB9KVxuICAgICAgICAgIH1cbiAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBkaXNwYXRjaE5hdGl2ZUV2ZW50KGVsLCAnZXJyb3InLCBlcnIpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGNyZWF0ZWQgKCkge1xuICAgICAgdGhpcy5jdXJyZW50U3JjID0gdGhpcy5zcmNcbiAgICB9LFxuXG4gICAgbW91bnRlZCAoKSB7XG4gICAgICBjb25zdCBlbCA9IHRoaXMuJGVsXG4gICAgICB0aGlzLl9wcmV2U3JjID0gdGhpcy5jdXJyZW50U3JjXG4gICAgICBpZiAoZWwpIHtcbiAgICAgICAgZGlzcGF0Y2hOYXRpdmVFdmVudChlbCwgJ3BhZ2VzdGFydCcsIHsgdXJsOiB0aGlzLmN1cnJlbnRTcmMgfSlcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgdXBkYXRlZCAoKSB7XG4gICAgICBpZiAodGhpcy5jdXJyZW50U3JjICE9PSB0aGlzLl9wcmV2U3JjKSB7XG4gICAgICAgIHRoaXMuX3ByZXZTcmMgPSB0aGlzLmN1cnJlbnRTcmNcbiAgICAgICAgZGlzcGF0Y2hOYXRpdmVFdmVudCh0aGlzLiRlbCwgJ3BhZ2VzdGFydCcsIHsgdXJsOiB0aGlzLmN1cnJlbnRTcmMgfSlcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVuZGVyIChjcmVhdGVFbGVtZW50KSB7XG4gICAgICByZXR1cm4gY3JlYXRlRWxlbWVudCgnaWZyYW1lJywge1xuICAgICAgICBhdHRyczoge1xuICAgICAgICAgICd3ZWV4LXR5cGUnOiAnd2ViJyxcbiAgICAgICAgICBzcmM6IHRoaXMuY3VycmVudFNyY1xuICAgICAgICB9LFxuICAgICAgICBvbjoge1xuICAgICAgICAgIGxvYWQ6IGV2ZW50ID0+IHtcbiAgICAgICAgICAgIHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgY29uc3QgZWwgPSB0aGlzLiRlbFxuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGh0bWwgPSBlbC5jb250ZW50V2luZG93LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFxuICAgICAgICAgICAgICAgIGlmIChodG1sKSB7XG4gICAgICAgICAgICAgICAgICBkaXNwYXRjaE5hdGl2ZUV2ZW50KGVsLCAncGFnZWZpbmlzaCcsIHsgdXJsOiB0aGlzLmN1cnJlbnRTcmMgfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICBkaXNwYXRjaE5hdGl2ZUV2ZW50KGVsLCAnZXJyb3InLCBuZXcgRXJyb3IoJ1t2dWUtcmVuZGVyXTpmb3VuZCBubyBwYWdlIGNvbnRlbnQuJykpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaE5hdGl2ZUV2ZW50KGVsLCAnZXJyb3InLCBlcnIpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzdGF0aWNDbGFzczogJ3dlZXgtd2ViIHdlZXgtZWwnLFxuICAgICAgICBzdGF0aWNTdHlsZTogZXh0cmFjdENvbXBvbmVudFN0eWxlKHRoaXMpXG4gICAgICB9KVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGluaXQgKHdlZXgpIHtcbiAgICB3ZWV4LnJlZ2lzdGVyQ29tcG9uZW50KCd3ZWInLCBnZXRXZWIod2VleCkpXG4gIH1cbn1cbiIsIi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLy8gaW1wb3J0IGEgZnJvbSAnLi9hJ1xuLy8gaW1wb3J0IGRpdiBmcm9tICcuL2Rpdidcbi8vIGltcG9ydCBpbWFnZSBmcm9tICcuL2ltYWdlJ1xuaW1wb3J0IGlucHV0IGZyb20gJy4vaW5wdXQnXG5pbXBvcnQgX3N3aXRjaCBmcm9tICcuL3N3aXRjaCdcbmltcG9ydCBzY3JvbGxhYmxlIGZyb20gJy4vc2Nyb2xsYWJsZSdcbmltcG9ydCBzbGlkZXIgZnJvbSAnLi9zbGlkZXInXG4vLyBpbXBvcnQgdGV4dCBmcm9tICcuL3RleHQnXG5pbXBvcnQgdGV4dGFyZWEgZnJvbSAnLi90ZXh0YXJlYSdcbmltcG9ydCB2aWRlbyBmcm9tICcuL3ZpZGVvJ1xuaW1wb3J0IHdlYiBmcm9tICcuL3dlYidcblxuZXhwb3J0IGRlZmF1bHQgW1xuICAvLyBhLFxuICAvLyBkaXYsXG4gIC8vIGltYWdlLFxuICBpbnB1dCxcbiAgX3N3aXRjaCxcbiAgc2Nyb2xsYWJsZSxcbiAgc2xpZGVyLFxuICAvLyB0ZXh0LFxuICB0ZXh0YXJlYSxcbiAgdmlkZW8sXG4gIHdlYlxuXVxuIiwiLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4ndXNlIHN0cmljdCdcblxuY29uc3Qgc3VwcG9ydEdlb2xvY2F0aW9uID0gJ2dlb2xvY2F0aW9uJyBpbiBuYXZpZ2F0b3JcbmNvbnN0IGVycm9yTXNnID0gYFtoNS1yZW5kZXJdOiBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBnZW9sb2NhdGlvbi5gXG5cbmNvbnN0IGdlb2xvY2F0aW9uID0ge1xuICAvLyBvcHRpb25zOlxuICAvLyAgIC0gZW5hYmxlSGlnaEFjY3VyYWN5IG9wdGlvbmFsLCB2YWx1ZSBpcyB0cnVlIG9yIGZhbHNlLCBmYWxzZSBieSBkZWZhdWx0LlxuICAvLyAgIC0gdGltZW91dCBbbm9uZS1uYXRpdmVdIG9wdGlvbmFsLCB2YWx1ZSBpcyBhIG51bWJlciAobWlsbGlzZWNvbmRzKSwgZGVmYXVsdCB2YXVsZSBpcyBGSU5GSU5JVFkuXG4gIC8vICAgLSBtYXhpbXVtQWdlIFtub25lLW5hdGl2ZV0gb3B0aW9uYWwsIHZhbHVlIGlzIGEgbnVtYmVyIChtaWxsaXNlY29uZHMpLCBkZWZhdWx0IHZhbHVlIGlzIDAuXG4gIGdldEN1cnJlbnRQb3NpdGlvbiAoc3VjY2Vzc0NiSWQsIGVycm9yQ2JJZCwgb3B0aW9ucykge1xuICAgIGNvbnN0IHN1Y2Nlc3NDYiA9IHBvcyA9PiB0aGlzLnNlbmRlci5wZXJmb3JtQ2FsbGJhY2soc3VjY2Vzc0NiSWQsIHBvcylcbiAgICBjb25zdCBlcnJvckNiID0gZXJyID0+IHRoaXMuc2VuZGVyLnBlcmZvcm1DYWxsYmFjayhlcnJvckNiSWQsIGVycilcbiAgICBpZiAoc3VwcG9ydEdlb2xvY2F0aW9uKSB7XG4gICAgICBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKHN1Y2Nlc3NDYiwgZXJyb3JDYiwgb3B0aW9ucylcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBjb25zb2xlLndhcm4oZXJyb3JNc2cpXG4gICAgICBlcnJvckNiKG5ldyBFcnJvcihlcnJvck1zZykpXG4gICAgfVxuICB9LFxuXG4gIC8vIG9wdGlvbnM6IHRoZSBzYW1lIHdpdGggYGdldEN1cnJlbnRQb3NpdGlvbmAuXG4gIHdhdGNoUG9zaXRpb24gKHN1Y2Nlc3NDYklkLCBlcnJvckNiSWQsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBzdWNjZXNzQ2IgPSBwb3MgPT4gdGhpcy5zZW5kZXIucGVyZm9ybUNhbGxiYWNrKHN1Y2Nlc3NDYklkLCBwb3MsIHRydWUpXG4gICAgY29uc3QgZXJyb3JDYiA9IGVyciA9PiB0aGlzLnNlbmRlci5wZXJmb3JtQ2FsbGJhY2soZXJyb3JDYklkLCBlcnIpXG4gICAgaWYgKHN1cHBvcnRHZW9sb2NhdGlvbikge1xuICAgICAgY29uc3QgaWQgPSBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24ud2F0Y2hQb3NpdGlvbihwb3MgPT4ge1xuICAgICAgICBwb3Mud2F0Y2hJZCA9IGlkXG4gICAgICAgIHN1Y2Nlc3NDYihwb3MpXG4gICAgICB9LCBlcnJvckNiLCBvcHRpb25zKVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGNvbnNvbGUud2FybihlcnJvck1zZylcbiAgICAgIGVycm9yQ2IobmV3IEVycm9yKGVycm9yTXNnKSlcbiAgICB9XG4gIH0sXG5cbiAgY2xlYXJXYXRjaCAod2F0Y2hJZCkge1xuICAgIGlmIChzdXBwb3J0R2VvbG9jYXRpb24pIHtcbiAgICAgIG5hdmlnYXRvci5nZW9sb2NhdGlvbi5jbGVhcldhdGNoKHdhdGNoSWQpXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgY29uc29sZS53YXJuKGVycm9yTXNnKVxuICAgIH1cbiAgfVxufVxuXG5jb25zdCBtZXRhID0ge1xuICBnZW9sb2NhdGlvbjogW3tcbiAgICBuYW1lOiAnZ2V0Q3VycmVudFBvc2l0aW9uJyxcbiAgICBhcmdzOiBbJ2Z1bmN0aW9uJywgJ2Z1bmN0aW9uJywgJ29iamVjdCddXG4gIH0sIHtcbiAgICBuYW1lOiAnd2F0Y2hQb3NpdGlvbicsXG4gICAgYXJnczogWydmdW5jdGlvbicsICdmdW5jdGlvbicsICdvYmplY3QnXVxuICB9LCB7XG4gICAgbmFtZTogJ2NsZWFyV2F0Y2gnLFxuICAgIGFyZ3M6IFsnc3RyaW5nJ11cbiAgfV1cbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBpbml0IChXZWV4KSB7XG4gICAgV2VleC5yZWdpc3RlckFwaU1vZHVsZSgnZ2VvbG9jYXRpb24nLCBnZW9sb2NhdGlvbiwgbWV0YSlcbiAgfVxufVxuIiwiLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKiBnbG9iYWwgbG9jYWxTdG9yYWdlICovXG5cbid1c2Ugc3RyaWN0J1xuXG5sZXQgc3VwcG9ydExvY2FsU3RvcmFnZSA9IGZhbHNlXG50cnkge1xuICBzdXBwb3J0TG9jYWxTdG9yYWdlID0gdHlwZW9mIGxvY2FsU3RvcmFnZSAhPT0gJ3VuZGVmaW5lZCdcbn1cbmNhdGNoIChlcnIpIHtcbiAgLy8gbm90IHN1cHBvcnQuXG59XG5cbmNvbnN0IFNVQ0NFU1MgPSAnc3VjY2VzcydcbmNvbnN0IEZBSUxFRCA9ICdmYWlsZWQnXG5jb25zdCBJTlZBTElEX1BBUkFNID0gJ2ludmFsaWRfcGFyYW0nXG5jb25zdCBVTkRFRklORUQgPSAndW5kZWZpbmVkJ1xuXG5mdW5jdGlvbiBjYWxsRmFpbCAoc2VuZGVyLCBjYWxsYmFja0lkLCBlcnJvck1zZykge1xuICBzZW5kZXIucGVyZm9ybUNhbGxiYWNrKGNhbGxiYWNrSWQsIHtcbiAgICByZXN1bHQ6IEZBSUxFRCxcbiAgICBkYXRhOiBlcnJvck1zZyB8fCBVTkRFRklORURcbiAgfSlcbn1cblxuZnVuY3Rpb24gY2FsbE5vdFN1cHBvcnRGYWlsIChzZW5kZXIsIGNhbGxiYWNrSWQpIHtcbiAgc2VuZGVyLnBlcmZvcm1DYWxsYmFjayhjYWxsYmFja0lkLCB7XG4gICAgcmVzdWx0OiBGQUlMRUQsXG4gICAgZGF0YTogJ2xvY2FsU3RvcmFnZSBpcyBkaXNhYmxlZCBvciBub3Qgc3VwcG9ydGVkLidcbiAgfSlcbn1cblxuY29uc3Qgc3RvcmFnZSA9IHtcblxuICAvKipcbiAgICogV2hlbiBwYXNzZWQgYSBrZXkgbmFtZSBhbmQgdmFsdWUsIHdpbGwgYWRkIHRoYXQga2V5IHRvIHRoZSBzdG9yYWdlLFxuICAgKiBvciB1cGRhdGUgdGhhdCBrZXkncyB2YWx1ZSBpZiBpdCBhbHJlYWR5IGV4aXN0cy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgbm90IG51bGwgbm9yIHVuZGlmaW5lZO+8jGJ1dCAwIHdvcmtzLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja0lkXG4gICAqL1xuICBzZXRJdGVtOiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSwgY2FsbGJhY2tJZCkge1xuICAgIGNvbnN0IHNlbmRlciA9IHRoaXMuc2VuZGVyXG4gICAgaWYgKCFzdXBwb3J0TG9jYWxTdG9yYWdlKSB7XG4gICAgICByZXR1cm4gY2FsbE5vdFN1cHBvcnRGYWlsKHNlbmRlciwgY2FsbGJhY2tJZClcbiAgICB9XG4gICAgaWYgKCFrZXkgfHwgKCF2YWx1ZSAmJiB2YWx1ZSAhPT0gMCkpIHtcbiAgICAgIHNlbmRlci5wZXJmb3JtQ2FsbGJhY2soY2FsbGJhY2tJZCwge1xuICAgICAgICByZXN1bHQ6ICdmYWlsZWQnLFxuICAgICAgICBkYXRhOiBJTlZBTElEX1BBUkFNXG4gICAgICB9KVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIHZhbHVlKVxuICAgICAgc2VuZGVyLnBlcmZvcm1DYWxsYmFjayhjYWxsYmFja0lkLCB7XG4gICAgICAgIHJlc3VsdDogU1VDQ0VTUyxcbiAgICAgICAgZGF0YTogVU5ERUZJTkVEXG4gICAgICB9KVxuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgLy8gYWNjZXB0IGFueSBleGNlcHRpb24gdGhyb3duIGR1cmluZyBhIHN0b3JhZ2UgYXR0ZW1wdCBhcyBhIHF1b3RhIGVycm9yXG4gICAgICBjYWxsRmFpbChzZW5kZXIsIGNhbGxiYWNrSWQpXG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBXaGVuIHBhc3NlZCBhIGtleSBuYW1lLCB3aWxsIHJldHVybiB0aGF0IGtleSdzIHZhbHVlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrSWRcbiAgICovXG4gIGdldEl0ZW06IGZ1bmN0aW9uIChrZXksIGNhbGxiYWNrSWQpIHtcbiAgICBjb25zdCBzZW5kZXIgPSB0aGlzLnNlbmRlclxuICAgIGlmICghc3VwcG9ydExvY2FsU3RvcmFnZSkge1xuICAgICAgcmV0dXJuIGNhbGxOb3RTdXBwb3J0RmFpbChzZW5kZXIsIGNhbGxiYWNrSWQpXG4gICAgfVxuICAgIGlmICgha2V5KSB7XG4gICAgICBzZW5kZXIucGVyZm9ybUNhbGxiYWNrKGNhbGxiYWNrSWQsIHtcbiAgICAgICAgcmVzdWx0OiBGQUlMRUQsXG4gICAgICAgIGRhdGE6IElOVkFMSURfUEFSQU1cbiAgICAgIH0pXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHZhbCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSlcbiAgICAgIHNlbmRlci5wZXJmb3JtQ2FsbGJhY2soY2FsbGJhY2tJZCwge1xuICAgICAgICByZXN1bHQ6IHZhbCA/IFNVQ0NFU1MgOiBGQUlMRUQsXG4gICAgICAgIGRhdGE6IHZhbCB8fCBVTkRFRklORURcbiAgICAgIH0pXG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAvLyBhY2NlcHQgYW55IGV4Y2VwdGlvbiB0aHJvd24gZHVyaW5nIGEgc3RvcmFnZSBhdHRlbXB0IGFzIGEgcXVvdGEgZXJyb3JcbiAgICAgIGNhbGxGYWlsKHNlbmRlciwgY2FsbGJhY2tJZClcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqV2hlbiBwYXNzZWQgYSBrZXkgbmFtZSwgd2lsbCByZW1vdmUgdGhhdCBrZXkgZnJvbSB0aGUgc3RvcmFnZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja0lkXG4gICAqL1xuICByZW1vdmVJdGVtOiBmdW5jdGlvbiAoa2V5LCBjYWxsYmFja0lkKSB7XG4gICAgY29uc3Qgc2VuZGVyID0gdGhpcy5zZW5kZXJcbiAgICBpZiAoIXN1cHBvcnRMb2NhbFN0b3JhZ2UpIHtcbiAgICAgIHJldHVybiBjYWxsTm90U3VwcG9ydEZhaWwoc2VuZGVyLCBjYWxsYmFja0lkKVxuICAgIH1cbiAgICBpZiAoIWtleSkge1xuICAgICAgc2VuZGVyLnBlcmZvcm1DYWxsYmFjayhjYWxsYmFja0lkLCB7XG4gICAgICAgIHJlc3VsdDogRkFJTEVELFxuICAgICAgICBkYXRhOiBJTlZBTElEX1BBUkFNXG4gICAgICB9KVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpXG4gICAgICBzZW5kZXIucGVyZm9ybUNhbGxiYWNrKGNhbGxiYWNrSWQsIHtcbiAgICAgICAgcmVzdWx0OiBTVUNDRVNTLFxuICAgICAgICBkYXRhOiBVTkRFRklORURcbiAgICAgIH0pXG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAvLyBhY2NlcHQgYW55IGV4Y2VwdGlvbiB0aHJvd24gZHVyaW5nIGEgc3RvcmFnZSBhdHRlbXB0IGFzIGEgcXVvdGEgZXJyb3JcbiAgICAgIGNhbGxGYWlsKHNlbmRlciwgY2FsbGJhY2tJZClcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gaW50ZWdlciByZXByZXNlbnRpbmcgdGhlIG51bWJlciBvZiBkYXRhIGl0ZW1zIHN0b3JlZCBpbiB0aGUgU3RvcmFnZSBvYmplY3QuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrSWRcbiAgICovXG4gIGxlbmd0aDogZnVuY3Rpb24gKGNhbGxiYWNrSWQpIHtcbiAgICBjb25zdCBzZW5kZXIgPSB0aGlzLnNlbmRlclxuICAgIGlmICghc3VwcG9ydExvY2FsU3RvcmFnZSkge1xuICAgICAgcmV0dXJuIGNhbGxOb3RTdXBwb3J0RmFpbChzZW5kZXIsIGNhbGxiYWNrSWQpXG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBjb25zdCBsZW4gPSBsb2NhbFN0b3JhZ2UubGVuZ3RoXG4gICAgICBzZW5kZXIucGVyZm9ybUNhbGxiYWNrKGNhbGxiYWNrSWQsIHtcbiAgICAgICAgcmVzdWx0OiBTVUNDRVNTLFxuICAgICAgICBkYXRhOiBsZW5cbiAgICAgIH0pXG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAvLyBhY2NlcHQgYW55IGV4Y2VwdGlvbiB0aHJvd24gZHVyaW5nIGEgc3RvcmFnZSBhdHRlbXB0IGFzIGEgcXVvdGEgZXJyb3JcbiAgICAgIGNhbGxGYWlsKHNlbmRlciwgY2FsbGJhY2tJZClcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gYXJyYXkgdGhhdCBjb250YWlucyBhbGwga2V5cyBzdG9yZWQgaW4gU3RvcmFnZSBvYmplY3QuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrSWRcbiAgICovXG4gIGdldEFsbEtleXM6IGZ1bmN0aW9uIChjYWxsYmFja0lkKSB7XG4gICAgY29uc3Qgc2VuZGVyID0gdGhpcy5zZW5kZXJcbiAgICBpZiAoIXN1cHBvcnRMb2NhbFN0b3JhZ2UpIHtcbiAgICAgIHJldHVybiBjYWxsTm90U3VwcG9ydEZhaWwoc2VuZGVyLCBjYWxsYmFja0lkKVxuICAgIH1cbiAgICB0cnkge1xuICAgICAgY29uc3QgX2FyciA9IFtdXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxvY2FsU3RvcmFnZS5sZW5ndGg7IGkrKykge1xuICAgICAgICBfYXJyLnB1c2gobG9jYWxTdG9yYWdlLmtleShpKSlcbiAgICAgIH1cbiAgICAgIHNlbmRlci5wZXJmb3JtQ2FsbGJhY2soY2FsbGJhY2tJZCwge1xuICAgICAgICByZXN1bHQ6IFNVQ0NFU1MsXG4gICAgICAgIGRhdGE6IF9hcnJcbiAgICAgIH0pXG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAvLyBhY2NlcHQgYW55IGV4Y2VwdGlvbiB0aHJvd24gZHVyaW5nIGEgc3RvcmFnZSBhdHRlbXB0IGFzIGEgcXVvdGEgZXJyb3JcbiAgICAgIGNhbGxGYWlsKHNlbmRlciwgY2FsbGJhY2tJZClcbiAgICB9XG4gIH1cbn1cblxuY29uc3QgbWV0YSA9IHtcbiAgc3RvcmFnZTogW3tcbiAgICBuYW1lOiAnc2V0SXRlbScsXG4gICAgYXJnczogWydzdHJpbmcnLCAnc3RyaW5nJywgJ2Z1bmN0aW9uJ11cbiAgfSwge1xuICAgIG5hbWU6ICdnZXRJdGVtJyxcbiAgICBhcmdzOiBbJ3N0cmluZycsICdmdW5jdGlvbiddXG4gIH0sIHtcbiAgICBuYW1lOiAncmVtb3ZlSXRlbScsXG4gICAgYXJnczogWydzdHJpbmcnLCAnZnVuY3Rpb24nXVxuICB9LCB7XG4gICAgbmFtZTogJ2xlbmd0aCcsXG4gICAgYXJnczogWydmdW5jdGlvbiddXG4gIH0sIHtcbiAgICBuYW1lOiAnZ2V0QWxsS2V5cycsXG4gICAgYXJnczogWydmdW5jdGlvbiddXG4gIH1dXG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaW5pdDogZnVuY3Rpb24gKFdlZXgpIHtcbiAgICBXZWV4LnJlZ2lzdGVyQXBpTW9kdWxlKCdzdG9yYWdlJywgc3RvcmFnZSwgbWV0YSlcbiAgfVxufVxuIiwiKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSAmJiAod2luZG93ID0ge2N0cmw6IHt9LCBsaWI6IHt9fSk7IXdpbmRvdy5jdHJsICYmICh3aW5kb3cuY3RybCA9IHt9KTshd2luZG93LmxpYiAmJiAod2luZG93LmxpYiA9IHt9KTshZnVuY3Rpb24oYSxiKXtmdW5jdGlvbiBjKGEpe3ZhciBiPXt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwicGFyYW1zXCIse3NldDpmdW5jdGlvbihhKXtpZihcIm9iamVjdFwiPT10eXBlb2YgYSl7Zm9yKHZhciBjIGluIGIpZGVsZXRlIGJbY107Zm9yKHZhciBjIGluIGEpYltjXT1hW2NdfX0sZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGJ9LGVudW1lcmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInNlYXJjaFwiLHtzZXQ6ZnVuY3Rpb24oYSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGEpezA9PT1hLmluZGV4T2YoXCI/XCIpJiYoYT1hLnN1YnN0cigxKSk7dmFyIGM9YS5zcGxpdChcIiZcIik7Zm9yKHZhciBkIGluIGIpZGVsZXRlIGJbZF07Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspe3ZhciBmPWNbZV0uc3BsaXQoXCI9XCIpO2lmKHZvaWQgMCE9PWZbMV0mJihmWzFdPWZbMV0udG9TdHJpbmcoKSksZlswXSl0cnl7YltkZWNvZGVVUklDb21wb25lbnQoZlswXSldPWRlY29kZVVSSUNvbXBvbmVudChmWzFdKX1jYXRjaChnKXtiW2ZbMF1dPWZbMV19fX19LGdldDpmdW5jdGlvbigpe3ZhciBhPVtdO2Zvcih2YXIgYyBpbiBiKWlmKHZvaWQgMCE9PWJbY10paWYoXCJcIiE9PWJbY10pdHJ5e2EucHVzaChlbmNvZGVVUklDb21wb25lbnQoYykrXCI9XCIrZW5jb2RlVVJJQ29tcG9uZW50KGJbY10pKX1jYXRjaChkKXthLnB1c2goYytcIj1cIitiW2NdKX1lbHNlIHRyeXthLnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KGMpKX1jYXRjaChkKXthLnB1c2goYyl9cmV0dXJuIGEubGVuZ3RoP1wiP1wiK2Euam9pbihcIiZcIik6XCJcIn0sZW51bWVyYWJsZTohMH0pO3ZhciBjO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiaGFzaFwiLHtzZXQ6ZnVuY3Rpb24oYSl7XCJzdHJpbmdcIj09dHlwZW9mIGEmJihhJiZhLmluZGV4T2YoXCIjXCIpPDAmJihhPVwiI1wiK2EpLGM9YXx8XCJcIil9LGdldDpmdW5jdGlvbigpe3JldHVybiBjfSxlbnVtZXJhYmxlOiEwfSksdGhpcy5zZXQ9ZnVuY3Rpb24oYSl7YT1hfHxcIlwiO3ZhciBiO2lmKCEoYj1hLm1hdGNoKG5ldyBSZWdFeHAoXCJeKFthLXowLTktXSs6KT9bL117Mn0oPzooW15ALzo/XSspKD86OihbXkAvOl0rKSk/QCk/KFteOi8/I10rKSg/Ols6XShbMC05XSspKT8oWy9dW14/IztdKik/KD86Wz9dKFteI10qKSk/KFsjXVteP10qKT8kXCIsXCJpXCIpKSkpdGhyb3cgbmV3IEVycm9yKFwiV3JvbmcgdXJpIHNjaGVtZS5cIik7dGhpcy5wcm90b2NvbD1iWzFdfHwoXCJvYmplY3RcIj09dHlwZW9mIGxvY2F0aW9uP2xvY2F0aW9uLnByb3RvY29sOlwiXCIpLHRoaXMudXNlcm5hbWU9YlsyXXx8XCJcIix0aGlzLnBhc3N3b3JkPWJbM118fFwiXCIsdGhpcy5ob3N0bmFtZT10aGlzLmhvc3Q9Yls0XSx0aGlzLnBvcnQ9Yls1XXx8XCJcIix0aGlzLnBhdGhuYW1lPWJbNl18fFwiL1wiLHRoaXMuc2VhcmNoPWJbN118fFwiXCIsdGhpcy5oYXNoPWJbOF18fFwiXCIsdGhpcy5vcmlnaW49dGhpcy5wcm90b2NvbCtcIi8vXCIrdGhpcy5ob3N0bmFtZX0sdGhpcy50b1N0cmluZz1mdW5jdGlvbigpe3ZhciBhPXRoaXMucHJvdG9jb2wrXCIvL1wiO3JldHVybiB0aGlzLnVzZXJuYW1lJiYoYSs9dGhpcy51c2VybmFtZSx0aGlzLnBhc3N3b3JkJiYoYSs9XCI6XCIrdGhpcy5wYXNzd29yZCksYSs9XCJAXCIpLGErPXRoaXMuaG9zdCx0aGlzLnBvcnQmJlwiODBcIiE9PXRoaXMucG9ydCYmKGErPVwiOlwiK3RoaXMucG9ydCksdGhpcy5wYXRobmFtZSYmKGErPXRoaXMucGF0aG5hbWUpLHRoaXMuc2VhcmNoJiYoYSs9dGhpcy5zZWFyY2gpLHRoaXMuaGFzaCYmKGErPXRoaXMuaGFzaCksYX0sYSYmdGhpcy5zZXQoYS50b1N0cmluZygpKX1iLmh0dHB1cmw9ZnVuY3Rpb24oYSl7cmV0dXJuIG5ldyBjKGEpfX0od2luZG93LHdpbmRvdy5saWJ8fCh3aW5kb3cubGliPXt9KSk7O21vZHVsZS5leHBvcnRzID0gd2luZG93LmxpYlsnaHR0cHVybCddOyIsIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHN0cikge1xuXHRyZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHN0cikucmVwbGFjZSgvWyEnKCkqXS9nLCBmdW5jdGlvbiAoYykge1xuXHRcdHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7XG5cdH0pO1xufTtcbiIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgc3RyaWN0VXJpRW5jb2RlID0gcmVxdWlyZSgnc3RyaWN0LXVyaS1lbmNvZGUnKTtcbnZhciBvYmplY3RBc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbmZ1bmN0aW9uIGVuY29kZXJGb3JBcnJheUZvcm1hdChvcHRzKSB7XG5cdHN3aXRjaCAob3B0cy5hcnJheUZvcm1hdCkge1xuXHRcdGNhc2UgJ2luZGV4Jzpcblx0XHRcdHJldHVybiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSwgaW5kZXgpIHtcblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSBudWxsID8gW1xuXHRcdFx0XHRcdGVuY29kZShrZXksIG9wdHMpLFxuXHRcdFx0XHRcdCdbJyxcblx0XHRcdFx0XHRpbmRleCxcblx0XHRcdFx0XHQnXSdcblx0XHRcdFx0XS5qb2luKCcnKSA6IFtcblx0XHRcdFx0XHRlbmNvZGUoa2V5LCBvcHRzKSxcblx0XHRcdFx0XHQnWycsXG5cdFx0XHRcdFx0ZW5jb2RlKGluZGV4LCBvcHRzKSxcblx0XHRcdFx0XHQnXT0nLFxuXHRcdFx0XHRcdGVuY29kZSh2YWx1ZSwgb3B0cylcblx0XHRcdFx0XS5qb2luKCcnKTtcblx0XHRcdH07XG5cblx0XHRjYXNlICdicmFja2V0Jzpcblx0XHRcdHJldHVybiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IG51bGwgPyBlbmNvZGUoa2V5LCBvcHRzKSA6IFtcblx0XHRcdFx0XHRlbmNvZGUoa2V5LCBvcHRzKSxcblx0XHRcdFx0XHQnW109Jyxcblx0XHRcdFx0XHRlbmNvZGUodmFsdWUsIG9wdHMpXG5cdFx0XHRcdF0uam9pbignJyk7XG5cdFx0XHR9O1xuXG5cdFx0ZGVmYXVsdDpcblx0XHRcdHJldHVybiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IG51bGwgPyBlbmNvZGUoa2V5LCBvcHRzKSA6IFtcblx0XHRcdFx0XHRlbmNvZGUoa2V5LCBvcHRzKSxcblx0XHRcdFx0XHQnPScsXG5cdFx0XHRcdFx0ZW5jb2RlKHZhbHVlLCBvcHRzKVxuXHRcdFx0XHRdLmpvaW4oJycpO1xuXHRcdFx0fTtcblx0fVxufVxuXG5mdW5jdGlvbiBwYXJzZXJGb3JBcnJheUZvcm1hdChvcHRzKSB7XG5cdHZhciByZXN1bHQ7XG5cblx0c3dpdGNoIChvcHRzLmFycmF5Rm9ybWF0KSB7XG5cdFx0Y2FzZSAnaW5kZXgnOlxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uIChrZXksIHZhbHVlLCBhY2N1bXVsYXRvcikge1xuXHRcdFx0XHRyZXN1bHQgPSAvXFxbKFxcZCopXFxdJC8uZXhlYyhrZXkpO1xuXG5cdFx0XHRcdGtleSA9IGtleS5yZXBsYWNlKC9cXFtcXGQqXFxdJC8sICcnKTtcblxuXHRcdFx0XHRpZiAoIXJlc3VsdCkge1xuXHRcdFx0XHRcdGFjY3VtdWxhdG9yW2tleV0gPSB2YWx1ZTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoYWNjdW11bGF0b3Jba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IHt9O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XVtyZXN1bHRbMV1dID0gdmFsdWU7XG5cdFx0XHR9O1xuXG5cdFx0Y2FzZSAnYnJhY2tldCc6XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24gKGtleSwgdmFsdWUsIGFjY3VtdWxhdG9yKSB7XG5cdFx0XHRcdHJlc3VsdCA9IC8oXFxbXFxdKSQvLmV4ZWMoa2V5KTtcblx0XHRcdFx0a2V5ID0ga2V5LnJlcGxhY2UoL1xcW1xcXSQvLCAnJyk7XG5cblx0XHRcdFx0aWYgKCFyZXN1bHQpIHtcblx0XHRcdFx0XHRhY2N1bXVsYXRvcltrZXldID0gdmFsdWU7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9IGVsc2UgaWYgKGFjY3VtdWxhdG9yW2tleV0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdGFjY3VtdWxhdG9yW2tleV0gPSBbdmFsdWVdO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGFjY3VtdWxhdG9yW2tleV0gPSBbXS5jb25jYXQoYWNjdW11bGF0b3Jba2V5XSwgdmFsdWUpO1xuXHRcdFx0fTtcblxuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24gKGtleSwgdmFsdWUsIGFjY3VtdWxhdG9yKSB7XG5cdFx0XHRcdGlmIChhY2N1bXVsYXRvcltrZXldID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRhY2N1bXVsYXRvcltrZXldID0gdmFsdWU7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IFtdLmNvbmNhdChhY2N1bXVsYXRvcltrZXldLCB2YWx1ZSk7XG5cdFx0XHR9O1xuXHR9XG59XG5cbmZ1bmN0aW9uIGVuY29kZSh2YWx1ZSwgb3B0cykge1xuXHRpZiAob3B0cy5lbmNvZGUpIHtcblx0XHRyZXR1cm4gb3B0cy5zdHJpY3QgPyBzdHJpY3RVcmlFbmNvZGUodmFsdWUpIDogZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcblx0fVxuXG5cdHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24ga2V5c1NvcnRlcihpbnB1dCkge1xuXHRpZiAoQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcblx0XHRyZXR1cm4gaW5wdXQuc29ydCgpO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ29iamVjdCcpIHtcblx0XHRyZXR1cm4ga2V5c1NvcnRlcihPYmplY3Qua2V5cyhpbnB1dCkpLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcblx0XHRcdHJldHVybiBOdW1iZXIoYSkgLSBOdW1iZXIoYik7XG5cdFx0fSkubWFwKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdHJldHVybiBpbnB1dFtrZXldO1xuXHRcdH0pO1xuXHR9XG5cblx0cmV0dXJuIGlucHV0O1xufVxuXG5leHBvcnRzLmV4dHJhY3QgPSBmdW5jdGlvbiAoc3RyKSB7XG5cdHJldHVybiBzdHIuc3BsaXQoJz8nKVsxXSB8fCAnJztcbn07XG5cbmV4cG9ydHMucGFyc2UgPSBmdW5jdGlvbiAoc3RyLCBvcHRzKSB7XG5cdG9wdHMgPSBvYmplY3RBc3NpZ24oe2FycmF5Rm9ybWF0OiAnbm9uZSd9LCBvcHRzKTtcblxuXHR2YXIgZm9ybWF0dGVyID0gcGFyc2VyRm9yQXJyYXlGb3JtYXQob3B0cyk7XG5cblx0Ly8gQ3JlYXRlIGFuIG9iamVjdCB3aXRoIG5vIHByb3RvdHlwZVxuXHQvLyBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL3F1ZXJ5LXN0cmluZy9pc3N1ZXMvNDdcblx0dmFyIHJldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cblx0aWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG5cdFx0cmV0dXJuIHJldDtcblx0fVxuXG5cdHN0ciA9IHN0ci50cmltKCkucmVwbGFjZSgvXihcXD98I3wmKS8sICcnKTtcblxuXHRpZiAoIXN0cikge1xuXHRcdHJldHVybiByZXQ7XG5cdH1cblxuXHRzdHIuc3BsaXQoJyYnKS5mb3JFYWNoKGZ1bmN0aW9uIChwYXJhbSkge1xuXHRcdHZhciBwYXJ0cyA9IHBhcmFtLnJlcGxhY2UoL1xcKy9nLCAnICcpLnNwbGl0KCc9Jyk7XG5cdFx0Ly8gRmlyZWZveCAocHJlIDQwKSBkZWNvZGVzIGAlM0RgIHRvIGA9YFxuXHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvcXVlcnktc3RyaW5nL3B1bGwvMzdcblx0XHR2YXIga2V5ID0gcGFydHMuc2hpZnQoKTtcblx0XHR2YXIgdmFsID0gcGFydHMubGVuZ3RoID4gMCA/IHBhcnRzLmpvaW4oJz0nKSA6IHVuZGVmaW5lZDtcblxuXHRcdC8vIG1pc3NpbmcgYD1gIHNob3VsZCBiZSBgbnVsbGA6XG5cdFx0Ly8gaHR0cDovL3czLm9yZy9UUi8yMDEyL1dELXVybC0yMDEyMDUyNC8jY29sbGVjdC11cmwtcGFyYW1ldGVyc1xuXHRcdHZhbCA9IHZhbCA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGRlY29kZVVSSUNvbXBvbmVudCh2YWwpO1xuXG5cdFx0Zm9ybWF0dGVyKGRlY29kZVVSSUNvbXBvbmVudChrZXkpLCB2YWwsIHJldCk7XG5cdH0pO1xuXG5cdHJldHVybiBPYmplY3Qua2V5cyhyZXQpLnNvcnQoKS5yZWR1Y2UoZnVuY3Rpb24gKHJlc3VsdCwga2V5KSB7XG5cdFx0dmFyIHZhbCA9IHJldFtrZXldO1xuXHRcdGlmIChCb29sZWFuKHZhbCkgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkodmFsKSkge1xuXHRcdFx0Ly8gU29ydCBvYmplY3Qga2V5cywgbm90IHZhbHVlc1xuXHRcdFx0cmVzdWx0W2tleV0gPSBrZXlzU29ydGVyKHZhbCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlc3VsdFtrZXldID0gdmFsO1xuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH0sIE9iamVjdC5jcmVhdGUobnVsbCkpO1xufTtcblxuZXhwb3J0cy5zdHJpbmdpZnkgPSBmdW5jdGlvbiAob2JqLCBvcHRzKSB7XG5cdHZhciBkZWZhdWx0cyA9IHtcblx0XHRlbmNvZGU6IHRydWUsXG5cdFx0c3RyaWN0OiB0cnVlLFxuXHRcdGFycmF5Rm9ybWF0OiAnbm9uZSdcblx0fTtcblxuXHRvcHRzID0gb2JqZWN0QXNzaWduKGRlZmF1bHRzLCBvcHRzKTtcblxuXHR2YXIgZm9ybWF0dGVyID0gZW5jb2RlckZvckFycmF5Rm9ybWF0KG9wdHMpO1xuXG5cdHJldHVybiBvYmogPyBPYmplY3Qua2V5cyhvYmopLnNvcnQoKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuXHRcdHZhciB2YWwgPSBvYmpba2V5XTtcblxuXHRcdGlmICh2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuICcnO1xuXHRcdH1cblxuXHRcdGlmICh2YWwgPT09IG51bGwpIHtcblx0XHRcdHJldHVybiBlbmNvZGUoa2V5LCBvcHRzKTtcblx0XHR9XG5cblx0XHRpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG5cdFx0XHR2YXIgcmVzdWx0ID0gW107XG5cblx0XHRcdHZhbC5zbGljZSgpLmZvckVhY2goZnVuY3Rpb24gKHZhbDIpIHtcblx0XHRcdFx0aWYgKHZhbDIgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdC5wdXNoKGZvcm1hdHRlcihrZXksIHZhbDIsIHJlc3VsdC5sZW5ndGgpKTtcblx0XHRcdH0pO1xuXG5cdFx0XHRyZXR1cm4gcmVzdWx0LmpvaW4oJyYnKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZW5jb2RlKGtleSwgb3B0cykgKyAnPScgKyBlbmNvZGUodmFsLCBvcHRzKTtcblx0fSkuZmlsdGVyKGZ1bmN0aW9uICh4KSB7XG5cdFx0cmV0dXJuIHgubGVuZ3RoID4gMDtcblx0fSkuam9pbignJicpIDogJyc7XG59O1xuIiwiLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKiBnbG9iYWwgbGliLCBYTUxIdHRwUmVxdWVzdCAqL1xuLyogZGVwczogaHR0cHVybCAqL1xuXG4ndXNlIHN0cmljdCdcblxubGV0IHV0aWxzXG5cbmltcG9ydCAnaHR0cHVybCdcbmltcG9ydCBxcyBmcm9tICdxdWVyeS1zdHJpbmcnXG5cbmxldCBqc29ucENudCA9IDBcbmNvbnN0IEVSUk9SX1NUQVRFID0gLTFcblxuZnVuY3Rpb24gX2pzb25wIChjb25maWcsIGNhbGxiYWNrLCBwcm9ncmVzc0NhbGxiYWNrKSB7XG4gIGNvbnN0IGNiTmFtZSA9IGNvbmZpZy5qc29ucENhbGxiYWNrTmFtZSB8fCAnanNvbnBfJyArICgrK2pzb25wQ250KVxuICBsZXQgdXJsXG5cbiAgaWYgKCFjb25maWcudXJsKSB7XG4gICAgY29uc29sZS5lcnJvcignW2g1LXJlbmRlcl0gY29uZmlnLnVybCBzaG91bGQgYmUgc2V0IGluIF9qc29ucCBmb3IgXFwnZmV0Y2hcXCcgQVBJLicpXG4gIH1cblxuICBnbG9iYWxbY2JOYW1lXSA9IChmdW5jdGlvbiAoY2IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICBjYWxsYmFjayh7XG4gICAgICAgIHN0YXR1czogMjAwLFxuICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAgc3RhdHVzVGV4dDogJ09LJyxcbiAgICAgICAgZGF0YTogcmVzcG9uc2VcbiAgICAgIH0pXG4gICAgICBkZWxldGUgZ2xvYmFsW2NiXVxuICAgIH1cbiAgfSkoY2JOYW1lKVxuXG4gIGNvbnN0IHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpXG4gIHRyeSB7XG4gICAgdXJsID0gbGliLmh0dHB1cmwoY29uZmlnLnVybClcbiAgfVxuICBjYXRjaCAoZXJyKSB7XG4gICAgY29uc29sZS5lcnJvcignW2g1LXJlbmRlcl0gaW52YWxpZCBjb25maWcudXJsIGluIF9qc29ucCBmb3IgXFwnZmV0Y2hcXCcgQVBJOiAnXG4gICAgICArIGNvbmZpZy51cmwpXG4gIH1cbiAgdXJsLnBhcmFtcy5jYWxsYmFjayA9IGNiTmFtZVxuICBzY3JpcHQudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnXG4gIHNjcmlwdC5zcmMgPSB1cmwudG9TdHJpbmcoKVxuICAvLyBzY3JpcHQub25lcnJvciBpcyBub3Qgd29ya2luZyBvbiBJRSBvciBzYWZhcmkuXG4gIC8vIGJ1dCB0aGV5IGFyZSBub3QgY29uc2lkZXJlZCBoZXJlLlxuICBzY3JpcHQub25lcnJvciA9IChmdW5jdGlvbiAoY2IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGVycikge1xuICAgICAgY29uc29sZS5lcnJvcignW2g1LXJlbmRlcl0gdW5leHBlY3RlZCBlcnJvciBpbiBfanNvbnAgZm9yIFxcJ2ZldGNoXFwnIEFQSScsIGVycilcbiAgICAgIGNhbGxiYWNrKHtcbiAgICAgICAgc3RhdHVzOiBFUlJPUl9TVEFURSxcbiAgICAgICAgb2s6IGZhbHNlLFxuICAgICAgICBzdGF0dXNUZXh0OiAnJyxcbiAgICAgICAgZGF0YTogJydcbiAgICAgIH0pXG4gICAgICBkZWxldGUgZ2xvYmFsW2NiXVxuICAgIH1cbiAgfSkoY2JOYW1lKVxuICBjb25zdCBoZWFkID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXVxuICBoZWFkLmluc2VydEJlZm9yZShzY3JpcHQsIG51bGwpXG59XG5cbmZ1bmN0aW9uIF94aHIgKGNvbmZpZywgY2FsbGJhY2ssIHByb2dyZXNzQ2FsbGJhY2spIHtcbiAgY29uc3QgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KClcbiAgeGhyLnJlc3BvbnNlVHlwZSA9IGNvbmZpZy50eXBlXG4gIHhoci5vcGVuKGNvbmZpZy5tZXRob2QsIGNvbmZpZy51cmwsIHRydWUpXG5cbiAgLy8gY29ycyBjb29raWUgc3VwcG9ydFxuICBpZiAoY29uZmlnLndpdGhDcmVkZW50aWFscyA9PT0gdHJ1ZSkge1xuICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlXG4gIH1cblxuICBjb25zdCBoZWFkZXJzID0gY29uZmlnLmhlYWRlcnMgfHwge31cbiAgZm9yIChjb25zdCBrIGluIGhlYWRlcnMpIHtcbiAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihrLCBoZWFkZXJzW2tdKVxuICB9XG5cbiAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uIChyZXMpIHtcbiAgICBjYWxsYmFjayh7XG4gICAgICBzdGF0dXM6IHhoci5zdGF0dXMsXG4gICAgICBvazogeGhyLnN0YXR1cyA+PSAyMDAgJiYgeGhyLnN0YXR1cyA8IDMwMCxcbiAgICAgIHN0YXR1c1RleHQ6IHhoci5zdGF0dXNUZXh0LFxuICAgICAgZGF0YTogeGhyLnJlc3BvbnNlLFxuICAgICAgaGVhZGVyczogeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpLnNwbGl0KCdcXG4nKVxuICAgICAgICAucmVkdWNlKGZ1bmN0aW9uIChvYmosIGhlYWRlclN0cikge1xuICAgICAgICAgIGNvbnN0IGhlYWRlckFyciA9IGhlYWRlclN0ci5tYXRjaCgvKC4rKTogKC4rKS8pXG4gICAgICAgICAgaWYgKGhlYWRlckFycikge1xuICAgICAgICAgICAgb2JqW2hlYWRlckFyclsxXV0gPSBoZWFkZXJBcnJbMl1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG9ialxuICAgICAgICB9LCB7fSlcbiAgICB9KVxuICB9XG5cbiAgaWYgKHByb2dyZXNzQ2FsbGJhY2spIHtcbiAgICB4aHIub25wcm9ncmVzcyA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBwcm9ncmVzc0NhbGxiYWNrKHtcbiAgICAgICAgcmVhZHlTdGF0ZTogeGhyLnJlYWR5U3RhdGUsXG4gICAgICAgIHN0YXR1czogeGhyLnN0YXR1cyxcbiAgICAgICAgbGVuZ3RoOiBlLmxvYWRlZCxcbiAgICAgICAgdG90YWw6IGUudG90YWwsXG4gICAgICAgIHN0YXR1c1RleHQ6IHhoci5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiB4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkuc3BsaXQoJ1xcbicpXG4gICAgICAgICAgLnJlZHVjZShmdW5jdGlvbiAob2JqLCBoZWFkZXJTdHIpIHtcbiAgICAgICAgICAgIGNvbnN0IGhlYWRlckFyciA9IGhlYWRlclN0ci5tYXRjaCgvKC4rKTogKC4rKS8pXG4gICAgICAgICAgICBpZiAoaGVhZGVyQXJyKSB7XG4gICAgICAgICAgICAgIG9ialtoZWFkZXJBcnJbMV1dID0gaGVhZGVyQXJyWzJdXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb2JqXG4gICAgICAgICAgfSwge30pXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHhoci5vbmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1toNS1yZW5kZXJdIHVuZXhwZWN0ZWQgZXJyb3IgaW4gX3hociBmb3IgXFwnZmV0Y2hcXCcgQVBJJywgZXJyKVxuICAgIGNhbGxiYWNrKHtcbiAgICAgIHN0YXR1czogRVJST1JfU1RBVEUsXG4gICAgICBvazogZmFsc2UsXG4gICAgICBzdGF0dXNUZXh0OiAnJyxcbiAgICAgIGRhdGE6ICcnXG4gICAgfSlcbiAgfVxuXG4gIHhoci5zZW5kKGNvbmZpZy5ib2R5IHx8IG51bGwpXG59XG5cbmNvbnN0IHN0cmVhbSA9IHtcblxuICAvKipcbiAgICogc2VuZEh0dHBcbiAgICogQGRlcHJlY2F0ZWRcbiAgICogTm90ZTogVGhpcyBBUEkgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSBzdHJlYW0uZmV0Y2ggaW5zdGVhZC5cbiAgICogc2VuZCBhIGh0dHAgcmVxdWVzdCB0aHJvdWdoIFhIUi5cbiAgICogQHBhcmFtICB7b2JqfSBwYXJhbXNcbiAgICogIC0gbWV0aG9kOiAnR0VUJyB8ICdQT1NUJyB8ICdQVVQnIHwgJ0RFTEVURScgfCAnSEVBRCcgfCAnUEFUQ0gnLFxuICAgKiAgLSB1cmw6IHVybCByZXF1ZXN0ZWRcbiAgICogQHBhcmFtICB7c3RyaW5nfSBjYWxsYmFja0lkXG4gICAqL1xuICBzZW5kSHR0cDogZnVuY3Rpb24gKHBhcmFtLCBjYWxsYmFja0lkKSB7XG4gICAgaWYgKHR5cGVvZiBwYXJhbSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHBhcmFtID0gSlNPTi5wYXJzZShwYXJhbSlcbiAgICAgIH1cbiAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cbiAgICBpZiAodHlwZW9mIHBhcmFtICE9PSAnb2JqZWN0JyB8fCAhcGFyYW0udXJsKSB7XG4gICAgICByZXR1cm4gY29uc29sZS5lcnJvcihcbiAgICAgICAgJ1toNS1yZW5kZXJdIGludmFsaWQgY29uZmlnIG9yIGludmFsaWQgY29uZmlnLnVybCBmb3Igc2VuZEh0dHAgQVBJJylcbiAgICB9XG5cbiAgICBjb25zdCBzZW5kZXIgPSB0aGlzLnNlbmRlclxuICAgIGNvbnN0IG1ldGhvZCA9IHBhcmFtLm1ldGhvZCB8fCAnR0VUJ1xuICAgIGNvbnN0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpXG4gICAgeGhyLm9wZW4obWV0aG9kLCBwYXJhbS51cmwsIHRydWUpXG4gICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbmRlci5wZXJmb3JtQ2FsbGJhY2soY2FsbGJhY2tJZCwgdGhpcy5yZXNwb25zZVRleHQpXG4gICAgfVxuICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICByZXR1cm4gY29uc29sZS5lcnJvcignW2g1LXJlbmRlcl0gdW5leHBlY3RlZCBlcnJvciBpbiBzZW5kSHR0cCBBUEknLCBlcnJvcilcbiAgICAgIC8vIHNlbmRlci5wZXJmb3JtQ2FsbGJhY2soXG4gICAgICAvLyAgIGNhbGxiYWNrSWQsXG4gICAgICAvLyAgIG5ldyBFcnJvcigndW5leHBlY3RlZCBlcnJvciBpbiBzZW5kSHR0cCBBUEknKVxuICAgICAgLy8gKVxuICAgIH1cbiAgICB4aHIuc2VuZCgpXG4gIH0sXG5cbiAgLyoqXG4gICAqIGZldGNoXG4gICAqIHVzZSBzdHJlYW0uZmV0Y2ggdG8gcmVxdWVzdCBmb3IgYSBqc29uIGZpbGUsIGEgcGxhaW4gdGV4dCBmaWxlIG9yXG4gICAqIGEgYXJyYXlidWZmZXIgZm9yIGEgZmlsZSBzdHJlYW0uIChZb3UgY2FuIHVzZSBCbG9iIGFuZCBGaWxlUmVhZGVyXG4gICAqIEFQSSBpbXBsZW1lbnRlZCBieSBtb3N0IG1vZGVybiBicm93c2VycyB0byByZWFkIGEgYXJyYXlidWZmZXIuKVxuICAgKiBAcGFyYW0gIHtvYmplY3R9IG9wdGlvbnMgY29uZmlnIG9wdGlvbnNcbiAgICogICAtIG1ldGhvZDogJ0dFVCcgfCAnUE9TVCcgfCAnUFVUJyB8ICdERUxFVEUnIHwgJ0hFQUQnIHwgJ1BBVENIJ1xuICAgKiAgIC0gaGVhZGVycyB7b2JqfVxuICAgKiAgIC0gdXJsIHtzdHJpbmd9XG4gICAqICAgLSBtb2RlIHtzdHJpbmd9ICdjb3JzJyB8ICduby1jb3JzJyB8ICdzYW1lLW9yaWdpbicgfCAnbmF2aWdhdGUnXG4gICAqICAgLSB3aXRoQ3JlZGVudGlhbHMge2Jvb2xlYW59XG4gICAqICAgLSBib2R5XG4gICAqICAgLSB0eXBlIHtzdHJpbmd9ICdqc29uJyB8ICdqc29ucCcgfCAndGV4dCdcbiAgICogQHBhcmFtICB7c3RyaW5nfSBjYWxsYmFja0lkXG4gICAqIEBwYXJhbSAge3N0cmluZ30gcHJvZ3Jlc3NDYWxsYmFja0lkXG4gICAqL1xuICBmZXRjaDogZnVuY3Rpb24gKG9wdGlvbnMsIGNhbGxiYWNrSWQsIHByb2dyZXNzQ2FsbGJhY2tJZCkge1xuICAgIGNvbnN0IERFRkFVTFRfTUVUSE9EID0gJ0dFVCdcbiAgICBjb25zdCBERUZBVUxUX01PREUgPSAnY29ycydcbiAgICBjb25zdCBERUZBVUxUX1RZUEUgPSAndGV4dCdcblxuICAgIGNvbnN0IG1ldGhvZE9wdGlvbnMgPSBbJ0dFVCcsICdQT1NUJywgJ1BVVCcsICdERUxFVEUnLCAnSEVBRCcsICdQQVRDSCddXG4gICAgY29uc3QgbW9kZU9wdGlvbnMgPSBbJ2NvcnMnLCAnbm8tY29ycycsICdzYW1lLW9yaWdpbicsICduYXZpZ2F0ZSddXG4gICAgY29uc3QgdHlwZU9wdGlvbnMgPSBbJ3RleHQnLCAnanNvbicsICdqc29ucCcsICdhcnJheWJ1ZmZlciddXG5cbiAgICAvLyBjb25zdCBmYWxsYmFjayA9IGZhbHNlICAvLyBmYWxsYmFjayBmcm9tICdmZXRjaCcgQVBJIHRvIFhIUi5cbiAgICBjb25zdCBzZW5kZXIgPSB0aGlzLnNlbmRlclxuXG4gICAgY29uc3QgY29uZmlnID0gdXRpbHMuZXh0ZW5kKHt9LCBvcHRpb25zKVxuXG4gICAgLy8gdmFsaWRhdGUgb3B0aW9ucy5tZXRob2RcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5tZXRob2QgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWcubWV0aG9kID0gREVGQVVMVF9NRVRIT0RcbiAgICAgIGNvbnNvbGUud2FybignW2g1LXJlbmRlcl0gb3B0aW9ucy5tZXRob2QgZm9yIFxcJ2ZldGNoXFwnIEFQSSBoYXMgYmVlbiBzZXQgdG8gJ1xuICAgICAgICArICdkZWZhdWx0IHZhbHVlIFxcJycgKyBjb25maWcubWV0aG9kICsgJ1xcJycpXG4gICAgfVxuICAgIGVsc2UgaWYgKG1ldGhvZE9wdGlvbnMuaW5kZXhPZigoY29uZmlnLm1ldGhvZCArICcnKVxuICAgICAgLnRvVXBwZXJDYXNlKCkpID09PSAtMSkge1xuICAgICAgcmV0dXJuIGNvbnNvbGUuZXJyb3IoJ1toNS1yZW5kZXJdIG9wdGlvbnMubWV0aG9kIFxcJydcbiAgICAgICAgKyBjb25maWcubWV0aG9kXG4gICAgICAgICsgJ1xcJyBmb3IgXFwnZmV0Y2hcXCcgQVBJIHNob3VsZCBiZSBvbmUgb2YgJ1xuICAgICAgICArIG1ldGhvZE9wdGlvbnMgKyAnLicpXG4gICAgfVxuXG4gICAgLy8gdmFsaWRhdGUgb3B0aW9ucy51cmxcbiAgICBpZiAoIWNvbmZpZy51cmwpIHtcbiAgICAgIHJldHVybiBjb25zb2xlLmVycm9yKCdbaDUtcmVuZGVyXSBvcHRpb25zLnVybCBzaG91bGQgYmUgc2V0IGZvciBcXCdmZXRjaFxcJyBBUEkuJylcbiAgICB9XG5cbiAgICAvLyB2YWxpZGF0ZSBib2R5IGNvbnRlbnQgZm9yIG1ldGhvZCAnR0VUJy5cbiAgICBpZiAoY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpID09PSAnR0VUJykge1xuICAgICAgbGV0IGJvZHkgPSBjb25maWcuYm9keVxuICAgICAgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3QoYm9keSkpIHtcbiAgICAgICAgYm9keSA9IHFzLnN0cmluZ2lmeShib2R5KVxuICAgICAgfVxuICAgICAgbGV0IHVybCA9IGNvbmZpZy51cmxcbiAgICAgIGxldCBoYXNoSWR4ID0gdXJsLmluZGV4T2YoJyMnKVxuICAgICAgaGFzaElkeCA8PSAtMSAmJiAoaGFzaElkeCA9IHVybC5sZW5ndGgpXG4gICAgICBsZXQgaGFzaCA9IHVybC5zdWJzdHIoaGFzaElkeClcbiAgICAgIGlmIChoYXNoICYmIGhhc2hbMF0gPT09ICcjJykge1xuICAgICAgICBoYXNoID0gaGFzaC5zdWJzdHIoMSlcbiAgICAgIH1cbiAgICAgIHVybCA9IHVybC5zdWJzdHJpbmcoMCwgaGFzaElkeClcbiAgICAgIGlmIChib2R5KSB7XG4gICAgICAgIHVybCArPSAoY29uZmlnLnVybC5pbmRleE9mKCc/JykgPD0gLTEgPyAnPycgOiAnJicpICsgYm9keVxuICAgICAgfVxuICAgICAgdXJsICs9ICcjJyArIGhhc2hcbiAgICAgIGNvbmZpZy51cmwgPSB1cmxcbiAgICB9XG5cbiAgICAvLyB2YWxpZGF0ZSBvcHRpb25zLm1vZGVcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5tb2RlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnLm1vZGUgPSBERUZBVUxUX01PREVcbiAgICB9XG4gICAgZWxzZSBpZiAobW9kZU9wdGlvbnMuaW5kZXhPZigoY29uZmlnLm1vZGUgKyAnJykudG9Mb3dlckNhc2UoKSkgPT09IC0xKSB7XG4gICAgICByZXR1cm4gY29uc29sZS5lcnJvcignW2g1LXJlbmRlcl0gb3B0aW9ucy5tb2RlIFxcJydcbiAgICAgICAgKyBjb25maWcubW9kZVxuICAgICAgICArICdcXCcgZm9yIFxcJ2ZldGNoXFwnIEFQSSBzaG91bGQgYmUgb25lIG9mICdcbiAgICAgICAgKyBtb2RlT3B0aW9ucyArICcuJylcbiAgICB9XG5cbiAgICAvLyB2YWxpZGF0ZSBvcHRpb25zLnR5cGVcbiAgICBpZiAodHlwZW9mIGNvbmZpZy50eXBlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnLnR5cGUgPSBERUZBVUxUX1RZUEVcbiAgICAgIGNvbnNvbGUud2FybignW2g1LXJlbmRlcl0gb3B0aW9ucy50eXBlIGZvciBcXCdmZXRjaFxcJyBBUEkgaGFzIGJlZW4gc2V0IHRvICdcbiAgICAgICAgKyAnZGVmYXVsdCB2YWx1ZSBcXCcnICsgY29uZmlnLnR5cGUgKyAnXFwnLicpXG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVPcHRpb25zLmluZGV4T2YoKGNvbmZpZy50eXBlICsgJycpLnRvTG93ZXJDYXNlKCkpID09PSAtMSkge1xuICAgICAgcmV0dXJuIGNvbnNvbGUuZXJyb3IoJ1toNS1yZW5kZXJdIG9wdGlvbnMudHlwZSBcXCcnXG4gICAgICAgICAgKyBjb25maWcudHlwZVxuICAgICAgICAgICsgJ1xcJyBmb3IgXFwnZmV0Y2hcXCcgQVBJIHNob3VsZCBiZSBvbmUgb2YgJ1xuICAgICAgICAgICsgdHlwZU9wdGlvbnMgKyAnLicpXG4gICAgfVxuXG4gICAgLy8gdmFsaWRhdGUgb3B0aW9ucy5oZWFkZXJzXG4gICAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fVxuICAgIGlmICghdXRpbHMuaXNQbGFpbk9iamVjdChjb25maWcuaGVhZGVycykpIHtcbiAgICAgIHJldHVybiBjb25zb2xlLmVycm9yKCdbaDUtcmVuZGVyXSBvcHRpb25zLmhlYWRlcnMgc2hvdWxkIGJlIGEgcGxhaW4gb2JqZWN0JylcbiAgICB9XG5cbiAgICAvLyB2YWxpZGF0ZSBvcHRpb25zLnRpbWVvdXRcbiAgICBjb25maWcudGltZW91dCA9IHBhcnNlSW50KGNvbmZpZy50aW1lb3V0LCAxMCkgfHwgMjUwMFxuXG4gICAgY29uc3QgX2NhbGxBcmdzID0gW2NvbmZpZywgZnVuY3Rpb24gKHJlcykge1xuICAgICAgc2VuZGVyLnBlcmZvcm1DYWxsYmFjayhjYWxsYmFja0lkLCByZXMpXG4gICAgfV1cbiAgICBpZiAocHJvZ3Jlc3NDYWxsYmFja0lkKSB7XG4gICAgICBfY2FsbEFyZ3MucHVzaChmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgIC8vIFNldCAna2VlcEFsaXZlJyB0byB0cnVlIGZvciBzZW5kaW5nIGNvbnRpbnVvdXMgY2FsbGJhY2tzXG4gICAgICAgIHNlbmRlci5wZXJmb3JtQ2FsbGJhY2socHJvZ3Jlc3NDYWxsYmFja0lkLCByZXMsIHRydWUpXG4gICAgICB9KVxuICAgIH1cblxuICAgIGlmIChjb25maWcudHlwZSA9PT0gJ2pzb25wJykge1xuICAgICAgX2pzb25wLmFwcGx5KHRoaXMsIF9jYWxsQXJncylcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBfeGhyLmFwcGx5KHRoaXMsIF9jYWxsQXJncylcbiAgICB9XG4gIH1cblxufVxuXG5jb25zdCBtZXRhID0ge1xuICBzdHJlYW06IFt7XG4gICAgbmFtZTogJ3NlbmRIdHRwJyxcbiAgICBhcmdzOiBbJ29iamVjdCcsICdmdW5jdGlvbiddXG4gIH0sIHtcbiAgICBuYW1lOiAnZmV0Y2gnLFxuICAgIGFyZ3M6IFsnb2JqZWN0JywgJ2Z1bmN0aW9uJywgJ2Z1bmN0aW9uJ11cbiAgfV1cbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBpbml0OiBmdW5jdGlvbiAoV2VleCkge1xuICAgIHV0aWxzID0gV2VleC51dGlsc1xuICAgIFdlZXgucmVnaXN0ZXJBcGlNb2R1bGUoJ3N0cmVhbScsIHN0cmVhbSwgbWV0YSlcbiAgfVxufVxuIiwiLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4ndXNlIHN0cmljdCdcblxuLyoqXG5cbkFVQ1RJT046XG50YXNrUXVldWVcbkNsaXBib2FyZC5zZXRTdHJpbmcoKSAgTk9XIG5vdCB3b3JrcywgZmFjaW5nIHRvIHVzZXItYWN0IGxvc2Ugb2YgdGFza1F1ZXVlLlxuXG53b3JrcyBpbiBDaHJvbWUgRmlyZWZveCBPcGVyYS4gYnV0IG5vdCBpbiBTYWZhcmkuXG5Ac2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9Eb2N1bWVudC9leGVjQ29tbWFuZCNCcm93c2VyX2NvbXBhdGliaWxpdHlcblxuQ2xpcGJvYXJkLmdldFN0cmluZygpIHVuaW1wbGVtZW50ZWQuIFRoZXJlIGlzIG5vIGVhc3kgd2F5IHRvIGRvIHBhc3RlIGZyb20gY2xpcGJvYXJkIHRvIGpzIHZhcmlhYmxlLlxuXG5TbyBsb29rIG91dCB5b3VyIGFwcCBiZWhhdmlvciwgd2hlbiBkb3duZ3JhZGUgdG8gaHRtbDUgcmVuZGVyLlxuQW55IGlkZWEgaXMgd2VsY29tZS5cbioqL1xuXG5jb25zdCBXRUVYX0NMSVBCT0FSRF9JRCA9ICdfX3dlZXhfY2xpcGJvYXJkX2lkX18nXG5cbmNvbnN0IGNsaXBib2FyZCA9IHtcblxuICBnZXRTdHJpbmc6IGZ1bmN0aW9uIChjYWxsYmFja0lkKSB7XG4gICAgLy8gbm90IHN1cHBvcnRlZCBpbiBodG1sNVxuICAgIGNvbnNvbGUubG9nKCdjbGlwYm9hcmQuZ2V0U3RyaW5nKCkgaXMgbm90IHN1cHBvcnRlZCBub3cuJylcbiAgfSxcblxuICBzZXRTdHJpbmc6IGZ1bmN0aW9uICh0ZXh0KSB7XG4gICAgLy8gbm90IHN1cHBvcnQgc2FmYXJpXG4gICAgaWYgKHR5cGVvZiB0ZXh0ID09PSAnc3RyaW5nJyAmJiB0ZXh0ICE9PSAnJyAmJiBkb2N1bWVudC5leGVjQ29tbWFuZCkge1xuICAgICAgY29uc3QgdGVtcElucHV0ID0gZWxlbWVudCgpXG4gICAgICB0ZW1wSW5wdXQudmFsdWUgPSB0ZXh0XG5cbiAgICAgIHRlbXBJbnB1dC5zZWxlY3QoKVxuICAgICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoJ2NvcHknKVxuICAgICAgLy8gdmFyIG91dCA9IGRvY3VtZW50LmV4ZWNDb21tYW5kKCdjb3B5Jyk7XG4gICAgICAvLyBjb25zb2xlLmxvZyhcImV4ZWNDb21tYW5kIG91dCBpcyBcIiArIG91dCk7XG4gICAgICB0ZW1wSW5wdXQudmFsdWUgPSAnJ1xuICAgICAgdGVtcElucHV0LmJsdXIoKVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKCdvbmx5IHN1cHBvcnQgc3RyaW5nIGlucHV0IG5vdycpXG4gICAgfVxuICB9XG5cbn1cblxuZnVuY3Rpb24gZWxlbWVudCAoKSB7XG4gIGxldCB0ZW1wSW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChXRUVYX0NMSVBCT0FSRF9JRClcbiAgaWYgKCF0ZW1wSW5wdXQpIHtcbiAgICB0ZW1wSW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpXG4gICAgdGVtcElucHV0LnNldEF0dHJpYnV0ZSgnaWQnLCBXRUVYX0NMSVBCT0FSRF9JRClcbiAgICB0ZW1wSW5wdXQuc3R5bGUuY3NzVGV4dCA9ICdoZWlnaHQ6MXB4O3dpZHRoOjFweDtib3JkZXI6bm9uZTsnXG4gICAgLy8gdGVtcElucHV0LnN0eWxlLmNzc1RleHQgPSBcImhlaWdodDo0MHB4O3dpZHRoOjMwMHB4O2JvcmRlcjpzb2xpZDtcIlxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGVtcElucHV0KVxuICB9XG4gIHJldHVybiB0ZW1wSW5wdXRcbn1cblxuY29uc3QgbWV0YSA9IHtcbiAgY2xpcGJvYXJkOiBbe1xuICAgIG5hbWU6ICdnZXRTdHJpbmcnLFxuICAgIGFyZ3M6IFsnZnVuY3Rpb24nXVxuICB9LCB7XG4gICAgbmFtZTogJ3NldFN0cmluZycsXG4gICAgYXJnczogWydzdHJpbmcnXVxuICB9XVxufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGluaXQ6IGZ1bmN0aW9uIChXZWV4KSB7XG4gICAgV2VleC5yZWdpc3RlckFwaU1vZHVsZSgnY2xpcGJvYXJkJywgY2xpcGJvYXJkLCBtZXRhKVxuICB9XG59XG4iLCIvKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbid1c2Ugc3RyaWN0J1xuXG5jb25zdCBldmVudCA9IHtcbiAgLyoqXG4gICAqIG9wZW5VcmxcbiAgICogQHBhcmFtICB7c3RyaW5nfSB1cmxcbiAgICovXG4gIG9wZW5VUkw6IGZ1bmN0aW9uICh1cmwpIHtcbiAgICBsb2NhdGlvbi5ocmVmID0gdXJsXG4gIH1cblxufVxuXG5jb25zdCBtZXRhID0ge1xuICBldmVudDogW3tcbiAgICBuYW1lOiAnb3BlblVSTCcsXG4gICAgYXJnczogWydzdHJpbmcnXVxuICB9XVxufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGluaXQ6IGZ1bmN0aW9uIChXZWV4KSB7XG4gICAgV2VleC5yZWdpc3RlckFwaU1vZHVsZSgnZXZlbnQnLCBldmVudCwgbWV0YSlcbiAgfVxufVxuIiwiLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5jb25zdCB1dGlscyA9IHt9XG5sZXQgZW5kRXZlbnRcbmxldCBzdHlsZU5hbWVcblxuY29uc3QgREVTSUdOX1JPT1RfVkFMVUUgPSA3NVxuXG5jb25zdCBFVkVOVF9OQU1FX01BUCA9IHtcbiAgdHJhbnNpdGlvbjogJ3RyYW5zaXRpb25lbmQnLFxuICBXZWJraXRUcmFuc2l0aW9uOiAnd2Via2l0VHJhbnNpdGlvbkVuZCcsXG4gIE1velRyYW5zaXRpb246ICdtb3pUcmFuc2l0aW9uRW5kJyxcbiAgT1RyYW5zaXRpb246ICdvVHJhbnNpdGlvbkVuZCcsXG4gIG1zVHJhbnNpdGlvbjogJ01TVHJhbnNpdGlvbkVuZCdcbn1cblxuZnVuY3Rpb24gZGV0ZWN0RXZlbnRzICgpIHtcbiAgY29uc3QgdGVzdEVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgY29uc3Qgc3R5bGUgPSB0ZXN0RWwuc3R5bGVcbiAgZm9yIChjb25zdCBuYW1lIGluIEVWRU5UX05BTUVfTUFQKSB7XG4gICAgaWYgKG5hbWUgaW4gc3R5bGUpIHtcbiAgICAgIGVuZEV2ZW50ID0gRVZFTlRfTkFNRV9NQVBbbmFtZV1cbiAgICAgIHN0eWxlTmFtZSA9IG5hbWVcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG59XG5cbmRldGVjdEV2ZW50cygpXG5cbmZ1bmN0aW9uIHRyYW5zaXRpb25PbmNlICh2bm9kZSwgY29uZmlnLCBjYWxsYmFjaykge1xuICBjb25zdCB7XG4gICAgbmV4dEZyYW1lLFxuICAgIHRvQ1NTVGV4dCxcbiAgICBzdHlsZU9iamVjdDJyZW0sXG4gICAgLy8gbm9ybWFsaXplU3R5bGUsXG4gICAgaXNBcnJheVxuICB9ID0gdXRpbHNcblxuICBpZiAoaXNBcnJheSh2bm9kZSkpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICAgIGNvbnNvbGUud2FybignW3Z1ZS1yZW5kZXJdIHRoZSByZWYgcGFzc2VkIHRvIGFuaW1hdGlvbi50cmFuc2l0aW9uT25jZSBpcyBhIGFycmF5LicpXG4gICAgfVxuICAgIHZub2RlID0gdm5vZGVbMF1cbiAgfVxuXG4gIGNvbnN0IGR1cmF0aW9uID0gY29uZmlnLmR1cmF0aW9uIHx8IDAgLy8gbXNcbiAgY29uc3QgdGltaW5nID0gY29uZmlnLnRpbWluZ0Z1bmN0aW9uIHx8ICdsaW5lYXInXG4gIGNvbnN0IGRlbGF5ID0gY29uZmlnLmRlbGF5IHx8IDAgIC8vIG1zXG5cbiAgLy8gVE9ETzogcGFyc2UgdHJhbnNpdGlvbiBwcm9wZXJ0aWVzXG4gIGNvbnN0IHRyYW5zaXRpb25WYWx1ZSA9IGBhbGwgJHtkdXJhdGlvbn1tcyAke3RpbWluZ30gJHtkZWxheX1tc2BcblxuICBjb25zdCBkb20gPSB2bm9kZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ID8gdm5vZGUgOiB2bm9kZS4kZWxcbiAgLy8gdHJpZ2dlciBpbWFnZSBsYXp5bG9hZGluZyBieSBmb3JjZS5cbiAgZG9tICYmIHdlZXgudXRpbHMuZmlyZUxhenlsb2FkKGRvbSwgdHJ1ZSlcblxuICBjb25zdCB0cmFuc2l0aW9uRW5kSGFuZGxlciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIGV2ZW50ICYmIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG4gICAgaWYgKGVuZEV2ZW50KSB7XG4gICAgICBkb20ucmVtb3ZlRXZlbnRMaXN0ZW5lcihlbmRFdmVudCwgdHJhbnNpdGlvbkVuZEhhbmRsZXIpXG4gICAgICBkb20uc3R5bGVbc3R5bGVOYW1lXSA9ICcnXG4gICAgfVxuICAgIGNhbGxiYWNrKClcbiAgfVxuICBpZiAoZW5kRXZlbnQpIHtcbiAgICBkb20uc3R5bGVbc3R5bGVOYW1lXSA9IHRyYW5zaXRpb25WYWx1ZVxuICAgIGRvbS5hZGRFdmVudExpc3RlbmVyKGVuZEV2ZW50LCB0cmFuc2l0aW9uRW5kSGFuZGxlcilcbiAgfVxuICBuZXh0RnJhbWUoKCkgPT4ge1xuICAgIGRvbS5zdHlsZS5jc3NUZXh0XG4gICAgICArPSB0b0NTU1RleHQoc3R5bGVPYmplY3QycmVtKGNvbmZpZy5zdHlsZXMsIERFU0lHTl9ST09UX1ZBTFVFKSB8fCB7fSlcbiAgfSlcbn1cblxuY29uc3QgYW5pbWF0aW9uID0ge1xuICAvKipcbiAgICogdHJhbnNpdGlvblxuICAgKiBAcGFyYW0gIHtTdHJpbmd9IHZub2RlXG4gICAqIEBwYXJhbSAge09iamVjdH0gY29uZmlnXG4gICAqIEBwYXJhbSAge1N0cmluZ30gY2FsbGJhY2tcbiAgICovXG4gIHRyYW5zaXRpb24gKHZub2RlLCBjb25maWcsIGNhbGxiYWNrKSB7XG4gICAgaWYgKCFjb25maWcuc3R5bGVzKSB7IHJldHVybiB9XG4gICAgcmV0dXJuIHRyYW5zaXRpb25PbmNlKHZub2RlLCBjb25maWcsICgpID0+IHtcbiAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKClcbiAgICB9KVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaW5pdCAod2VleCkge1xuICAgIGNvbnN0IGV4dGVuZEtleXMgPSB3ZWV4LnV0aWxzLmV4dGVuZEtleXNcbiAgICBleHRlbmRLZXlzKHV0aWxzLCB3ZWV4LnV0aWxzLCBbXG4gICAgICAnbmV4dEZyYW1lJyxcbiAgICAgICd0b0NTU1RleHQnLFxuICAgICAgJ3N0eWxlT2JqZWN0MnJlbScsXG4gICAgICAvLyAnYXV0b1ByZWZpeCcsXG4gICAgICAvLyAnbm9ybWFsaXplU3R5bGUnLFxuICAgICAgJ2lzQXJyYXknXG4gICAgXSlcblxuICAgIHdlZXgucmVnaXN0ZXJNb2R1bGUoJ2FuaW1hdGlvbicsIGFuaW1hdGlvbilcbiAgfVxufVxuIiwiLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5jb25zdCB1dGlscyA9IHt9XG5cbmZ1bmN0aW9uIG5vdyAoKSB7XG4gIGNvbnN0IG5vdyA9IHdpbmRvdy5wZXJmb3JtYW5jZSAmJiB3aW5kb3cucGVyZm9ybWFuY2Uubm93XG4gICAgPyB3aW5kb3cucGVyZm9ybWFuY2Uubm93LmJpbmQod2luZG93LnBlcmZvcm1hbmNlKSA6IERhdGUubm93XG4gIHJldHVybiBub3coKVxufVxuXG5mdW5jdGlvbiBzY3JvbGxFbGVtZW50IChkU3VmZml4LCBwb3NpdGlvbikge1xuICBpZiAoKHRoaXMgPT09IGRvY3VtZW50LmJvZHkpIHx8ICh0aGlzID09PSB3aW5kb3cpXG4gICAgJiYgd2luZG93LnNjcm9sbFRvKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5zY3JvbGxUbygwLCBwb3NpdGlvbilcbiAgfVxuICB0aGlzW2BzY3JvbGwke2RTdWZmaXh9YF0gPSBwb3NpdGlvblxufVxuLyoqXG4gKiBzZWxmIGludm9rZWQgZnVuY3Rpb24gdGhhdCwgZ2l2ZW4gYSBjb250ZXh0LCBzdGVwcyB0aHJvdWdoIHNjcm9sbGluZ1xuICogQG1ldGhvZCBzdGVwXG4gKiBAcGFyYW0ge09iamVjdH0gY29udGV4dFxuICovXG5mdW5jdGlvbiBzdGVwIChjb250ZXh0KSB7XG4gIC8vIGNhbGwgbWV0aG9kIGFnYWluIG9uIG5leHQgYXZhaWxhYmxlIGZyYW1lXG4gIGNvbnRleHQuZnJhbWUgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHN0ZXAuYmluZCh3aW5kb3csIGNvbnRleHQpKVxuICBjb25zdCB0aW1lID0gbm93KClcbiAgbGV0IGVsYXBzZWQgPSAodGltZSAtIGNvbnRleHQuc3RhcnRUaW1lKSAvIDQ2OFxuICAvLyBhdm9pZCBlbGFwc2VkIHRpbWVzIGhpZ2hlciB0aGFuIG9uZVxuICBlbGFwc2VkID0gZWxhcHNlZCA+IDEgPyAxIDogZWxhcHNlZFxuICAvLyBhcHBseSBlYXNpbmcgdG8gZWxhcHNlZCB0aW1lXG4gIGNvbnN0IHZhbHVlID0gZWFzZShlbGFwc2VkKVxuICBjb25zdCBjdXJyZW50UG9zaXRpb24gPSBjb250ZXh0LnN0YXJ0UG9zaXRpb24gKyAoY29udGV4dC5wb3NpdGlvbiAtIGNvbnRleHQuc3RhcnRQb3NpdGlvbikgKiB2YWx1ZVxuICBjb250ZXh0Lm1ldGhvZC5jYWxsKGNvbnRleHQuc2Nyb2xsYWJsZSwgY29udGV4dC5kU3VmZml4LCBjdXJyZW50UG9zaXRpb24pXG4gIC8vIHJldHVybiB3aGVuIGVuZCBwb2ludHMgaGF2ZSBiZWVuIHJlYWNoZWRcbiAgLyoqXG4gICAgKiBOT1RFOiBzaG91bGQgdXNlIH5+IHRvIHBhcnNlIHBvc2l0aW9uIG51bWJlciBpbnRvIGludGVnZXIuIE90aGVyd2lzZVxuICAgICogdGhpcyB0d28gZmxvYXQgbnVtYmVycyBtYXliZSBoYXZlIGEgc2xpY2VseSBsaXR0bGUgZGlmZmVyZW5jZSwgd2hpY2hcbiAgICAqIHdpbGwgY2F1c2UgdGhpcyBmdW5jdGlvbiBuZXZlciB0byBzdG9wLlxuICAqL1xuICBpZiAofn5jdXJyZW50UG9zaXRpb24gPT09IH5+Y29udGV4dC5wb3NpdGlvbikge1xuICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShjb250ZXh0LmZyYW1lKVxuICAgIHJldHVyblxuICB9XG59XG4vKipcbiAqIHJldHVybnMgcmVzdWx0IG9mIGFwcGx5aW5nIGVhc2UgbWF0aCBmdW5jdGlvbiB0byBhIG51bWJlclxuICogQG1ldGhvZCBlYXNlXG4gKiBAcGFyYW0ge051bWJlcn0ga1xuICogQHJldHVybnMge051bWJlcn1cbiAqL1xuZnVuY3Rpb24gZWFzZSAoaykge1xuICByZXR1cm4gMC41ICogKDEgLSBNYXRoLmNvcyhNYXRoLlBJICogaykpXG59XG5jb25zdCBkb20gPSB7XG4gIC8qKlxuICAgKiBzY3JvbGxUb0VsZW1lbnRcbiAgICogQHBhcmFtICB7Vm5vZGUgfCBWQ29tcG9uZW50fSB2bm9kZVxuICAgKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnMge29mZnNldDpOdW1iZXJ9XG4gICAqICAgcHM6IHNjcm9sbC10byBoYXMgJ2Vhc2UnIGFuZCAnZHVyYXRpb24nKG1zKSBhcyBvcHRpb25zLlxuICAgKi9cbiAgc2Nyb2xsVG9FbGVtZW50OiBmdW5jdGlvbiAodm5vZGUsIG9wdGlvbnMpIHtcbiAgICBjb25zdCB7XG4gICAgICBpc0FycmF5LFxuICAgICAgZ2V0UGFyZW50U2Nyb2xsZXJFbGVtZW50XG4gICAgfSA9IHV0aWxzXG4gICAgaWYgKGlzQXJyYXkodm5vZGUpKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdbdnVlLXJlbmRlcl0gdGhlIHJlZiBwYXNzZWQgdG8gYW5pbWF0aW9uLnRyYW5zaXRpb25PbmNlIGlzIGEgYXJyYXkuJylcbiAgICAgIH1cbiAgICAgIHZub2RlID0gdm5vZGVbMF1cbiAgICB9XG4gICAgY29uc3QgaXNFbGVtZW50ID0gdm5vZGUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudFxuICAgIGNvbnN0IGVsID0gaXNFbGVtZW50ID8gdm5vZGUgOiAodm5vZGUuJGVsIHx8IHZub2RlLmVsbSlcbiAgICBjb25zdCBjdCA9IGdldFBhcmVudFNjcm9sbGVyRWxlbWVudCh2bm9kZSlcbiAgICBjb25zdCBzY3JvbGxlciA9IGN0Ll9fdnVlX19cbiAgICBjb25zdCBpc1dpbmRvdyA9IGN0ID09PSBkb2N1bWVudC5ib2R5XG4gICAgY29uc3Qgc2Nyb2xsRGlyZWN0aW9uID1cbiAgICAgIGlzV2luZG93ID8gJ3ZlcnRpY2FsJ1xuICAgICAgICA6IChzY3JvbGxlciAmJiBzY3JvbGxlci5zY3JvbGxEaXJlY3Rpb24gfHwgJ3ZlcnRpY2FsJylcbiAgICBpZiAoY3QgJiYgZWwpIHtcbiAgICAgIGNvbnN0IGRTdWZmaXggPSAoe1xuICAgICAgICBob3Jpem9udGFsOiAnTGVmdCcsXG4gICAgICAgIHZlcnRpY2FsOiAnVG9wJ1xuICAgICAgfSlbc2Nyb2xsRGlyZWN0aW9uXVxuICAgICAgY29uc3QgY3RSZWN0ID0gY3QuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICAgIGxldCBlbFJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgICAgLyoqXG4gICAgICAgICogaWYgaXQncyBhIHdhdGVyZmFsbCwgYW5kIHlvdSB3YW50IHRvIHNjcm9sbCB0byBhIGhlYWRlciwgdGhlbiBqdXN0XG4gICAgICAgICogc2Nyb2xsIHRvIHRoZSB0b3AuXG4gICAgICAqL1xuICAgICAgaWYgKFxuICAgICAgICAhaXNFbGVtZW50XG4gICAgICAgICYmIHNjcm9sbGVyXG4gICAgICAgICYmIHNjcm9sbGVyLndlZXhUeXBlID09PSAnd2F0ZXJmYWxsJ1xuICAgICAgICAmJiBzY3JvbGxlci5faGVhZGVyc1xuICAgICAgICAmJiBzY3JvbGxlci5faGVhZGVycy5pbmRleE9mKHZub2RlLiR2bm9kZSB8fCB2bm9kZSkgPiAtMSkge1xuICAgICAgICAvLyBpdCdzIGluIHdhdGVyZmFsbC4ganVzdCBzY3JvbGwgdG8gdGhlIHRvcC5cbiAgICAgICAgZWxSZWN0ID0gY3QuZmlyc3RFbGVtZW50Q2hpbGQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICAgIH1cbiAgICAgIGNvbnN0IGRpciA9IGRTdWZmaXgudG9Mb3dlckNhc2UoKVxuICAgICAgbGV0IG9mZnNldCA9IChpc1dpbmRvdyA/IDAgOiBjdFtgc2Nyb2xsJHtkU3VmZml4fWBdKSArIGVsUmVjdFtkaXJdIC0gY3RSZWN0W2Rpcl1cbiAgICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgIG9mZnNldCArPSBvcHRpb25zLm9mZnNldCAmJiBvcHRpb25zLm9mZnNldCAqIHdlZXguY29uZmlnLmVudi5zY2FsZSB8fCAwXG4gICAgICB9XG4gICAgICBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICAgICAgICBjb25zb2xlLndhcm4oJ1tWdWUgUmVuZGVyXSBUaGUgc2Vjb25kIHBhcmFtZXRlciBvZiBcInNjcm9sbFRvRWxlbWVudFwiIGlzIHJlcXVpcmVkLCAnXG4gICAgICAgICsgJ290aGVyd2lzZSBpdCBtYXkgbm90IHdvcmtzIHdlbGwgb24gbmF0aXZlLicpXG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmFuaW1hdGVkID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gc2Nyb2xsRWxlbWVudC5jYWxsKGN0LCBkU3VmZml4LCBvZmZzZXQpXG4gICAgICB9XG4gICAgICBzdGVwKHtcbiAgICAgICAgc2Nyb2xsYWJsZTogY3QsXG4gICAgICAgIHN0YXJ0VGltZTogbm93KCksXG4gICAgICAgIGZyYW1lOiBudWxsLFxuICAgICAgICBzdGFydFBvc2l0aW9uOiBpc1dpbmRvdyA/IHdpbmRvdy5wYWdlWU9mZnNldCA6IGN0W2BzY3JvbGwke2RTdWZmaXh9YF0sXG4gICAgICAgIHBvc2l0aW9uOiBvZmZzZXQsXG4gICAgICAgIG1ldGhvZDogc2Nyb2xsRWxlbWVudCxcbiAgICAgICAgZFN1ZmZpeDogZFN1ZmZpeFxuICAgICAgfSlcbiAgICB9XG4gIH0sXG4gIC8qKlxuICAgKiBnZXRDb21wb25lbnRSZWN0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSB2bm9kZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKi9cbiAgZ2V0Q29tcG9uZW50UmVjdDogZnVuY3Rpb24gKHZub2RlLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IHtcbiAgICAgIGlzQXJyYXlcbiAgICB9ID0gdXRpbHNcbiAgICBpZiAoaXNBcnJheSh2bm9kZSkpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICAgICAgICBjb25zb2xlLndhcm4oJ1t2dWUtcmVuZGVyXSB0aGUgcmVmIHBhc3NlZCB0byBhbmltYXRpb24udHJhbnNpdGlvbk9uY2UgaXMgYSBhcnJheS4nKVxuICAgICAgfVxuICAgICAgdm5vZGUgPSB2bm9kZVswXVxuICAgIH1cbiAgICBjb25zdCBzY2FsZSA9IHdpbmRvdy53ZWV4LmNvbmZpZy5lbnYuc2NhbGVcbiAgICBjb25zdCBpbmZvID0ge1xuICAgICAgcmVzdWx0OiBmYWxzZVxuICAgIH1cbiAgICBjb25zdCByZWN0S2V5cyA9IFsnd2lkdGgnLCAnaGVpZ2h0JywgJ3RvcCcsICdib3R0b20nLCAnbGVmdCcsICdyaWdodCddXG5cbiAgICBmdW5jdGlvbiByZWNhbGMgKHJlY3QpIHtcbiAgICAgIGNvbnN0IHJlcyA9IHt9XG4gICAgICByZWN0S2V5cy5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIGlmIChyZWN0W2tleV0pIHtcbiAgICAgICAgICByZXNba2V5XSA9IHJlY3Rba2V5XSAvIHNjYWxlXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICByZXR1cm4gcmVzXG4gICAgfVxuICAgIGlmICh2bm9kZSAmJiB2bm9kZSA9PT0gJ3ZpZXdwb3J0Jykge1xuICAgICAgaW5mby5yZXN1bHQgPSB0cnVlXG4gICAgICBpbmZvLnNpemUgPSByZWNhbGMoe1xuICAgICAgICB3aWR0aDogZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoLFxuICAgICAgICBoZWlnaHQ6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQsXG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgcmlnaHQ6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCxcbiAgICAgICAgYm90dG9tOiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0XG4gICAgICB9KVxuICAgIH1cbiAgICBlbHNlIGlmICh2bm9kZSkge1xuICAgICAgY29uc3QgZWwgPSB2bm9kZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50XG4gICAgICAgID8gdm5vZGVcbiAgICAgICAgOiB2bm9kZS4kZWxcbiAgICAgIGlmIChlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QpIHtcbiAgICAgICAgaW5mby5yZXN1bHQgPSB0cnVlXG4gICAgICAgIGluZm8uc2l6ZSA9IHJlY2FsYyhlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSlcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBpbmZvLnJlc3VsdCA9IGZhbHNlXG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IG1lc3NhZ2UgPSBpbmZvLnJlc3VsdCA/IGluZm8gOiB7XG4gICAgICByZXN1bHQ6IGZhbHNlLFxuICAgICAgZXJyTXNnOiAnSWxsZWdhbCBwYXJhbWV0ZXInXG4gICAgfVxuICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKG1lc3NhZ2UpXG4gICAgcmV0dXJuIG1lc3NhZ2VcbiAgfSxcbiAgLyoqXG4gICAqIGZvciBhZGRpbmcgZm9udEZhY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBmb250RmFjZVxuICAgKiBAcGFyYW0ge29iamVjdH0gc3R5bGVzIHJ1bGVzXG4gICAqL1xuICBhZGRSdWxlOiBmdW5jdGlvbiAoa2V5LCBzdHlsZXMpIHtcbiAgICBjb25zdCB7XG4gICAgICBjYW1lbFRvS2ViYWIsXG4gICAgICBhcHBlbmRDc3NcbiAgICB9ID0gdXRpbHNcbiAgICBrZXkgPSBjYW1lbFRvS2ViYWIoa2V5KVxuICAgIGxldCBzdHlsZXNUZXh0ID0gJydcbiAgICBmb3IgKGNvbnN0IGsgaW4gc3R5bGVzKSB7XG4gICAgICBpZiAoc3R5bGVzLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgIHN0eWxlc1RleHQgKz0gY2FtZWxUb0tlYmFiKGspICsgJzonICsgc3R5bGVzW2tdICsgJzsnXG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHN0eWxlVGV4dCA9IGBAJHtrZXl9eyR7c3R5bGVzVGV4dH19YFxuICAgIGFwcGVuZENzcyhzdHlsZVRleHQsICdkb20tYWRkZWQtcnVsZXMnKVxuICB9XG59XG5leHBvcnQgZGVmYXVsdCB7XG4gIGluaXQgKHdlZXgpIHtcbiAgICBjb25zdCBleHRlbmRLZXlzID0gd2VleC51dGlscy5leHRlbmRLZXlzXG4gICAgZXh0ZW5kS2V5cyh1dGlscywgd2VleC51dGlscywgWydjYW1lbFRvS2ViYWInLCAnYXBwZW5kQ3NzJywgJ2lzQXJyYXknLCAnZ2V0UGFyZW50U2Nyb2xsZXJFbGVtZW50J10pXG4gICAgd2VleC5yZWdpc3Rlck1vZHVsZSgnZG9tJywgZG9tKVxuICB9XG59XG4iLCIvKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogZ2xvYmFsRXZlbnQgQVBJOlxuICogQGRvYyBodHRwOi8vd2VleC5hcGFjaGUub3JnL2NuL3JlZmVyZW5jZXMvbW9kdWxlcy9nbG9iYWxldmVudC5odG1sXG4gKi9cbi8vIHRyYWNrIHZhcmllcyBraW5kcyBvZiBldmVudHMgYW5kIGxpc3RlbmVycy5cbmNvbnN0IGhhbmRsZXJUcmFrZXIgPSB7fVxuXG5jb25zdCBnbG9iYWxFdmVudCA9IHtcbiAgLyoqXG4gICAqIGFkZEV2ZW50TGlzdGVuZXJcbiAgICogTk9URTogb25lIGNhbGxiYWNrIGNhbiBvbmx5IGJlIGJvdW5kIHRvIHRoZSBzYW1lIGV2ZW50IG9uY2UuIEJpbmQgYSBjYWxsYmFjayB0d2ljZSBkb2Vzbid0XG4gICAqICBtZWFuIGl0IHdpbGwgYmUgY2FsbGVkIHR3aWNlIHdoZW4gdGhlIGV2ZW50IGZpcmVkIG9uY2UuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldnQgLSB0aGUgZXZlbnQgbmFtZSB0byBhZGQgYSBsaXN0ZW5lciBvbi5cbiAgICovXG4gIGFkZEV2ZW50TGlzdGVuZXIgKGV2dCwgY2FsbGJhY2spIHtcbiAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgW3Z1ZS1yZW5kZXJdIG1pc3NpbmcgY2FsbGJhY2sgYXJnIGluIGdsb2JhbEV2ZW50LmFkZEV2ZW50TGlzdGVuZXIuYClcbiAgICAgIH1cbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBsZXQgaGFuZGxlcnMgPSBoYW5kbGVyVHJha2VyW2V2dF1cbiAgICBpZiAoIWhhbmRsZXJzKSB7XG4gICAgICBoYW5kbGVycyA9IGhhbmRsZXJUcmFrZXJbZXZ0XSA9IFtdXG4gICAgfVxuICAgIGNvbnN0IGxlbiA9IGhhbmRsZXJzLmxlbmd0aFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGlmIChoYW5kbGVyc1tpXSA9PT0gY2FsbGJhY2spIHtcbiAgICAgICAgLy8gdGhpcyBjYWxsYmFjayBpcyBhbHJlYWR5IGJvdW5kLiBubyBuZWVkIHRvIGJpbmQgaXQgYWdhaW4uXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cbiAgICBoYW5kbGVycy5wdXNoKGNhbGxiYWNrKVxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZ0LCBjYWxsYmFjaylcbiAgfSxcblxuICAvKipcbiAgICogcmVtb3ZlRXZlbnRMaXN0ZW5lclxuICAgKiBOT1RFOiByZW1vdmUgYWxsIHRoZSBldmVudCBoYW5kbGVycyBmb3IgdGhlIHNwZWNpZmllZCBldmVudCB0eXBlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZ0IC0gdGhlIGV2ZW50IG5hbWUgdG8gcmVtb3ZlIGEgbGlzdGVuZXIgZnJvbS5cbiAgICovXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXIgKGV2dCkge1xuICAgIGNvbnN0IGhhbmRsZXJzID0gaGFuZGxlclRyYWtlcltldnRdXG4gICAgaWYgKCFoYW5kbGVycykge1xuICAgICAgLy8gZXZ0IGhhbmRsZXJzIGhhcyBiZWVuIGFscmVhZHkgcmVtb3ZlZC5cbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBoYW5kbGVycy5mb3JFYWNoKGNiID0+IGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZ0LCBjYikpXG4gICAgZGVsZXRlIGhhbmRsZXJUcmFrZXJbZXZ0XVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaW5pdCAod2VleCkge1xuICAgIHdlZXgucmVnaXN0ZXJNb2R1bGUoJ2dsb2JhbEV2ZW50JywgZ2xvYmFsRXZlbnQpXG4gIH1cbn1cbiIsIi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuY29uc3QgcXVldWUgPSBbXVxubGV0IGlzUHJvY2Vzc2luZyA9IGZhbHNlXG5sZXQgdG9hc3RXaW5cbmNvbnN0IFRPQVNUX1dJTl9DTEFTU19OQU1FID0gJ3dlZXgtdG9hc3QnXG5jb25zdCBUT0FTVF9UUkFOU0lUSU9OX0RVUkFUSU9OID0gMC40XG5cbmNvbnN0IERFRkFVTFRfRFVSQVRJT04gPSAwLjhcblxuZnVuY3Rpb24gc2hvd1RvYXN0V2luZG93IChtc2csIGNhbGxiYWNrKSB7XG4gIGlmICghdG9hc3RXaW4pIHtcbiAgICB0b2FzdFdpbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgdG9hc3RXaW4uY2xhc3NMaXN0LmFkZChUT0FTVF9XSU5fQ0xBU1NfTkFNRSlcbiAgICB0b2FzdFdpbi5jbGFzc0xpc3QuYWRkKCdoaWRlJylcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRvYXN0V2luKVxuICB9XG4gIHRvYXN0V2luLnRleHRDb250ZW50ID0gbXNnXG4gIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIHRvYXN0V2luLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGUnKVxuICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKClcbiAgfSwgMTYpXG59XG5cbmZ1bmN0aW9uIGhpZGVUb2FzdFdpbmRvdyAoY2FsbGJhY2spIHtcbiAgaWYgKCF0b2FzdFdpbikge1xuICAgIHJldHVyblxuICB9XG4gIHRvYXN0V2luLmNsYXNzTGlzdC5hZGQoJ2hpZGUnKVxuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpXG4gIH0sIFRPQVNUX1RSQU5TSVRJT05fRFVSQVRJT04gKiAxMDAwKVxufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHB1c2g6IGZ1bmN0aW9uIChtc2csIGR1cmF0aW9uKSB7XG4gICAgcXVldWUucHVzaCh7XG4gICAgICBtc2c6IG1zZyxcbiAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbiB8fCBERUZBVUxUX0RVUkFUSU9OXG4gICAgfSlcbiAgICB0aGlzLnNob3coKVxuICB9LFxuXG4gIHNob3c6IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCB0aGF0ID0gdGhpc1xuXG4gICAgLy8gQWxsIG1lc3NhZ2VzIGhhZCBiZWVuIHRvYXN0ZWQgYWxyZWFkeSwgc28gcmVtb3ZlIHRoZSB0b2FzdCB3aW5kb3csXG4gICAgaWYgKCFxdWV1ZS5sZW5ndGgpIHtcbiAgICAgIHRvYXN0V2luICYmIHRvYXN0V2luLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodG9hc3RXaW4pXG4gICAgICB0b2FzdFdpbiA9IG51bGxcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHRoZSBwcmV2aW91cyB0b2FzdCBpcyBub3QgZW5kZWQgeWV0LlxuICAgIGlmIChpc1Byb2Nlc3NpbmcpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBpc1Byb2Nlc3NpbmcgPSB0cnVlXG5cbiAgICBjb25zdCB0b2FzdEluZm8gPSBxdWV1ZS5zaGlmdCgpXG4gICAgc2hvd1RvYXN0V2luZG93KHRvYXN0SW5mby5tc2csIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBoaWRlVG9hc3RXaW5kb3coZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlzUHJvY2Vzc2luZyA9IGZhbHNlXG4gICAgICAgICAgdGhhdC5zaG93KClcbiAgICAgICAgfSlcbiAgICAgIH0sIHRvYXN0SW5mby5kdXJhdGlvbiAqIDEwMDApXG4gICAgfSlcbiAgfVxufVxuIiwiLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8vIHRoZXJlIHdpbGwgYmUgb25seSBvbmUgaW5zdGFuY2Ugb2YgbW9kYWwuXG5jb25zdCBNT0RBTF9XUkFQX0NMQVNTID0gJ3dlZXgtbW9kYWwtd3JhcCdcbmNvbnN0IE1PREFMX05PREVfQ0xBU1MgPSAnd2VleC1tb2RhbC1ub2RlJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNb2RhbCAoKSB7XG4gIHRoaXMud3JhcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoTU9EQUxfV1JBUF9DTEFTUylcbiAgdGhpcy5ub2RlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihNT0RBTF9OT0RFX0NMQVNTKVxuICBpZiAoIXRoaXMud3JhcCkge1xuICAgIHRoaXMuY3JlYXRlV3JhcCgpXG4gIH1cbiAgaWYgKCF0aGlzLm5vZGUpIHtcbiAgICB0aGlzLmNyZWF0ZU5vZGUoKVxuICB9XG4gIHRoaXMuY2xlYXJOb2RlKClcbiAgdGhpcy5jcmVhdGVOb2RlQ29udGVudCgpXG4gIHRoaXMuYmluZEV2ZW50cygpXG59XG5cbk1vZGFsLnByb3RvdHlwZSA9IHtcblxuICBzaG93OiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy53cmFwLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snXG4gICAgdGhpcy5ub2RlLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGUnKVxuICB9LFxuXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uICgpIHtcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHRoaXMud3JhcClcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHRoaXMubm9kZSlcbiAgICB0aGlzLndyYXAgPSBudWxsXG4gICAgdGhpcy5ub2RlID0gbnVsbFxuICB9LFxuXG4gIGNyZWF0ZVdyYXA6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLndyYXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIHRoaXMud3JhcC5jbGFzc05hbWUgPSBNT0RBTF9XUkFQX0NMQVNTXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLndyYXApXG4gIH0sXG5cbiAgY3JlYXRlTm9kZTogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMubm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgdGhpcy5ub2RlLmNsYXNzTGlzdC5hZGQoTU9EQUxfTk9ERV9DTEFTUywgJ2hpZGUnKVxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5ub2RlKVxuICB9LFxuXG4gIGNsZWFyTm9kZTogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMubm9kZS5pbm5lckhUTUwgPSAnJ1xuICB9LFxuXG4gIGNyZWF0ZU5vZGVDb250ZW50OiBmdW5jdGlvbiAoKSB7XG5cbiAgICAvLyBkbyBub3RoaW5nLlxuICAgIC8vIGNoaWxkIGNsYXNzZXMgY2FuIG92ZXJyaWRlIHRoaXMgbWV0aG9kLlxuICB9LFxuXG4gIGJpbmRFdmVudHM6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLndyYXAuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpXG4gICAgfSlcbiAgfVxufVxuIiwiLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgTW9kYWwgZnJvbSAnLi9tb2RhbCdcblxuY29uc3QgQ09OVEVOVF9DTEFTUyA9ICdjb250ZW50J1xuY29uc3QgTVNHX0NMQVNTID0gJ2NvbnRlbnQtbXNnJ1xuY29uc3QgQlVUVE9OX0dST1VQX0NMQVNTID0gJ2J0bi1ncm91cCdcbmNvbnN0IEJVVFRPTl9DTEFTUyA9ICdidG4nXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEFsZXJ0IChjb25maWcpIHtcbiAgdGhpcy5tc2cgPSBjb25maWcubWVzc2FnZSB8fCAnJ1xuICB0aGlzLmNhbGxiYWNrID0gY29uZmlnLmNhbGxiYWNrXG4gIHRoaXMub2tUaXRsZSA9IGNvbmZpZy5va1RpdGxlIHx8ICdPSydcbiAgTW9kYWwuY2FsbCh0aGlzKVxuICB0aGlzLm5vZGUuY2xhc3NMaXN0LmFkZCgnd2VleC1hbGVydCcpXG59XG5cbkFsZXJ0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoTW9kYWwucHJvdG90eXBlKVxuXG5BbGVydC5wcm90b3R5cGUuY3JlYXRlTm9kZUNvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IGNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICBjb250ZW50LmNsYXNzTGlzdC5hZGQoQ09OVEVOVF9DTEFTUylcbiAgdGhpcy5ub2RlLmFwcGVuZENoaWxkKGNvbnRlbnQpXG5cbiAgY29uc3QgbXNnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgbXNnLmNsYXNzTGlzdC5hZGQoTVNHX0NMQVNTKVxuICBtc2cuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGhpcy5tc2cpKVxuICBjb250ZW50LmFwcGVuZENoaWxkKG1zZylcblxuICBjb25zdCBidXR0b25Hcm91cCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gIGJ1dHRvbkdyb3VwLmNsYXNzTGlzdC5hZGQoQlVUVE9OX0dST1VQX0NMQVNTKVxuICB0aGlzLm5vZGUuYXBwZW5kQ2hpbGQoYnV0dG9uR3JvdXApXG4gIGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKEJVVFRPTl9DTEFTUywgJ2FsZXJ0LW9rJylcbiAgYnV0dG9uLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRoaXMub2tUaXRsZSkpXG4gIGJ1dHRvbkdyb3VwLmFwcGVuZENoaWxkKGJ1dHRvbilcbn1cblxuQWxlcnQucHJvdG90eXBlLmJpbmRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gIE1vZGFsLnByb3RvdHlwZS5iaW5kRXZlbnRzLmNhbGwodGhpcylcbiAgY29uc3QgYnV0dG9uID0gdGhpcy5ub2RlLnF1ZXJ5U2VsZWN0b3IoJy4nICsgQlVUVE9OX0NMQVNTKVxuICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5kZXN0cm95KClcbiAgICB0aGlzLmNhbGxiYWNrICYmIHRoaXMuY2FsbGJhY2soKVxuICB9LmJpbmQodGhpcykpXG59XG4iLCIvKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCBNb2RhbCBmcm9tICcuL21vZGFsJ1xuXG5jb25zdCBDT05URU5UX0NMQVNTID0gJ2NvbnRlbnQnXG5jb25zdCBNU0dfQ0xBU1MgPSAnY29udGVudC1tc2cnXG5jb25zdCBCVVRUT05fR1JPVVBfQ0xBU1MgPSAnYnRuLWdyb3VwJ1xuY29uc3QgQlVUVE9OX0NMQVNTID0gJ2J0bidcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQ29uZmlybSAoY29uZmlnKSB7XG4gIHRoaXMubXNnID0gY29uZmlnLm1lc3NhZ2UgfHwgJydcbiAgdGhpcy5jYWxsYmFjayA9IGNvbmZpZy5jYWxsYmFja1xuICB0aGlzLm9rVGl0bGUgPSBjb25maWcub2tUaXRsZSB8fCAnT0snXG4gIHRoaXMuY2FuY2VsVGl0bGUgPSBjb25maWcuY2FuY2VsVGl0bGUgfHwgJ0NhbmNlbCdcbiAgTW9kYWwuY2FsbCh0aGlzKVxuICB0aGlzLm5vZGUuY2xhc3NMaXN0LmFkZCgnd2VleC1jb25maXJtJylcbn1cblxuQ29uZmlybS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE1vZGFsLnByb3RvdHlwZSlcblxuQ29uZmlybS5wcm90b3R5cGUuY3JlYXRlTm9kZUNvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IGNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICBjb250ZW50LmNsYXNzTGlzdC5hZGQoQ09OVEVOVF9DTEFTUylcbiAgdGhpcy5ub2RlLmFwcGVuZENoaWxkKGNvbnRlbnQpXG5cbiAgY29uc3QgbXNnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgbXNnLmNsYXNzTGlzdC5hZGQoTVNHX0NMQVNTKVxuICBtc2cuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGhpcy5tc2cpKVxuICBjb250ZW50LmFwcGVuZENoaWxkKG1zZylcblxuICBjb25zdCBidXR0b25Hcm91cCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gIGJ1dHRvbkdyb3VwLmNsYXNzTGlzdC5hZGQoQlVUVE9OX0dST1VQX0NMQVNTKVxuICB0aGlzLm5vZGUuYXBwZW5kQ2hpbGQoYnV0dG9uR3JvdXApXG4gIGNvbnN0IGJ0bk9rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgYnRuT2suYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGhpcy5va1RpdGxlKSlcbiAgYnRuT2suY2xhc3NMaXN0LmFkZCgnYnRuLW9rJywgQlVUVE9OX0NMQVNTKVxuICBjb25zdCBidG5DYW5jZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICBidG5DYW5jZWwuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGhpcy5jYW5jZWxUaXRsZSkpXG4gIGJ0bkNhbmNlbC5jbGFzc0xpc3QuYWRkKCdidG4tY2FuY2VsJywgQlVUVE9OX0NMQVNTKVxuICBidXR0b25Hcm91cC5hcHBlbmRDaGlsZChidG5PaylcbiAgYnV0dG9uR3JvdXAuYXBwZW5kQ2hpbGQoYnRuQ2FuY2VsKVxuICB0aGlzLm5vZGUuYXBwZW5kQ2hpbGQoYnV0dG9uR3JvdXApXG59XG5cbkNvbmZpcm0ucHJvdG90eXBlLmJpbmRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gIE1vZGFsLnByb3RvdHlwZS5iaW5kRXZlbnRzLmNhbGwodGhpcylcbiAgY29uc3QgYnRuT2sgPSB0aGlzLm5vZGUucXVlcnlTZWxlY3RvcignLicgKyBCVVRUT05fQ0xBU1MgKyAnLmJ0bi1vaycpXG4gIGNvbnN0IGJ0bkNhbmNlbCA9IHRoaXMubm9kZS5xdWVyeVNlbGVjdG9yKCcuJyArIEJVVFRPTl9DTEFTUyArICcuYnRuLWNhbmNlbCcpXG4gIGJ0bk9rLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZGVzdHJveSgpXG4gICAgdGhpcy5jYWxsYmFjayAmJiB0aGlzLmNhbGxiYWNrKHRoaXMub2tUaXRsZSlcbiAgfS5iaW5kKHRoaXMpKVxuICBidG5DYW5jZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5kZXN0cm95KClcbiAgICB0aGlzLmNhbGxiYWNrICYmIHRoaXMuY2FsbGJhY2sodGhpcy5jYW5jZWxUaXRsZSlcbiAgfS5iaW5kKHRoaXMpKVxufVxuIiwiLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgTW9kYWwgZnJvbSAnLi9tb2RhbCdcblxuY29uc3QgQ09OVEVOVF9DTEFTUyA9ICdjb250ZW50J1xuY29uc3QgTVNHX0NMQVNTID0gJ2NvbnRlbnQtbXNnJ1xuY29uc3QgQlVUVE9OX0dST1VQX0NMQVNTID0gJ2J0bi1ncm91cCdcbmNvbnN0IEJVVFRPTl9DTEFTUyA9ICdidG4nXG5jb25zdCBJTlBVVF9XUkFQX0NMQVNTID0gJ2lucHV0LXdyYXAnXG5jb25zdCBJTlBVVF9DTEFTUyA9ICdpbnB1dCdcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUHJvbXB0IChjb25maWcpIHtcbiAgdGhpcy5tc2cgPSBjb25maWcubWVzc2FnZSB8fCAnJ1xuICB0aGlzLmRlZmF1bHRNc2cgPSBjb25maWcuZGVmYXVsdCB8fCAnJ1xuICB0aGlzLmNhbGxiYWNrID0gY29uZmlnLmNhbGxiYWNrXG4gIHRoaXMub2tUaXRsZSA9IGNvbmZpZy5va1RpdGxlIHx8ICdPSydcbiAgdGhpcy5jYW5jZWxUaXRsZSA9IGNvbmZpZy5jYW5jZWxUaXRsZSB8fCAnQ2FuY2VsJ1xuICBNb2RhbC5jYWxsKHRoaXMpXG4gIHRoaXMubm9kZS5jbGFzc0xpc3QuYWRkKCd3ZWV4LXByb21wdCcpXG59XG5cblByb21wdC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE1vZGFsLnByb3RvdHlwZSlcblxuUHJvbXB0LnByb3RvdHlwZS5jcmVhdGVOb2RlQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgY29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gIGNvbnRlbnQuY2xhc3NMaXN0LmFkZChDT05URU5UX0NMQVNTKVxuICB0aGlzLm5vZGUuYXBwZW5kQ2hpbGQoY29udGVudClcblxuICBjb25zdCBtc2cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICBtc2cuY2xhc3NMaXN0LmFkZChNU0dfQ0xBU1MpXG4gIG1zZy5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0aGlzLm1zZykpXG4gIGNvbnRlbnQuYXBwZW5kQ2hpbGQobXNnKVxuXG4gIGNvbnN0IGlucHV0V3JhcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gIGlucHV0V3JhcC5jbGFzc0xpc3QuYWRkKElOUFVUX1dSQVBfQ0xBU1MpXG4gIGNvbnRlbnQuYXBwZW5kQ2hpbGQoaW5wdXRXcmFwKVxuICBjb25zdCBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0JylcbiAgaW5wdXQuY2xhc3NMaXN0LmFkZChJTlBVVF9DTEFTUylcbiAgaW5wdXQudHlwZSA9ICd0ZXh0J1xuICBpbnB1dC5hdXRvZm9jdXMgPSB0cnVlXG4gIGlucHV0LnBsYWNlaG9sZGVyID0gdGhpcy5kZWZhdWx0TXNnXG4gIGlucHV0V3JhcC5hcHBlbmRDaGlsZChpbnB1dClcblxuICBjb25zdCBidXR0b25Hcm91cCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gIGJ1dHRvbkdyb3VwLmNsYXNzTGlzdC5hZGQoQlVUVE9OX0dST1VQX0NMQVNTKVxuICBjb25zdCBidG5PayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gIGJ0bk9rLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRoaXMub2tUaXRsZSkpXG4gIGJ0bk9rLmNsYXNzTGlzdC5hZGQoJ2J0bi1vaycsIEJVVFRPTl9DTEFTUylcbiAgY29uc3QgYnRuQ2FuY2VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgYnRuQ2FuY2VsLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRoaXMuY2FuY2VsVGl0bGUpKVxuICBidG5DYW5jZWwuY2xhc3NMaXN0LmFkZCgnYnRuLWNhbmNlbCcsIEJVVFRPTl9DTEFTUylcbiAgYnV0dG9uR3JvdXAuYXBwZW5kQ2hpbGQoYnRuT2spXG4gIGJ1dHRvbkdyb3VwLmFwcGVuZENoaWxkKGJ0bkNhbmNlbClcbiAgdGhpcy5ub2RlLmFwcGVuZENoaWxkKGJ1dHRvbkdyb3VwKVxufVxuXG5Qcm9tcHQucHJvdG90eXBlLmJpbmRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gIE1vZGFsLnByb3RvdHlwZS5iaW5kRXZlbnRzLmNhbGwodGhpcylcbiAgY29uc3QgYnRuT2sgPSB0aGlzLm5vZGUucXVlcnlTZWxlY3RvcignLicgKyBCVVRUT05fQ0xBU1MgKyAnLmJ0bi1vaycpXG4gIGNvbnN0IGJ0bkNhbmNlbCA9IHRoaXMubm9kZS5xdWVyeVNlbGVjdG9yKCcuJyArIEJVVFRPTl9DTEFTUyArICcuYnRuLWNhbmNlbCcpXG4gIGNvbnN0IHRoYXQgPSB0aGlzXG4gIGJ0bk9rLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IHZhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0JykudmFsdWVcbiAgICB0aGlzLmRlc3Ryb3koKVxuICAgIHRoaXMuY2FsbGJhY2sgJiYgdGhpcy5jYWxsYmFjayh7XG4gICAgICByZXN1bHQ6IHRoYXQub2tUaXRsZSxcbiAgICAgIGRhdGE6IHZhbFxuICAgIH0pXG4gIH0uYmluZCh0aGlzKSlcbiAgYnRuQ2FuY2VsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IHZhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0JykudmFsdWVcbiAgICB0aGlzLmRlc3Ryb3koKVxuICAgIHRoaXMuY2FsbGJhY2sgJiYgdGhpcy5jYWxsYmFjayh7XG4gICAgICByZXN1bHQ6IHRoYXQuY2FuY2VsVGl0bGUsXG4gICAgICBkYXRhOiB2YWxcbiAgICB9KVxuICB9LmJpbmQodGhpcykpXG59XG4iLCIvKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGBcbi53ZWV4LXRvYXN0IHtcbiAgZm9udC1zaXplOiAwLjQyNjY2N3JlbTtcbiAgbGluZS1oZWlnaHQ6IDAuNDI2NjY3cmVtO1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIHotaW5kZXg6IDE5OTk5OTk5OTk7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIG1heC13aWR0aDogODAlO1xuICBib3R0b206IDUwJTtcbiAgbGVmdDogNTAlO1xuICBwYWRkaW5nOiAwLjIxMzMzM3JlbTtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwMDtcbiAgY29sb3I6ICNmZmY7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgb3BhY2l0eTogMC43O1xuICAtd2Via2l0LXRyYW5zaXRpb246IGFsbCAwLjRzIGVhc2UtaW4tb3V0O1xuICAtbW96LXRyYW5zaXRpb246IGFsbCAwLjRzIGVhc2UtaW4tb3V0O1xuICAtbXMtdHJhbnNpdGlvbjogYWxsIDAuNHMgZWFzZS1pbi1vdXQ7XG4gIHRyYW5zaXRpb246IGFsbCAwLjRzIGVhc2UtaW4tb3V0O1xuICBib3JkZXItcmFkaXVzOiAwLjA2NjY2N3JlbTtcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7XG4gIC1tb3otdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpO1xuICAtbXMtdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7XG59XG5cbi53ZWV4LXRvYXN0LmhpZGUge1xuICBvcGFjaXR5OiAwO1xufVxuXG4ud2VleC1hbGVydCAud2VleC1hbGVydC1vayB7XG4gIHdpZHRoOiAxMDAlO1xufVxuXG4ud2VleC1jb25maXJtIC5idG4tZ3JvdXAgLmJ0biB7XG4gIGZsb2F0OiBsZWZ0O1xuICB3aWR0aDogNTAlO1xufVxuXG4ud2VleC1jb25maXJtIC5idG4tZ3JvdXAgLmJ0bi5idG4tb2sge1xuICBib3JkZXItcmlnaHQ6IDAuMDEzMzMzcmVtIHNvbGlkICNkZGQ7XG59XG5cbi53ZWV4LW1vZGFsLXdyYXAge1xuICBkaXNwbGF5OiBub25lO1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIHotaW5kZXg6IDk5OTk5OTk5OTtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAwO1xuICBvcGFjaXR5OiAwLjU7XG59XG5cbi53ZWV4LW1vZGFsLW5vZGUge1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIHotaW5kZXg6IDk5OTk5OTk5OTk7XG4gIHRvcDogNTAlO1xuICBsZWZ0OiA1MCU7XG4gIHdpZHRoOiA2LjY2NjY2N3JlbTtcbiAgbWluLWhlaWdodDogMi42NjY2NjdyZW07XG4gIGJvcmRlci1yYWRpdXM6IDAuMDY2NjY3cmVtO1xuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xuICAtbW96LXRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xuICAtbXMtdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xufVxuXG4ud2VleC1tb2RhbC1ub2RlLmhpZGUge1xuICBkaXNwbGF5OiBub25lO1xufVxuXG4ud2VleC1tb2RhbC1ub2RlIC5jb250ZW50IHtcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XG4gIGRpc3BsYXk6IC13ZWJraXQtZmxleDtcbiAgZGlzcGxheTogLW1vei1ib3g7XG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xuICBkaXNwbGF5OiBmbGV4O1xuICAtd2Via2l0LWJveC1vcmllbnQ6IHZlcnRpY2FsO1xuICAtd2Via2l0LWZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIC1tb3otYm94LW9yaWVudDogdmVydGljYWw7XG4gIC1tb3otYm94LWRpcmVjdGlvbjogbm9ybWFsO1xuICAtbXMtZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XG4gIC13ZWJraXQtYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgLW1zLWZsZXgtYWxpZ246IGNlbnRlcjtcbiAgLW1vei1ib3gtYWxpZ246IGNlbnRlcjtcbiAgLW1zLWZsZXgtYWxpZ246IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgLXdlYmtpdC1ib3gtcGFjazogY2VudGVyO1xuICAtd2Via2l0LWp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAtbW96LWJveC1wYWNrOiBjZW50ZXI7XG4gIC1tcy1mbGV4LXBhY2s6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIHdpZHRoOiAxMDAlO1xuICBtaW4taGVpZ2h0OiAxLjg2NjY2N3JlbTtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgZm9udC1zaXplOiAwLjQyNjY2N3JlbTtcbiAgbGluZS1oZWlnaHQ6IDAuNDI2NjY3cmVtO1xuICBwYWRkaW5nOiAwLjIxMzMzM3JlbTtcbiAgYm9yZGVyLWJvdHRvbTogMC4wMTMzMzNyZW0gc29saWQgI2RkZDtcbn1cblxuLndlZXgtbW9kYWwtbm9kZSAuYnRuLWdyb3VwIHtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMC44cmVtO1xuICBmb250LXNpemU6IDAuMzczMzMzcmVtO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbiAgYm9yZGVyOiBub25lO1xufVxuXG4ud2VleC1tb2RhbC1ub2RlIC5idG4tZ3JvdXAgLmJ0biB7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cblxuLndlZXgtbW9kYWwtbm9kZSAuYnRuLWdyb3VwIC5idG4ge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICBoZWlnaHQ6IDAuOHJlbTtcbiAgbGluZS1oZWlnaHQ6IDAuOHJlbTtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAwO1xuICBib3JkZXI6IG5vbmU7XG4gIGJhY2tncm91bmQ6IG5vbmU7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cblxuLndlZXgtcHJvbXB0IC5pbnB1dC13cmFwIHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgd2lkdGg6IDEwMCU7XG4gIG1hcmdpbi10b3A6IDAuMTMzMzMzcmVtO1xuICBoZWlnaHQ6IDAuOTZyZW07XG59XG5cbi53ZWV4LXByb21wdCAuaW5wdXQtd3JhcCAuaW5wdXQge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAwLjU2cmVtO1xuICBsaW5lLWhlaWdodDogMC41NnJlbTtcbiAgZm9udC1zaXplOiAwLjQyNjY2N3JlbTtcbiAgYm9yZGVyOiAwLjAxMzMzM3JlbSBzb2xpZCAjOTk5O1xufVxuXG4ud2VleC1wcm9tcHQgLmJ0bi1ncm91cCAuYnRuIHtcbiAgZmxvYXQ6IGxlZnQ7XG4gIHdpZHRoOiA1MCU7XG59XG5cbi53ZWV4LXByb21wdCAuYnRuLWdyb3VwIC5idG4uYnRuLW9rIHtcbiAgYm9yZGVyLXJpZ2h0OiAwLjAxMzMzM3JlbSBzb2xpZCAjZGRkO1xufVxuYFxuIiwiLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgdG9hc3QgZnJvbSAnLi90b2FzdCdcbmltcG9ydCBBbGVydCBmcm9tICcuL2FsZXJ0J1xuaW1wb3J0IENvbmZpcm0gZnJvbSAnLi9jb25maXJtJ1xuaW1wb3J0IFByb21wdCBmcm9tICcuL3Byb21wdCdcbmltcG9ydCBfY3NzIGZyb20gJy4vc3R5bGUnXG5cbi8vIFRPRE86IHJld3JpdGUgdGhlIG1vZGFsIHN0eWxlc1xuY29uc3QgbW9kYWwgPSB7XG5cbiAgLy8gZHVyYXRpb246IGRlZmF1bHQgaXMgMC44IHNlY29uZHMuXG4gIHRvYXN0OiBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgdG9hc3QucHVzaChjb25maWcubWVzc2FnZSwgY29uZmlnLmR1cmF0aW9uKVxuICB9LFxuXG4gIC8vIGNvbmZpZzpcbiAgLy8gIC0gbWVzc2FnZTogc3RyaW5nXG4gIC8vICAtIG9rVGl0bGU6IHRpdGxlIG9mIG9rIGJ1dHRvblxuICAvLyAgLSBjYWxsYmFja1xuICBhbGVydDogZnVuY3Rpb24gKGNvbmZpZywgY2FsbGJhY2spIHtcbiAgICBjb25maWcuY2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpXG4gICAgfVxuICAgIG5ldyBBbGVydChjb25maWcpLnNob3coKVxuICB9LFxuXG4gIC8vIGNvbmZpZzpcbiAgLy8gIC0gbWVzc2FnZTogc3RyaW5nXG4gIC8vICAtIG9rVGl0bGU6IHRpdGxlIG9mIG9rIGJ1dHRvblxuICAvLyAgLSBjYW5jZWxUaXRsZTogdGl0bGUgb2YgY2FuY2VsIGJ1dHRvblxuICAvLyAgLSBjYWxsYmFja1xuICBjb25maXJtOiBmdW5jdGlvbiAoY29uZmlnLCBjYWxsYmFjaykge1xuICAgIGNvbmZpZy5jYWxsYmFjayA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKHZhbClcbiAgICB9XG4gICAgbmV3IENvbmZpcm0oY29uZmlnKS5zaG93KClcbiAgfSxcblxuICAvLyBjb25maWc6XG4gIC8vICAtIG1lc3NhZ2U6IHN0cmluZ1xuICAvLyAgLSBva1RpdGxlOiB0aXRsZSBvZiBvayBidXR0b25cbiAgLy8gIC0gY2FuY2VsVGl0bGU6IHRpdGxlIG9mIGNhbmNlbCBidXR0b25cbiAgLy8gIC0gY2FsbGJhY2tcbiAgcHJvbXB0OiBmdW5jdGlvbiAoY29uZmlnLCBjYWxsYmFjaykge1xuICAgIGNvbmZpZy5jYWxsYmFjayA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKHZhbClcbiAgICB9XG4gICAgbmV3IFByb21wdChjb25maWcpLnNob3coKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaW5pdDogZnVuY3Rpb24gKFdlZXgpIHtcbiAgICBXZWV4LnV0aWxzLmFwcGVuZENzcyhfY3NzLCAnd2VleC1tdWQtbW9kYWwnKVxuICAgIFdlZXgucmVnaXN0ZXJNb2R1bGUoJ21vZGFsJywgbW9kYWwpXG4gIH1cbn1cbiIsIi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKipcbiAqIE5hdmlnYXRvciBtb2R1bGVcbiAqL1xuY29uc3QgbmF2aWdhdG9yTW9kdWxlID0ge1xuICBwdXNoOiBmdW5jdGlvbiAoY29uZmlnLCBjYWxsYmFjaykge1xuICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gY29uZmlnLnVybFxuICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKClcbiAgfSxcblxuICBwb3A6IGZ1bmN0aW9uIChjb25maWcsIGNhbGxiYWNrKSB7XG4gICAgd2luZG93Lmhpc3RvcnkuYmFjaygpXG4gICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaW5pdCAod2VleCkge1xuICAgIHdlZXgucmVnaXN0ZXJNb2R1bGUoJ25hdmlnYXRvcicsIG5hdmlnYXRvck1vZHVsZSlcbiAgfVxufVxuIiwiLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qKlxuICogV2VidmlldyBtb2R1bGVcbiAqL1xubGV0IGlzQXJyYXlcblxuY29uc3Qgd2VidmlldyA9IHtcbiAgZ29CYWNrICh2bm9kZSkge1xuICAgIGlmIChpc0FycmF5KHZub2RlKSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignW3Z1ZS1yZW5kZXJdIHRoZSByZWYgcGFzc2VkIHRvIHdlYnZpZXcuZ29CYWNrIGlzIGEgYXJyYXkuJylcbiAgICAgIH1cbiAgICAgIHZub2RlID0gdm5vZGVbMF1cbiAgICB9XG4gICAgaWYgKHZub2RlICYmIHR5cGVvZiB2bm9kZS5nb0JhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZub2RlLmdvQmFjaygpXG4gICAgfVxuICB9LFxuICBnb0ZvcndhcmQgKHZub2RlKSB7XG4gICAgaWYgKGlzQXJyYXkodm5vZGUpKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdbdnVlLXJlbmRlcl0gdGhlIHJlZiBwYXNzZWQgdG8gd2Vidmlldy5nb0ZvcndhcmQgaXMgYSBhcnJheS4nKVxuICAgICAgfVxuICAgICAgdm5vZGUgPSB2bm9kZVswXVxuICAgIH1cbiAgICBpZiAodm5vZGUgJiYgdHlwZW9mIHZub2RlLmdvRm9yd2FyZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdm5vZGUuZ29Gb3J3YXJkKClcbiAgICB9XG4gIH0sXG4gIHJlbG9hZCAodm5vZGUpIHtcbiAgICBpZiAoaXNBcnJheSh2bm9kZSkpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICAgICAgICBjb25zb2xlLndhcm4oJ1t2dWUtcmVuZGVyXSB0aGUgcmVmIHBhc3NlZCB0byB3ZWJ2aWV3LnJlbG9hZCBpcyBhIGFycmF5LicpXG4gICAgICB9XG4gICAgICB2bm9kZSA9IHZub2RlWzBdXG4gICAgfVxuICAgIGlmICh2bm9kZSAmJiB0eXBlb2Ygdm5vZGUucmVsb2FkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2bm9kZS5yZWxvYWQoKVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGluaXQgKHdlZXgpIHtcbiAgICBpc0FycmF5ID0gd2VleC51dGlscy5pc0FycmF5XG4gICAgd2VleC5yZWdpc3Rlck1vZHVsZSgnd2VidmlldycsIHdlYnZpZXcpXG4gIH1cbn1cbiIsIi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiB3ZWJzb2NrZXQgbW9kdWxlXG4gKi9cbi8qZ2xvYmFsIFdlYlNvY2tldCovXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gKCkge1xuICBjb25zdCByZWdpc3Rlckxpc3RlbmVycyA9IFsnb25vcGVuJywgJ29ubWVzc2FnZScsICdvbmVycm9yJywgJ29uY2xvc2UnXVxuICBjb25zdCB3cyA9IHtcbiAgICBJTlNUQU5DRTogbnVsbCxcbiAgICBXZWJTb2NrZXQ6IGZ1bmN0aW9uICh1cmwsIHByb3RvY29sKSB7XG4gICAgICBpZiAoIXVybCkge1xuICAgICAgICB3cy5JTlNUQU5DRSA9IG51bGxcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBpZiAoIXByb3RvY29sKSB7XG4gICAgICAgIHdzLklOU1RBTkNFID0gbmV3IFdlYlNvY2tldCh1cmwpXG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgd3MuSU5TVEFOQ0UgPSBuZXcgV2ViU29ja2V0KHVybCwgcHJvdG9jb2wpXG4gICAgICB9XG4gICAgICByZXR1cm4gd3MuSU5TVEFOQ0VcbiAgICB9LFxuICAgIHNlbmQ6IGZ1bmN0aW9uIChtZXNzYWdlcykge1xuICAgICAgd3MuSU5TVEFOQ0UgJiYgd3MuSU5TVEFOQ0Uuc2VuZChtZXNzYWdlcylcbiAgICB9LFxuICAgIGNsb3NlOiBmdW5jdGlvbiAoKSB7XG4gICAgICB3cy5JTlNUQU5DRSAmJiB3cy5JTlNUQU5DRS5jbG9zZSgpXG4gICAgfVxuICB9XG4gIGZvciAoY29uc3QgaSBpbiByZWdpc3Rlckxpc3RlbmVycykge1xuICAgIGlmIChyZWdpc3Rlckxpc3RlbmVycy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdzLCByZWdpc3Rlckxpc3RlbmVyc1tpXSwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gd3MuSU5TVEFOQ0UgJiYgd3MuSU5TVEFOQ0VbcmVnaXN0ZXJMaXN0ZW5lcnNbaV1dXG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgICAgaWYgKHdzLklOU1RBTkNFKSB7XG4gICAgICAgICAgICB3cy5JTlNUQU5DRVtyZWdpc3Rlckxpc3RlbmVyc1tpXV0gPSBmblxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHdzXG59KSgpXG4iLCIvKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB3ZWJzb2NrZXQgZnJvbSAnLi93ZWJzb2NrZXQnXG5cbi8vIFRPRE86IHJld3JpdGUgdGhlIG1vZHVsZSBtZXRhXG5leHBvcnQgZGVmYXVsdCB7XG4gIGluaXQ6IGZ1bmN0aW9uIChXZWV4KSB7XG4gICAgV2VleC5yZWdpc3Rlck1vZHVsZSgnd2ViU29ja2V0Jywgd2Vic29ja2V0LCB7IHJlZ2lzdGVyVHlwZTogJ2Fzc2lnbm1lbnQnIH0pXG4gIH1cbn1cbiIsIi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyByZXNldFZpZXdwb3J0IH0gZnJvbSAnLi4vd2VleC92aWV3cG9ydCdcblxuY29uc3QgbWV0YSA9IHtcbiAgLyoqXG4gICAqIHNldFZpZXdwb3J0LlxuICAgKiBDaGFuZ2luZyB2aWV3cG9ydCBkZXNpZ24gd2lkdGggYXQgcnVudGltZS5cbiAgICovXG4gIHNldFZpZXdwb3J0IChvcHRpb25zKSB7XG4gICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBbdnVlLXJlbmRlcl0gc2V0IHZpZXdwb3J0IHdpZHRoIGludmFsaWQgb3B0aW9uczogJHtvcHRpb25zfWApXG4gICAgfVxuICAgIGNvbnN0IG5ld1dpZHRoID0gcGFyc2VJbnQob3B0aW9ucy53aWR0aClcbiAgICBpZiAoIWlzTmFOKG5ld1dpZHRoKSAmJiBuZXdXaWR0aCA+IDApIHtcbiAgICAgIHJlc2V0Vmlld3BvcnQob3B0aW9ucy53aWR0aClcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBbdnVlLXJlbmRlcl0gc2V0IHZpZXdwb3J0IHdpZHRoIGludmFsaWQgb3B0aW9ucy53aWR0aDogJHtvcHRpb25zLndpZHRofWApXG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaW5pdCAod2VleCkge1xuICAgIHdlZXgucmVnaXN0ZXJNb2R1bGUoJ21ldGEnLCBtZXRhKVxuICB9XG59XG4iLCIvKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLy8gbW9kdWxlcyBmcm9tIHJlbmRlci9icm93ZXNyIChsZWdhY3kgbW9kdWxlcylcblxuaW1wb3J0IGdlb2xvY2F0aW9uIGZyb20gJy4vZ2VvbG9jYXRpb24nXG5pbXBvcnQgc3RvcmFnZSBmcm9tICcuL3N0b3JhZ2UnXG5pbXBvcnQgc3RyZWFtIGZyb20gJy4vc3RyZWFtJ1xuaW1wb3J0IGNsaXBib2FyZCBmcm9tICcuL2NsaXBib2FyZCdcbmltcG9ydCBldmVudE1vZHVsZSBmcm9tICcuL2V2ZW50J1xuXG4vLyBjdXN0b20gbW9kdWxlc1xuaW1wb3J0IGFuaW1hdGlvbiBmcm9tICcuL2FuaW1hdGlvbidcbmltcG9ydCBkb20gZnJvbSAnLi9kb20nXG5pbXBvcnQgZ2xvYmFsRXZlbnQgZnJvbSAnLi9nbG9iYWxFdmVudCdcbmltcG9ydCBtb2RhbCBmcm9tICcuL21vZGFsJ1xuaW1wb3J0IG5hdmlnYXRvck1vZHVsZSBmcm9tICcuL25hdmlnYXRvcidcbmltcG9ydCB3ZWJ2aWV3IGZyb20gJy4vd2VidmlldydcbmltcG9ydCB3ZWJzb2NrZXQgZnJvbSAnLi93ZWJzb2NrZXQnXG5pbXBvcnQgbWV0YSBmcm9tICcuL21ldGEnXG5cbmV4cG9ydCBkZWZhdWx0IFtcbiAgZ2VvbG9jYXRpb24sXG4gIHN0b3JhZ2UsXG4gIHN0cmVhbSxcbiAgY2xpcGJvYXJkLFxuICBldmVudE1vZHVsZSxcbiAgbW9kYWwsXG4gIHdlYnNvY2tldCxcbiAgYW5pbWF0aW9uLFxuICBkb20sXG4gIGdsb2JhbEV2ZW50LFxuICBuYXZpZ2F0b3JNb2R1bGUsXG4gIHdlYnZpZXcsXG4gIG1ldGFcbl1cbiIsIi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuY29uc3QgdmFsTWFwID0ge1xuICBjb250YWluOiAnY29udGFpbicsXG4gIGNvdmVyOiAnY292ZXInLFxuICBzdHJldGNoOiAnMTAwJSAxMDAlJ1xufVxuY29uc3QgdmFscyA9IE9iamVjdC5rZXlzKHZhbE1hcClcbmNvbnN0IGRlZmF1bHRWYWwgPSAnc3RyZXRjaCdcblxuZXhwb3J0IGRlZmF1bHQge1xuICBpbml0ICh3ZWV4KSB7XG4gICAgd2VleC5fX3Z1ZV9fLmRpcmVjdGl2ZSgnd2VleC1yZXNpemUnLCBmdW5jdGlvbiAoZWwsIGJpbmRpbmcpIHtcbiAgICAgIGlmIChlbC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgIT09ICdmaWd1cmUnKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgbGV0IHZhbHVlID0gYmluZGluZy52YWx1ZVxuICAgICAgY29uc3Qgb2xkVmFsdWUgPSBiaW5kaW5nLm9sZHZhbHVlXG4gICAgICBpZiAodmFsdWUgPT09IG9sZFZhbHVlKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgaWYgKHZhbHMuaW5kZXhPZih2YWx1ZSkgPD0gLTEpIHtcbiAgICAgICAgdmFsdWUgPSBkZWZhdWx0VmFsXG4gICAgICB9XG4gICAgICBlbC5zdHlsZS5iYWNrZ3JvdW5kU2l6ZSA9IHZhbE1hcFt2YWx1ZV1cbiAgICB9KVxuICB9XG59XG4iLCIvKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCByZXNpemUgZnJvbSAnLi9yZXNpemUnXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgcmVzaXplXG59XG4iLCJpbXBvcnQgd2VleCBmcm9tICcuLi8uLi8uLi9zcmMnXG5cbmltcG9ydCBjb21wb25lbnRzIGZyb20gJy4uLy4uLy4uL3NyYy9jb21wb25lbnRzJ1xuaW1wb3J0IG1vZHVsZXMgZnJvbSAnLi4vLi4vLi4vc3JjL21vZHVsZXMnXG5pbXBvcnQgZGlyZWN0aXZlcyBmcm9tICcuLi8uLi8uLi9zcmMvZGlyZWN0aXZlcydcblxuY29uc3QgcHJlSW5pdCA9IHdlZXguaW5pdFxuXG53ZWV4LmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHByZUluaXQuYXBwbHkod2VleCwgYXJndW1lbnRzKVxuICBjb25zdCBwbHVnaW5zID0gY29tcG9uZW50cy5jb25jYXQobW9kdWxlcylcblxuICBwbHVnaW5zLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbikge1xuICAgIHdlZXguaW5zdGFsbChwbHVnaW4pXG4gIH0pXG5cbiAgZm9yIChjb25zdCBrIGluIGRpcmVjdGl2ZXMpIHtcbiAgICB3ZWV4Lmluc3RhbGwoZGlyZWN0aXZlc1trXSlcbiAgfVxufVxuXG5pZiAoZ2xvYmFsLlZ1ZSkge1xuICB3ZWV4LmluaXQoZ2xvYmFsLlZ1ZSlcbn1cblxuZXhwb3J0IGRlZmF1bHQgd2VleFxuIl0sIm5hbWVzIjpbImRlZmluZWQiLCJ0b0ludGVnZXIiLCJpc09iamVjdCIsInJlcXVpcmUkJDAiLCJkb2N1bWVudCIsInJlcXVpcmUkJDEiLCJyZXF1aXJlJCQyIiwiYW5PYmplY3QiLCJ0b1ByaW1pdGl2ZSIsIklFOF9ET01fREVGSU5FIiwiZFAiLCJjcmVhdGVEZXNjIiwiaGFzIiwiaGlkZSIsImdsb2JhbCIsImFGdW5jdGlvbiIsImNvcmUiLCJjdHgiLCJyZWRlZmluZSIsImNvZiIsIklPYmplY3QiLCJtaW4iLCJ0b0lPYmplY3QiLCJ0b0xlbmd0aCIsInRvQWJzb2x1dGVJbmRleCIsInVpZCIsIklFX1BST1RPIiwiJGtleXMiLCJlbnVtQnVnS2V5cyIsImdldEtleXMiLCJQUk9UT1RZUEUiLCJkUHMiLCJjcmVhdGUiLCJkZXNjcmlwdG9yIiwic2V0VG9TdHJpbmdUYWciLCJ0b09iamVjdCIsIiRpdGVyQ3JlYXRlIiwiZ2V0UHJvdG90eXBlT2YiLCJMSUJSQVJZIiwiSXRlcmF0b3JzIiwiJGV4cG9ydCIsIklURVJBVE9SIiwiJGRlZmluZVByb3BlcnR5IiwiVEFHIiwiY2xhc3NvZiIsImdldEl0ZXJGbiIsImlzQXJyYXlJdGVyIiwiY3JlYXRlUHJvcGVydHkiLCJjYWxsIiwiZ09QUyIsInBJRSIsImFyZ3VtZW50cyIsIkFycmF5UHJvdG8iLCJzdGVwIiwiYWRkVG9VbnNjb3BhYmxlcyIsIndrcyIsIiRpdGVyYXRvcnMiLCJwcm9jZXNzIiwiaW52b2tlIiwiY2VsIiwiaHRtbCIsImlzTm9kZSIsIm5ld1Byb21pc2VDYXBhYmlsaXR5IiwiU1BFQ0lFUyIsIkRFU0NSSVBUT1JTIiwiVHlwZUVycm9yIiwibmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUiLCJwZXJmb3JtIiwiYW5JbnN0YW5jZSIsInJlcXVpcmUkJDMiLCJzcGVjaWVzQ29uc3RydWN0b3IiLCJyZXF1aXJlJCQ0IiwicmVxdWlyZSQkNSIsInJlcXVpcmUkJDYiLCJwcm9taXNlUmVzb2x2ZSIsInJlcXVpcmUkJDciLCJmb3JPZiIsImNvbnN0IiwibGliIiwibGV0IiwiZW52IiwiaSIsInRvU3RyaW5nIiwiaW5pdCIsImV4dGVuZCIsImV2ZW50IiwiX3VpZCIsImluaXRWaWV3cG9ydCIsIndlZXgiLCJ1dGlscy5hcHBlbmRDc3MiLCJ0YWdNYXAiLCJnZXRUcmFuc2Zvcm1lciIsImJpbmRpbmdTdHlsZU5hbWVzRm9yUHgyUmVtIiwidGhpcyIsIl9pbml0ZWQiLCJiYXNlIiwibWFwRm9ybUV2ZW50cyIsImFwcGVuZENzcyIsInJlY3QiLCJzY3JvbGxhYmxlIiwidm5vZGUiLCJ0YWciLCJjb2x1bW5Eb20iLCJleHRyYWN0Q29tcG9uZW50U3R5bGUiLCJnZXRSZ2IiLCJsb29wQXJyYXkiLCJnZXRTdHlsZVNoZWV0QnlJZCIsInByb2Nlc3NTdHlsZSIsImxvYWRpbmdJbmRpY2F0b3IiLCJzbGlkZXIiLCJnZXRDb21wb25lbnRJbmxpbmVTdHlsZSIsImluZGljYXRvciIsIm1ldGEiLCJoYXNPd25Qcm9wZXJ0eSIsInV0aWxzIiwicXMiLCJxdWV1ZSIsIkNPTlRFTlRfQ0xBU1MiLCJNU0dfQ0xBU1MiLCJCVVRUT05fR1JPVVBfQ0xBU1MiLCJCVVRUT05fQ0xBU1MiLCJfY3NzIiwiaXNBcnJheSIsIndlYnNvY2tldCIsImdlb2xvY2F0aW9uIiwic3RvcmFnZSIsInN0cmVhbSIsImNsaXBib2FyZCIsIm1vZGFsIiwiYW5pbWF0aW9u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RSxHQUFHLENBQUMsQ0FBQztBQUNYLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUN2QixRQUFjLEdBQUcsVUFBVSxHQUFHLEVBQUU7RUFDOUIsT0FBTyxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsS0FBSyxTQUFTLEdBQUcsRUFBRSxHQUFHLEdBQUcsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Q0FDdkY7OztBQ0RELElBQUksR0FBRyxHQUFHUixJQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ25DLElBQUksU0FBUyxHQUFHLFVBQVUsQ0FBQztBQUMzQixJQUFJLFNBQVMsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDcEMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQzs7QUFFNUNFLEtBQWtCLENBQUMsYUFBYSxHQUFHLFVBQVUsRUFBRSxFQUFFO0VBQy9DLE9BQU8sU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztDQUMzQixDQUFDOztBQUVGLENBQUMsY0FBYyxHQUFHLFVBQVUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFO0VBQzdDLElBQUksVUFBVSxHQUFHLE9BQU8sR0FBRyxJQUFJLFVBQVUsQ0FBQztFQUMxQyxJQUFJLFVBQVUsSUFBRU8sSUFBRyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsSUFBSUMsS0FBSSxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxDQUFDLEdBQUM7RUFDM0QsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxJQUFFLFNBQU87RUFDM0IsSUFBSSxVQUFVLElBQUVELElBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLElBQUlDLEtBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FB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QUMsS0FBSyxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBQztFQUN4RSxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztNQUN2QyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztNQUM3QyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBQztFQUMxQixJQUFJLFNBQVMsR0FBRztJQUNkLEVBQUU7TUFDQSxLQUFLLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDO01BQzdCLEtBQUssR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUM7SUFDL0IsRUFBRTtNQUNBLEtBQUssR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUM7TUFDN0IsS0FBSyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFDOztFQUVsQyxPQUFPO0lBQ0wsTUFBTSxFQUFFLE1BQU07SUFDZCxLQUFLLEVBQUUsS0FBSztJQUNaLFNBQVMsRUFBRSxTQUFTO0lBQ3BCLE1BQU0sRUFBRTtNQUNOLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7TUFDbkUsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxN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Q0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUMsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxHQUFDLE9BQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFDLE9BQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLHdIQUF3SCxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBQyxNQUFNLElBQUksS0FBSyxDQUFDLG1CQUFtQixDQUFDLEdBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxFQUFFLE9BQU8sUUFBUSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFRLENBQUMsRUFBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBQyxD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
